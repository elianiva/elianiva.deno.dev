import{S as n,i as a,s,o as t,p as e,r as o,u as p,v as c,x as i,y as r,z as l,w as u,e as k,t as f,a as h,f as g,g as d,k as m,d as v,c as w,h as y,j as E,l as b}from"../../../chunks/stores-7ca13020.js";import{P as L}from"../../../chunks/post-14e8d485.js";import{U as I}from"../../../chunks/Update-70845eca.js";import"../../../chunks/ProgressButton-549bf321.js";import"../../../chunks/theme-0c5a7997.js";function P(n){let a,s,t,e,o,p,c,i;return{c(){a=k("p"),s=f("I’ve updated my config to use a "),t=k("em"),e=f("better"),o=f(" way to set them up. Basically, I have a key-value pair table, each item is a table with the server name as its key. This way, I wouldn’t need to copy and paste "),p=k("code"),c=f("nvim_lsp.lsp_name.setup{...}"),i=f(".")},l(n){a=g(n,"P",{});var r=d(a);s=m(r,"I’ve updated my config to use a "),t=g(r,"EM",{});var l=d(t);e=m(l,"better"),l.forEach(v),o=m(r," way to set them up. Basically, I have a key-value pair table, each item is a table with the server name as its key. This way, I wouldn’t need to copy and paste "),p=g(r,"CODE",{});var u=d(p);c=m(u,"nvim_lsp.lsp_name.setup{...}"),u.forEach(v),i=m(r,"."),r.forEach(v)},m(n,r){E(n,a,r),b(a,s),b(a,t),b(t,e),b(a,o),b(a,p),b(p,c),b(a,i)},d(n){n&&v(a)}}}function _(n){let a,s,t,e,o;return{c(){a=k("p"),s=f("I now use "),t=k("a"),e=f("gofumpt"),o=f(" for stricter formatting."),this.h()},l(n){a=g(n,"P",{});var p=d(a);s=m(p,"I now use "),t=g(p,"A",{href:!0,rel:!0});var c=d(t);e=m(c,"gofumpt"),c.forEach(v),o=m(p," for stricter formatting."),p.forEach(v),this.h()},h(){y(t,"href","https://github.com/mvdan/gofumpt"),y(t,"rel","nofollow")},m(n,p){E(n,a,p),b(a,s),b(a,t),b(t,e),b(a,o)},d(n){n&&v(a)}}}function S(n){let a,s,t,e,o;return{c(){a=k("p"),s=f("I am no longer using efm-langserver for formatting because I have an issue with prettier not working correctly when using it to format svelte file. So I use "),t=k("a"),e=f("formatter.nvim"),o=f(" instead."),this.h()},l(n){a=g(n,"P",{});var p=d(a);s=m(p,"I am no longer using efm-langserver for formatting because I have an issue with prettier not working correctly when using it to format svelte file. So I use "),t=g(p,"A",{href:!0,rel:!0});var c=d(t);e=m(c,"formatter.nvim"),c.forEach(v),o=m(p," instead."),p.forEach(v),this.h()},h(){y(t,"href","https://github.com/mhartington/formatter.nvim"),y(t,"rel","nofollow")},m(n,p){E(n,a,p),b(a,s),b(a,t),b(t,e),b(a,o)},d(n){n&&v(a)}}}function C(n){let a,s,t,e,o;return{c(){a=k("p"),s=f("I’ve found a better way from one of "),t=k("a"),e=f("TJ’s"),o=f(" stream to do this which looks like this."),this.h()},l(n){a=g(n,"P",{});var p=d(a);s=m(p,"I’ve found a better way from one of "),t=g(p,"A",{href:!0,rel:!0});var c=d(t);e=m(c,"TJ’s"),c.forEach(v),o=m(p," stream to do this which looks like this."),p.forEach(v),this.h()},h(){y(t,"href","https://www.twitch.tv/teej_dv"),y(t,"rel","nofollow")},m(n,p){E(n,a,p),b(a,s),b(a,t),b(t,e),b(a,o)},d(n){n&&v(a)}}}function $(n){let a,s,t,c,u,L,$,x,A,D,T,H,O,M,N,j,R,U,Y,W,F,J,X,q,V,z,B,K,Z,G,Q,nn,an,sn,tn,en,on,pn,cn,rn,ln,un,kn,fn,hn,gn,dn,mn,vn,wn,yn,En,bn,Ln,In,Pn,_n,Sn,Cn,$n,xn,An,Dn,Tn,Hn,On,Mn,Nn,jn,Rn,Un,Yn,Wn,Fn,Jn,Xn,qn,Vn,zn,Bn,Kn,Zn,Gn,Qn,na,aa,sa,ta,ea,oa,pa,ca,ia,ra,la,ua,ka,fa,ha,ga,da,ma,va,wa,ya,Ea,ba,La,Ia,Pa,_a,Sa,Ca,$a,xa,Aa,Da,Ta,Ha,Oa,Ma,Na,ja,Ra,Ua,Ya,Wa,Fa,Ja,Xa,qa,Va,za,Ba,Ka,Za,Ga,Qa,ns,as,ss,ts,es,os,ps,cs,is,rs,ls,us,ks,fs,hs,gs,ds,ms,vs,ws,ys,Es,bs,Ls,Is,Ps,_s,Ss,Cs,$s,xs,As,Ds,Ts,Hs,Os,Ms,Ns,js,Rs,Us,Ys,Ws,Fs,Js,Xs,qs,Vs,zs,Bs,Ks,Zs,Gs,Qs,nt,at,st,tt,et,ot,pt,ct,it,rt,lt,ut,kt,ft,ht,gt,dt,mt,vt,wt,yt,Et,bt,Lt,It,Pt,_t,St,Ct,$t,xt,At,Dt,Tt,Ht,Ot,Mt,Nt,jt,Rt,Ut,Yt,Wt,Ft,Jt,Xt,qt,Vt,zt,Bt,Kt,Zt,Gt,Qt,ne,ae,se,te,ee,oe,pe,ce,ie,re,le,ue,ke,fe,he,ge,de,me,ve,we,ye,Ee,be,Le,Ie,Pe,_e,Se,Ce,$e,xe,Ae,De,Te,He,Oe,Me,Ne,je,Re,Ue,Ye,We,Fe,Je,Xe,qe,Ve,ze,Be,Ke,Ze,Ge,Qe,no,ao,so,to,eo,oo,po,co,io,ro,lo,uo,ko,fo,ho,go,mo,vo,wo,yo,Eo,bo,Lo,Io,Po,_o,So,Co,$o,xo,Ao,Do,To,Ho,Oo,Mo,No,jo,Ro,Uo,Yo,Wo,Fo,Jo,Xo,qo,Vo,zo,Bo,Ko,Zo,Go,Qo,np,ap,sp,tp,ep,op,pp,cp,ip,rp,lp,up,kp,fp,hp,gp,dp,mp,vp,wp,yp,Ep,bp,Lp,Ip,Pp,_p,Sp,Cp,$p,xp,Ap,Dp,Tp,Hp,Op,Mp,Np,jp,Rp,Up,Yp,Wp,Fp,Jp,Xp,qp,Vp,zp,Bp,Kp,Zp,Gp,Qp,nc,ac,sc,tc,ec,oc,pc,cc,ic,rc,lc,uc,kc,fc,hc,gc,dc,mc,vc,wc,yc,Ec,bc,Lc,Ic,Pc,_c,Sc,Cc,$c,xc,Ac,Dc,Tc,Hc,Oc,Mc,Nc,jc,Rc,Uc,Yc,Wc,Fc,Jc,Xc,qc,Vc,zc,Bc,Kc,Zc,Gc,Qc,ni,ai,si;return Gs=new I({props:{date:"2021-02-14",$$slots:{default:[P]},$$scope:{ctx:n}}}),Po=new I({props:{date:"26-12-2020",$$slots:{default:[_]},$$scope:{ctx:n}}}),yp=new I({props:{date:"22-12-2020",$$slots:{default:[S]},$$scope:{ctx:n}}}),Op=new I({props:{date:"01-01-2021",$$slots:{default:[C]},$$scope:{ctx:n}}}),{c(){a=k("h1"),s=k("a"),t=f("Table of Content"),c=h(),u=k("ul"),L=k("li"),$=k("p"),x=k("a"),A=f("What is LSP and Why?"),D=h(),T=k("li"),H=k("p"),O=k("a"),M=f("Neovim builtin LSP client"),N=h(),j=k("li"),R=k("p"),U=k("a"),Y=f("Configuration"),W=h(),F=k("ul"),J=k("li"),X=k("p"),q=k("a"),V=f("nvim-lspconfig"),z=h(),B=k("li"),K=k("p"),Z=k("a"),G=f("Setup"),Q=h(),nn=k("li"),an=k("p"),sn=k("a"),tn=f("Mappings"),en=h(),on=k("li"),pn=k("p"),cn=k("a"),rn=f("Language-specific config"),ln=h(),un=k("ul"),kn=k("li"),fn=k("a"),hn=f("tsserver"),gn=h(),dn=k("li"),mn=k("a"),vn=f("svelteserver"),wn=h(),yn=k("li"),En=k("a"),bn=f("sumneko_lua"),Ln=h(),In=k("li"),Pn=k("p"),_n=k("a"),Sn=f("Diagnostic"),Cn=h(),$n=k("li"),xn=k("p"),An=k("a"),Dn=f("Linting and Formatting"),Tn=h(),Hn=k("li"),On=k("p"),Mn=k("a"),Nn=f("Diagnostic Conflict"),jn=h(),Rn=k("li"),Un=k("p"),Yn=k("a"),Wn=f("Completion and Snippets"),Fn=h(),Jn=k("li"),Xn=k("p"),qn=k("a"),Vn=f("Closing Note"),zn=h(),Bn=k("h1"),Kn=k("a"),Zn=f("What is LSP and Why?"),Gn=h(),Qn=k("p"),na=f("If you don’t already know what LSP is, well, LSP is a Language Server Protocol and it was created by Microsoft. It’s a better implementation of language support for a text editor. Instead of having to implement it for every language on every text editor, we only need a server for a specific language and a client for a text editor that can speak to the server."),aa=h(),sa=k("p"),ta=f("Imagine the editor as "),ea=k("code"),oa=f("X"),pa=f(" and language feature as "),ca=k("code"),ia=f("Y"),ra=f(", the first solution would take "),la=k("code"),ua=f("X*Y"),ka=f(" to implement because it needs to implements "),fa=k("em"),ha=f("every"),ga=f(" language features for "),da=k("em"),ma=f("every"),va=f(" editor. The second solution which is the LSP way would only take "),wa=k("code"),ya=f("X+Y"),Ea=f(" because it would only take a server for the language and a client that can speak to that server. The server can be used for any text editor that has a client and the client can speak to any LSP server. No more reinventing the wheel, great!"),ba=h(),La=k("p"),Ia=f("Here are some resources that explain LSP "),Pa=k("em"),_a=f("way better"),Sa=f(" and in more detail."),Ca=h(),$a=k("ul"),xa=k("li"),Aa=k("a"),Da=f("LSP guide for VScode"),Ta=h(),Ha=k("li"),Oa=k("a"),Ma=f("Official page for LSP"),Na=h(),ja=k("li"),Ra=k("a"),Ua=f("TJ’s talk about LSP on Vimconf 2020"),Ya=h(),Wa=k("h1"),Fa=k("a"),Ja=f("Neovim builtin LSP client"),Xa=h(),qa=k("p"),Va=f("I use Neovim’s built-in LSP client which only available on the "),za=k("code"),Ba=f("master"),Ka=f(" branch of Neovim at the time of writing this. I was using "),Za=k("a"),Ga=f("coc.nvim"),Qa=f(" but it was slow on my machine because it uses node and it’s a remote plugin which adds some overhead. It still works great nonetheless, it’s just slow on my machine."),ns=h(),as=k("p"),ss=f("The new neovim’s built-in LSP client is written in Lua and Neovim ships with LuaJIT which makes it super fast."),ts=h(),es=k("h1"),os=k("a"),ps=f("Configuration"),cs=h(),is=k("h2"),rs=k("a"),ls=f("nvim-lspconfig"),us=h(),ks=k("p"),fs=f("Neovim has a repo with LSP configuration for a various language called "),hs=k("a"),gs=f("nvim-lspconfig"),ds=f(", this is "),ms=k("em"),vs=f("NOT"),ws=f(" where the LSP client lives, the client already ships with Neovim. It’s just a repo that holds the configuration for the client."),ys=h(),Es=k("p"),bs=f("I have this piece of code on my config to install it. I use "),Ls=k("a"),Is=f("packer.nvim"),Ps=h(),_s=k("pre"),Ss=h(),Cs=k("h2"),$s=k("a"),xs=f("Setup"),As=h(),Ds=k("p"),Ts=f("I have a directory filled with LSP related config. Here’s some snippet that sets up the LSP."),Hs=h(),Os=k("pre"),Ms=h(),Ns=k("p"),js=f("I made a "),Rs=k("code"),Us=f("custom_on_attach"),Ys=f(" function to attach LSP specific mappings. I also made a custom "),Ws=k("code"),Fs=f("on_init"),Js=f(" function to notify me when the LSP is started and enable "),Xs=k("code"),qs=f("incremental_sync"),Vs=f(". Though, I’m not sure if "),zs=k("code"),Bs=f("on_init"),Ks=f(" is the correct thing that I’m looking for. Sometimes it notifies me when the LSP server hasn’t even started yet :p"),Zs=h(),e(Gs.$$.fragment),Qs=h(),nt=k("p"),at=f("You can find the full content of this file "),st=k("a"),tt=f("here"),et=h(),ot=k("h2"),pt=k("a"),ct=f("Mappings"),it=h(),rt=k("p"),lt=f("Here are some of my LSP related mappings which you can find in the file "),ut=k("a"),kt=f("here"),ft=h(),ht=k("pre"),gt=h(),dt=k("h2"),mt=k("a"),vt=f("Language-specific config"),wt=h(),yt=k("p"),Et=f("I have most of my LSP config to be default but I gave several LSP an option like "),bt=k("code"),Lt=f("tsserver"),It=f(", "),Pt=k("code"),_t=f("svelteserver"),St=f(", or "),Ct=k("code"),$t=f("sumneko_lua"),xt=f("."),At=h(),Dt=k("h3"),Tt=k("a"),Ht=f("tsserver"),Ot=h(),Mt=k("p"),Nt=f("I have my "),jt=k("code"),Rt=f("tsserver"),Ut=f(" to be started on every JS/TS file regardless of its directory. The default config will only start when it found "),Yt=k("code"),Wt=f("package.json"),Ft=f(" or "),Jt=k("code"),Xt=f(".git"),qt=f("."),Vt=h(),zt=k("pre"),Bt=h(),Kt=k("h3"),Zt=k("a"),Gt=f("svelteserver"),Qt=h(),ne=k("p"),ae=f("I disabled its HTML emmet suggestion and removed "),se=k("code"),te=f(">"),ee=f(" and "),oe=k("code"),pe=f("<"),ce=f(" from "),ie=k("code"),re=f("triggerCharacters"),le=f(". They’re so annoying to me."),ue=h(),ke=k("pre"),fe=h(),he=k("h3"),ge=k("a"),de=f("sumneko_lua"),me=h(),ve=k("p"),we=f("[lua-language-server][lua-ls] is a bit different because I compiled it from source so it needs some extra setup."),ye=h(),Ee=k("pre"),be=h(),Le=k("h2"),Ie=k("a"),Pe=f("Diagnostic"),_e=h(),Se=k("p"),Ce=f("I was using "),$e=k("a"),xe=f("diagnostic-nvim"),Ae=f(" before "),De=k("a"),Te=f("this big PR"),He=f(" got merged which makes diagnostic-nvim redundant. Here’s some of my diagnostic config."),Oe=h(),Me=k("pre"),Ne=h(),je=k("p"),Re=f("I set the prefix for "),Ue=k("code"),Ye=f("virtual_text"),We=f(" to be "),Fe=k("code"),Je=f("»"),Xe=f(" because I don’t really like the default one and enabled "),qe=k("code"),Ve=f("signs"),ze=f(" for the diagnostic hint. I also made it to only update the diagnostic when I switch between insert mode and normal mode because it’s quite annoying when I haven’t finished typing and get yelled at by LSP because it expects me to put "),Be=k("code"),Ke=f("="),Ze=f(" after a variable name that I haven’t even finished typing yet."),Ge=h(),Qe=k("h2"),no=k("a"),ao=f("Linting and Formatting"),so=h(),to=k("p"),eo=f("I recently started using "),oo=k("a"),po=f("efm-langserver"),co=f(" to run "),io=k("a"),ro=f("eslint"),lo=f(" and formatting like "),uo=k("a"),ko=f("prettier"),fo=f(", "),ho=k("a"),go=f("gofmt"),mo=f(" , "),vo=k("a"),wo=f("stylua"),yo=f(", and "),Eo=k("a"),bo=f("rustfmt"),Lo=f("."),Io=h(),e(Po.$$.fragment),_o=h(),So=k("p"),Co=f("It was kinda hard to setup but it was well worth it. The formatter is "),$o=k("em"),xo=f("fast"),Ao=f(" and I got nice linting from external linters like ESLint. Here’s some of my config for efm-langserver."),Do=h(),To=k("pre"),Ho=h(),Oo=k("p"),Mo=f("I disabled the capability for rename and hover on efm-langserver because the server doesn’t support that and I don’t want to have any conflict with the other server that’s running."),No=h(),jo=k("p"),Ro=f("My prettier is a table with a key of "),Uo=k("code"),Yo=f("formatCommand"),Wo=f(" with its value as a function to check if "),Fo=k("code"),Jo=f(".prettierrc"),Xo=f(" is present on current directory and fallback to my global "),qo=k("code"),Vo=f(".prettierrc"),zo=f(" if it doesn’t have a local "),Bo=k("code"),Ko=f(".prettierrc"),Zo=f("."),Go=h(),Qo=k("pre"),np=h(),ap=k("p"),sp=f("The ESlint config is pretty simple, it looks like this."),tp=h(),ep=k("pre"),op=h(),pp=k("p"),cp=f("I need to explicitly specify the "),ip=k("code"),rp=f("lintFormats"),lp=f(", otherwise it shows the wrong message and it’s really annoying."),up=h(),kp=k("p"),fp=f("You can get my full config for "),hp=k("code"),gp=f("efm-langserver"),dp=h(),mp=k("a"),vp=f("here"),wp=h(),e(yp.$$.fragment),Ep=h(),bp=k("h2"),Lp=k("a"),Ip=f("Diagnostic Conflict"),Pp=h(),_p=k("p"),Sp=f("When I use efm-langserver, the diagnostic that comes from the LSP (like "),Cp=k("code"),$p=f("tsserver"),xp=f(") and external linter that efm-langserver uses are conflicting. So, I made a custom function for it to check if there’s a file like "),Ap=k("code"),Dp=f(".eslintrc.js"),Tp=f(", it will turn off the diagnostic that comes from LSP and use ESlint instead."),Hp=h(),e(Op.$$.fragment),Mp=h(),Np=k("pre"),jp=h(),Rp=k("p"),Up=f("I’ve overridden the "),Yp=k("code"),Wp=f('vim.lsp.handlers["textDocument/publishDiagnostics"]'),Fp=f(" anyway so reusing it would also works and it looks way cleaner."),Jp=h(),Xp=k("h2"),qp=k("a"),Vp=f("Completion and Snippets"),zp=h(),Bp=k("p"),Kp=f("I use a completion and snippet plugin to make my life easier. For completion, I use "),Zp=k("a"),Gp=f("nvim-compe"),Qp=f(", previously I was using "),nc=k("a"),ac=f("completion-nvim"),sc=f(" but I had some issues with it such as path completion sometimes not showing up and flickering."),tc=h(),ec=k("p"),oc=f("Snippet wise, I use "),pc=k("a"),cc=f("vim-vsnip"),ic=f(". I was going to use "),rc=k("a"),lc=f("snippets.nvim"),uc=f(" but it doesn’t integrate well enough with LSP’s snippet."),kc=h(),fc=k("p"),hc=f("Here’s some of my "),gc=k("code"),dc=f("nvim-compe"),mc=f(" config"),vc=h(),wc=k("pre"),yc=h(),Ec=k("p"),bc=f("You can get the full config for my completion setup "),Lc=k("a"),Ic=f("here"),Pc=h(),_c=k("h1"),Sc=k("a"),Cc=f("Closing Note"),$c=h(),xc=k("p"),Ac=f("I’m pretty pleased with my current setup. Kudos to Neovim’s developer that brings LSP client to be a built-in feature! These are of course some other great LSP client alternatives for (Neo)vim, definitely check them out!"),Dc=h(),Tc=k("ul"),Hc=k("li"),Oc=k("a"),Mc=f("coc.nvim"),Nc=f(" (highly recommend this if you’re just getting started)"),jc=h(),Rc=k("li"),Uc=k("a"),Yc=f("LanguageClient-neovim"),Wc=h(),Fc=k("li"),Jc=k("a"),Xc=f("vim-lsp"),qc=h(),Vc=k("li"),zc=k("a"),Bc=f("ALE"),Kc=h(),Zc=k("p"),Gc=f("Here’s my "),Qc=k("a"),ni=f("whole LSP config"),ai=f(" if you want them. If you’ve read this far then thank you and have a wonderful day :)"),this.h()},l(n){a=g(n,"H1",{id:!0});var e=d(a);s=g(e,"A",{href:!0});var p=d(s);t=m(p,"Table of Content"),p.forEach(v),e.forEach(v),c=w(n),u=g(n,"UL",{});var i=d(u);L=g(i,"LI",{});var r=d(L);$=g(r,"P",{});var l=d($);x=g(l,"A",{href:!0});var k=d(x);A=m(k,"What is LSP and Why?"),k.forEach(v),l.forEach(v),r.forEach(v),D=w(i),T=g(i,"LI",{});var f=d(T);H=g(f,"P",{});var h=d(H);O=g(h,"A",{href:!0});var y=d(O);M=m(y,"Neovim builtin LSP client"),y.forEach(v),h.forEach(v),f.forEach(v),N=w(i),j=g(i,"LI",{});var E=d(j);R=g(E,"P",{});var b=d(R);U=g(b,"A",{href:!0});var I=d(U);Y=m(I,"Configuration"),I.forEach(v),b.forEach(v),W=w(E),F=g(E,"UL",{});var P=d(F);J=g(P,"LI",{});var _=d(J);X=g(_,"P",{});var S=d(X);q=g(S,"A",{href:!0});var C=d(q);V=m(C,"nvim-lspconfig"),C.forEach(v),S.forEach(v),_.forEach(v),z=w(P),B=g(P,"LI",{});var si=d(B);K=g(si,"P",{});var ti=d(K);Z=g(ti,"A",{href:!0});var ei=d(Z);G=m(ei,"Setup"),ei.forEach(v),ti.forEach(v),si.forEach(v),Q=w(P),nn=g(P,"LI",{});var oi=d(nn);an=g(oi,"P",{});var pi=d(an);sn=g(pi,"A",{href:!0});var ci=d(sn);tn=m(ci,"Mappings"),ci.forEach(v),pi.forEach(v),oi.forEach(v),en=w(P),on=g(P,"LI",{});var ii=d(on);pn=g(ii,"P",{});var ri=d(pn);cn=g(ri,"A",{href:!0});var li=d(cn);rn=m(li,"Language-specific config"),li.forEach(v),ri.forEach(v),ln=w(ii),un=g(ii,"UL",{});var ui=d(un);kn=g(ui,"LI",{});var ki=d(kn);fn=g(ki,"A",{href:!0});var fi=d(fn);hn=m(fi,"tsserver"),fi.forEach(v),ki.forEach(v),gn=w(ui),dn=g(ui,"LI",{});var hi=d(dn);mn=g(hi,"A",{href:!0});var gi=d(mn);vn=m(gi,"svelteserver"),gi.forEach(v),hi.forEach(v),wn=w(ui),yn=g(ui,"LI",{});var di=d(yn);En=g(di,"A",{href:!0});var mi=d(En);bn=m(mi,"sumneko_lua"),mi.forEach(v),di.forEach(v),ui.forEach(v),ii.forEach(v),Ln=w(P),In=g(P,"LI",{});var vi=d(In);Pn=g(vi,"P",{});var wi=d(Pn);_n=g(wi,"A",{href:!0});var yi=d(_n);Sn=m(yi,"Diagnostic"),yi.forEach(v),wi.forEach(v),vi.forEach(v),Cn=w(P),$n=g(P,"LI",{});var Ei=d($n);xn=g(Ei,"P",{});var bi=d(xn);An=g(bi,"A",{href:!0});var Li=d(An);Dn=m(Li,"Linting and Formatting"),Li.forEach(v),bi.forEach(v),Ei.forEach(v),Tn=w(P),Hn=g(P,"LI",{});var Ii=d(Hn);On=g(Ii,"P",{});var Pi=d(On);Mn=g(Pi,"A",{href:!0});var _i=d(Mn);Nn=m(_i,"Diagnostic Conflict"),_i.forEach(v),Pi.forEach(v),Ii.forEach(v),jn=w(P),Rn=g(P,"LI",{});var Si=d(Rn);Un=g(Si,"P",{});var Ci=d(Un);Yn=g(Ci,"A",{href:!0});var $i=d(Yn);Wn=m($i,"Completion and Snippets"),$i.forEach(v),Ci.forEach(v),Si.forEach(v),P.forEach(v),E.forEach(v),Fn=w(i),Jn=g(i,"LI",{});var xi=d(Jn);Xn=g(xi,"P",{});var Ai=d(Xn);qn=g(Ai,"A",{href:!0});var Di=d(qn);Vn=m(Di,"Closing Note"),Di.forEach(v),Ai.forEach(v),xi.forEach(v),i.forEach(v),zn=w(n),Bn=g(n,"H1",{id:!0});var Ti=d(Bn);Kn=g(Ti,"A",{href:!0});var Hi=d(Kn);Zn=m(Hi,"What is LSP and Why?"),Hi.forEach(v),Ti.forEach(v),Gn=w(n),Qn=g(n,"P",{});var Oi=d(Qn);na=m(Oi,"If you don’t already know what LSP is, well, LSP is a Language Server Protocol and it was created by Microsoft. It’s a better implementation of language support for a text editor. Instead of having to implement it for every language on every text editor, we only need a server for a specific language and a client for a text editor that can speak to the server."),Oi.forEach(v),aa=w(n),sa=g(n,"P",{});var Mi=d(sa);ta=m(Mi,"Imagine the editor as "),ea=g(Mi,"CODE",{});var Ni=d(ea);oa=m(Ni,"X"),Ni.forEach(v),pa=m(Mi," and language feature as "),ca=g(Mi,"CODE",{});var ji=d(ca);ia=m(ji,"Y"),ji.forEach(v),ra=m(Mi,", the first solution would take "),la=g(Mi,"CODE",{});var Ri=d(la);ua=m(Ri,"X*Y"),Ri.forEach(v),ka=m(Mi," to implement because it needs to implements "),fa=g(Mi,"EM",{});var Ui=d(fa);ha=m(Ui,"every"),Ui.forEach(v),ga=m(Mi," language features for "),da=g(Mi,"EM",{});var Yi=d(da);ma=m(Yi,"every"),Yi.forEach(v),va=m(Mi," editor. The second solution which is the LSP way would only take "),wa=g(Mi,"CODE",{});var Wi=d(wa);ya=m(Wi,"X+Y"),Wi.forEach(v),Ea=m(Mi," because it would only take a server for the language and a client that can speak to that server. The server can be used for any text editor that has a client and the client can speak to any LSP server. No more reinventing the wheel, great!"),Mi.forEach(v),ba=w(n),La=g(n,"P",{});var Fi=d(La);Ia=m(Fi,"Here are some resources that explain LSP "),Pa=g(Fi,"EM",{});var Ji=d(Pa);_a=m(Ji,"way better"),Ji.forEach(v),Sa=m(Fi," and in more detail."),Fi.forEach(v),Ca=w(n),$a=g(n,"UL",{});var Xi=d($a);xa=g(Xi,"LI",{});var qi=d(xa);Aa=g(qi,"A",{href:!0,rel:!0});var Vi=d(Aa);Da=m(Vi,"LSP guide for VScode"),Vi.forEach(v),qi.forEach(v),Ta=w(Xi),Ha=g(Xi,"LI",{});var zi=d(Ha);Oa=g(zi,"A",{href:!0,rel:!0});var Bi=d(Oa);Ma=m(Bi,"Official page for LSP"),Bi.forEach(v),zi.forEach(v),Na=w(Xi),ja=g(Xi,"LI",{});var Ki=d(ja);Ra=g(Ki,"A",{href:!0,rel:!0});var Zi=d(Ra);Ua=m(Zi,"TJ’s talk about LSP on Vimconf 2020"),Zi.forEach(v),Ki.forEach(v),Xi.forEach(v),Ya=w(n),Wa=g(n,"H1",{id:!0});var Gi=d(Wa);Fa=g(Gi,"A",{href:!0});var Qi=d(Fa);Ja=m(Qi,"Neovim builtin LSP client"),Qi.forEach(v),Gi.forEach(v),Xa=w(n),qa=g(n,"P",{});var nr=d(qa);Va=m(nr,"I use Neovim’s built-in LSP client which only available on the "),za=g(nr,"CODE",{});var ar=d(za);Ba=m(ar,"master"),ar.forEach(v),Ka=m(nr," branch of Neovim at the time of writing this. I was using "),Za=g(nr,"A",{href:!0,rel:!0});var sr=d(Za);Ga=m(sr,"coc.nvim"),sr.forEach(v),Qa=m(nr," but it was slow on my machine because it uses node and it’s a remote plugin which adds some overhead. It still works great nonetheless, it’s just slow on my machine."),nr.forEach(v),ns=w(n),as=g(n,"P",{});var tr=d(as);ss=m(tr,"The new neovim’s built-in LSP client is written in Lua and Neovim ships with LuaJIT which makes it super fast."),tr.forEach(v),ts=w(n),es=g(n,"H1",{id:!0});var er=d(es);os=g(er,"A",{href:!0});var or=d(os);ps=m(or,"Configuration"),or.forEach(v),er.forEach(v),cs=w(n),is=g(n,"H2",{id:!0});var pr=d(is);rs=g(pr,"A",{href:!0});var cr=d(rs);ls=m(cr,"nvim-lspconfig"),cr.forEach(v),pr.forEach(v),us=w(n),ks=g(n,"P",{});var ir=d(ks);fs=m(ir,"Neovim has a repo with LSP configuration for a various language called "),hs=g(ir,"A",{href:!0,rel:!0});var rr=d(hs);gs=m(rr,"nvim-lspconfig"),rr.forEach(v),ds=m(ir,", this is "),ms=g(ir,"EM",{});var lr=d(ms);vs=m(lr,"NOT"),lr.forEach(v),ws=m(ir," where the LSP client lives, the client already ships with Neovim. It’s just a repo that holds the configuration for the client."),ir.forEach(v),ys=w(n),Es=g(n,"P",{});var ur=d(Es);bs=m(ur,"I have this piece of code on my config to install it. I use "),Ls=g(ur,"A",{href:!0,rel:!0});var kr=d(Ls);Is=m(kr,"packer.nvim"),kr.forEach(v),ur.forEach(v),Ps=w(n),_s=g(n,"PRE",{class:!0}),d(_s).forEach(v),Ss=w(n),Cs=g(n,"H2",{id:!0});var fr=d(Cs);$s=g(fr,"A",{href:!0});var hr=d($s);xs=m(hr,"Setup"),hr.forEach(v),fr.forEach(v),As=w(n),Ds=g(n,"P",{});var gr=d(Ds);Ts=m(gr,"I have a directory filled with LSP related config. Here’s some snippet that sets up the LSP."),gr.forEach(v),Hs=w(n),Os=g(n,"PRE",{class:!0}),d(Os).forEach(v),Ms=w(n),Ns=g(n,"P",{});var dr=d(Ns);js=m(dr,"I made a "),Rs=g(dr,"CODE",{});var mr=d(Rs);Us=m(mr,"custom_on_attach"),mr.forEach(v),Ys=m(dr," function to attach LSP specific mappings. I also made a custom "),Ws=g(dr,"CODE",{});var vr=d(Ws);Fs=m(vr,"on_init"),vr.forEach(v),Js=m(dr," function to notify me when the LSP is started and enable "),Xs=g(dr,"CODE",{});var wr=d(Xs);qs=m(wr,"incremental_sync"),wr.forEach(v),Vs=m(dr,". Though, I’m not sure if "),zs=g(dr,"CODE",{});var yr=d(zs);Bs=m(yr,"on_init"),yr.forEach(v),Ks=m(dr," is the correct thing that I’m looking for. Sometimes it notifies me when the LSP server hasn’t even started yet :p"),dr.forEach(v),Zs=w(n),o(Gs.$$.fragment,n),Qs=w(n),nt=g(n,"P",{});var Er=d(nt);at=m(Er,"You can find the full content of this file "),st=g(Er,"A",{href:!0,rel:!0});var br=d(st);tt=m(br,"here"),br.forEach(v),Er.forEach(v),et=w(n),ot=g(n,"H2",{id:!0});var Lr=d(ot);pt=g(Lr,"A",{href:!0});var Ir=d(pt);ct=m(Ir,"Mappings"),Ir.forEach(v),Lr.forEach(v),it=w(n),rt=g(n,"P",{});var Pr=d(rt);lt=m(Pr,"Here are some of my LSP related mappings which you can find in the file "),ut=g(Pr,"A",{href:!0,rel:!0});var _r=d(ut);kt=m(_r,"here"),_r.forEach(v),Pr.forEach(v),ft=w(n),ht=g(n,"PRE",{class:!0}),d(ht).forEach(v),gt=w(n),dt=g(n,"H2",{id:!0});var Sr=d(dt);mt=g(Sr,"A",{href:!0});var Cr=d(mt);vt=m(Cr,"Language-specific config"),Cr.forEach(v),Sr.forEach(v),wt=w(n),yt=g(n,"P",{});var $r=d(yt);Et=m($r,"I have most of my LSP config to be default but I gave several LSP an option like "),bt=g($r,"CODE",{});var xr=d(bt);Lt=m(xr,"tsserver"),xr.forEach(v),It=m($r,", "),Pt=g($r,"CODE",{});var Ar=d(Pt);_t=m(Ar,"svelteserver"),Ar.forEach(v),St=m($r,", or "),Ct=g($r,"CODE",{});var Dr=d(Ct);$t=m(Dr,"sumneko_lua"),Dr.forEach(v),xt=m($r,"."),$r.forEach(v),At=w(n),Dt=g(n,"H3",{id:!0});var Tr=d(Dt);Tt=g(Tr,"A",{href:!0});var Hr=d(Tt);Ht=m(Hr,"tsserver"),Hr.forEach(v),Tr.forEach(v),Ot=w(n),Mt=g(n,"P",{});var Or=d(Mt);Nt=m(Or,"I have my "),jt=g(Or,"CODE",{});var Mr=d(jt);Rt=m(Mr,"tsserver"),Mr.forEach(v),Ut=m(Or," to be started on every JS/TS file regardless of its directory. The default config will only start when it found "),Yt=g(Or,"CODE",{});var Nr=d(Yt);Wt=m(Nr,"package.json"),Nr.forEach(v),Ft=m(Or," or "),Jt=g(Or,"CODE",{});var jr=d(Jt);Xt=m(jr,".git"),jr.forEach(v),qt=m(Or,"."),Or.forEach(v),Vt=w(n),zt=g(n,"PRE",{class:!0}),d(zt).forEach(v),Bt=w(n),Kt=g(n,"H3",{id:!0});var Rr=d(Kt);Zt=g(Rr,"A",{href:!0});var Ur=d(Zt);Gt=m(Ur,"svelteserver"),Ur.forEach(v),Rr.forEach(v),Qt=w(n),ne=g(n,"P",{});var Yr=d(ne);ae=m(Yr,"I disabled its HTML emmet suggestion and removed "),se=g(Yr,"CODE",{});var Wr=d(se);te=m(Wr,">"),Wr.forEach(v),ee=m(Yr," and "),oe=g(Yr,"CODE",{});var Fr=d(oe);pe=m(Fr,"<"),Fr.forEach(v),ce=m(Yr," from "),ie=g(Yr,"CODE",{});var Jr=d(ie);re=m(Jr,"triggerCharacters"),Jr.forEach(v),le=m(Yr,". They’re so annoying to me."),Yr.forEach(v),ue=w(n),ke=g(n,"PRE",{class:!0}),d(ke).forEach(v),fe=w(n),he=g(n,"H3",{id:!0});var Xr=d(he);ge=g(Xr,"A",{href:!0});var qr=d(ge);de=m(qr,"sumneko_lua"),qr.forEach(v),Xr.forEach(v),me=w(n),ve=g(n,"P",{});var Vr=d(ve);we=m(Vr,"[lua-language-server][lua-ls] is a bit different because I compiled it from source so it needs some extra setup."),Vr.forEach(v),ye=w(n),Ee=g(n,"PRE",{class:!0}),d(Ee).forEach(v),be=w(n),Le=g(n,"H2",{id:!0});var zr=d(Le);Ie=g(zr,"A",{href:!0});var Br=d(Ie);Pe=m(Br,"Diagnostic"),Br.forEach(v),zr.forEach(v),_e=w(n),Se=g(n,"P",{});var Kr=d(Se);Ce=m(Kr,"I was using "),$e=g(Kr,"A",{href:!0,rel:!0});var Zr=d($e);xe=m(Zr,"diagnostic-nvim"),Zr.forEach(v),Ae=m(Kr," before "),De=g(Kr,"A",{href:!0,rel:!0});var Gr=d(De);Te=m(Gr,"this big PR"),Gr.forEach(v),He=m(Kr," got merged which makes diagnostic-nvim redundant. Here’s some of my diagnostic config."),Kr.forEach(v),Oe=w(n),Me=g(n,"PRE",{class:!0}),d(Me).forEach(v),Ne=w(n),je=g(n,"P",{});var Qr=d(je);Re=m(Qr,"I set the prefix for "),Ue=g(Qr,"CODE",{});var nl=d(Ue);Ye=m(nl,"virtual_text"),nl.forEach(v),We=m(Qr," to be "),Fe=g(Qr,"CODE",{});var al=d(Fe);Je=m(al,"»"),al.forEach(v),Xe=m(Qr," because I don’t really like the default one and enabled "),qe=g(Qr,"CODE",{});var sl=d(qe);Ve=m(sl,"signs"),sl.forEach(v),ze=m(Qr," for the diagnostic hint. I also made it to only update the diagnostic when I switch between insert mode and normal mode because it’s quite annoying when I haven’t finished typing and get yelled at by LSP because it expects me to put "),Be=g(Qr,"CODE",{});var tl=d(Be);Ke=m(tl,"="),tl.forEach(v),Ze=m(Qr," after a variable name that I haven’t even finished typing yet."),Qr.forEach(v),Ge=w(n),Qe=g(n,"H2",{id:!0});var el=d(Qe);no=g(el,"A",{href:!0});var ol=d(no);ao=m(ol,"Linting and Formatting"),ol.forEach(v),el.forEach(v),so=w(n),to=g(n,"P",{});var pl=d(to);eo=m(pl,"I recently started using "),oo=g(pl,"A",{href:!0,rel:!0});var cl=d(oo);po=m(cl,"efm-langserver"),cl.forEach(v),co=m(pl," to run "),io=g(pl,"A",{href:!0,rel:!0});var il=d(io);ro=m(il,"eslint"),il.forEach(v),lo=m(pl," and formatting like "),uo=g(pl,"A",{href:!0,rel:!0});var rl=d(uo);ko=m(rl,"prettier"),rl.forEach(v),fo=m(pl,", "),ho=g(pl,"A",{href:!0,rel:!0});var ll=d(ho);go=m(ll,"gofmt"),ll.forEach(v),mo=m(pl," , "),vo=g(pl,"A",{href:!0,rel:!0});var ul=d(vo);wo=m(ul,"stylua"),ul.forEach(v),yo=m(pl,", and "),Eo=g(pl,"A",{href:!0,rel:!0});var kl=d(Eo);bo=m(kl,"rustfmt"),kl.forEach(v),Lo=m(pl,"."),pl.forEach(v),Io=w(n),o(Po.$$.fragment,n),_o=w(n),So=g(n,"P",{});var fl=d(So);Co=m(fl,"It was kinda hard to setup but it was well worth it. The formatter is "),$o=g(fl,"EM",{});var hl=d($o);xo=m(hl,"fast"),hl.forEach(v),Ao=m(fl," and I got nice linting from external linters like ESLint. Here’s some of my config for efm-langserver."),fl.forEach(v),Do=w(n),To=g(n,"PRE",{class:!0}),d(To).forEach(v),Ho=w(n),Oo=g(n,"P",{});var gl=d(Oo);Mo=m(gl,"I disabled the capability for rename and hover on efm-langserver because the server doesn’t support that and I don’t want to have any conflict with the other server that’s running."),gl.forEach(v),No=w(n),jo=g(n,"P",{});var dl=d(jo);Ro=m(dl,"My prettier is a table with a key of "),Uo=g(dl,"CODE",{});var ml=d(Uo);Yo=m(ml,"formatCommand"),ml.forEach(v),Wo=m(dl," with its value as a function to check if "),Fo=g(dl,"CODE",{});var vl=d(Fo);Jo=m(vl,".prettierrc"),vl.forEach(v),Xo=m(dl," is present on current directory and fallback to my global "),qo=g(dl,"CODE",{});var wl=d(qo);Vo=m(wl,".prettierrc"),wl.forEach(v),zo=m(dl," if it doesn’t have a local "),Bo=g(dl,"CODE",{});var yl=d(Bo);Ko=m(yl,".prettierrc"),yl.forEach(v),Zo=m(dl,"."),dl.forEach(v),Go=w(n),Qo=g(n,"PRE",{class:!0}),d(Qo).forEach(v),np=w(n),ap=g(n,"P",{});var El=d(ap);sp=m(El,"The ESlint config is pretty simple, it looks like this."),El.forEach(v),tp=w(n),ep=g(n,"PRE",{class:!0}),d(ep).forEach(v),op=w(n),pp=g(n,"P",{});var bl=d(pp);cp=m(bl,"I need to explicitly specify the "),ip=g(bl,"CODE",{});var Ll=d(ip);rp=m(Ll,"lintFormats"),Ll.forEach(v),lp=m(bl,", otherwise it shows the wrong message and it’s really annoying."),bl.forEach(v),up=w(n),kp=g(n,"P",{});var Il=d(kp);fp=m(Il,"You can get my full config for "),hp=g(Il,"CODE",{});var Pl=d(hp);gp=m(Pl,"efm-langserver"),Pl.forEach(v),dp=w(Il),mp=g(Il,"A",{href:!0,rel:!0});var _l=d(mp);vp=m(_l,"here"),_l.forEach(v),Il.forEach(v),wp=w(n),o(yp.$$.fragment,n),Ep=w(n),bp=g(n,"H2",{id:!0});var Sl=d(bp);Lp=g(Sl,"A",{href:!0});var Cl=d(Lp);Ip=m(Cl,"Diagnostic Conflict"),Cl.forEach(v),Sl.forEach(v),Pp=w(n),_p=g(n,"P",{});var $l=d(_p);Sp=m($l,"When I use efm-langserver, the diagnostic that comes from the LSP (like "),Cp=g($l,"CODE",{});var xl=d(Cp);$p=m(xl,"tsserver"),xl.forEach(v),xp=m($l,") and external linter that efm-langserver uses are conflicting. So, I made a custom function for it to check if there’s a file like "),Ap=g($l,"CODE",{});var Al=d(Ap);Dp=m(Al,".eslintrc.js"),Al.forEach(v),Tp=m($l,", it will turn off the diagnostic that comes from LSP and use ESlint instead."),$l.forEach(v),Hp=w(n),o(Op.$$.fragment,n),Mp=w(n),Np=g(n,"PRE",{class:!0}),d(Np).forEach(v),jp=w(n),Rp=g(n,"P",{});var Dl=d(Rp);Up=m(Dl,"I’ve overridden the "),Yp=g(Dl,"CODE",{});var Tl=d(Yp);Wp=m(Tl,'vim.lsp.handlers["textDocument/publishDiagnostics"]'),Tl.forEach(v),Fp=m(Dl," anyway so reusing it would also works and it looks way cleaner."),Dl.forEach(v),Jp=w(n),Xp=g(n,"H2",{id:!0});var Hl=d(Xp);qp=g(Hl,"A",{href:!0});var Ol=d(qp);Vp=m(Ol,"Completion and Snippets"),Ol.forEach(v),Hl.forEach(v),zp=w(n),Bp=g(n,"P",{});var Ml=d(Bp);Kp=m(Ml,"I use a completion and snippet plugin to make my life easier. For completion, I use "),Zp=g(Ml,"A",{href:!0,rel:!0});var Nl=d(Zp);Gp=m(Nl,"nvim-compe"),Nl.forEach(v),Qp=m(Ml,", previously I was using "),nc=g(Ml,"A",{href:!0,rel:!0});var jl=d(nc);ac=m(jl,"completion-nvim"),jl.forEach(v),sc=m(Ml," but I had some issues with it such as path completion sometimes not showing up and flickering."),Ml.forEach(v),tc=w(n),ec=g(n,"P",{});var Rl=d(ec);oc=m(Rl,"Snippet wise, I use "),pc=g(Rl,"A",{href:!0,rel:!0});var Ul=d(pc);cc=m(Ul,"vim-vsnip"),Ul.forEach(v),ic=m(Rl,". I was going to use "),rc=g(Rl,"A",{href:!0,rel:!0});var Yl=d(rc);lc=m(Yl,"snippets.nvim"),Yl.forEach(v),uc=m(Rl," but it doesn’t integrate well enough with LSP’s snippet."),Rl.forEach(v),kc=w(n),fc=g(n,"P",{});var Wl=d(fc);hc=m(Wl,"Here’s some of my "),gc=g(Wl,"CODE",{});var Fl=d(gc);dc=m(Fl,"nvim-compe"),Fl.forEach(v),mc=m(Wl," config"),Wl.forEach(v),vc=w(n),wc=g(n,"PRE",{class:!0}),d(wc).forEach(v),yc=w(n),Ec=g(n,"P",{});var Jl=d(Ec);bc=m(Jl,"You can get the full config for my completion setup "),Lc=g(Jl,"A",{href:!0,rel:!0});var Xl=d(Lc);Ic=m(Xl,"here"),Xl.forEach(v),Jl.forEach(v),Pc=w(n),_c=g(n,"H1",{id:!0});var ql=d(_c);Sc=g(ql,"A",{href:!0});var Vl=d(Sc);Cc=m(Vl,"Closing Note"),Vl.forEach(v),ql.forEach(v),$c=w(n),xc=g(n,"P",{});var zl=d(xc);Ac=m(zl,"I’m pretty pleased with my current setup. Kudos to Neovim’s developer that brings LSP client to be a built-in feature! These are of course some other great LSP client alternatives for (Neo)vim, definitely check them out!"),zl.forEach(v),Dc=w(n),Tc=g(n,"UL",{});var Bl=d(Tc);Hc=g(Bl,"LI",{});var Kl=d(Hc);Oc=g(Kl,"A",{href:!0,rel:!0});var Zl=d(Oc);Mc=m(Zl,"coc.nvim"),Zl.forEach(v),Nc=m(Kl," (highly recommend this if you’re just getting started)"),Kl.forEach(v),jc=w(Bl),Rc=g(Bl,"LI",{});var Gl=d(Rc);Uc=g(Gl,"A",{href:!0,rel:!0});var Ql=d(Uc);Yc=m(Ql,"LanguageClient-neovim"),Ql.forEach(v),Gl.forEach(v),Wc=w(Bl),Fc=g(Bl,"LI",{});var nu=d(Fc);Jc=g(nu,"A",{href:!0,rel:!0});var au=d(Jc);Xc=m(au,"vim-lsp"),au.forEach(v),nu.forEach(v),qc=w(Bl),Vc=g(Bl,"LI",{});var su=d(Vc);zc=g(su,"A",{href:!0,rel:!0});var tu=d(zc);Bc=m(tu,"ALE"),tu.forEach(v),su.forEach(v),Bl.forEach(v),Kc=w(n),Zc=g(n,"P",{});var eu=d(Zc);Gc=m(eu,"Here’s my "),Qc=g(eu,"A",{href:!0,rel:!0});var ou=d(Qc);ni=m(ou,"whole LSP config"),ou.forEach(v),ai=m(eu," if you want them. If you’ve read this far then thank you and have a wonderful day :)"),eu.forEach(v),this.h()},h(){y(s,"href","#table-of-content"),y(a,"id","table-of-content"),y(x,"href","#what-is-lsp-and-why"),y(O,"href","#neovim-builtin-lsp-client"),y(U,"href","#configuration"),y(q,"href","#nvim-lspconfig"),y(Z,"href","#setup"),y(sn,"href","#mappings"),y(cn,"href","#language-specific-config"),y(fn,"href","#tsserver"),y(mn,"href","#svelteserver"),y(En,"href","#sumneko_lua"),y(_n,"href","#diagnostic"),y(An,"href","#linting-and-formatting"),y(Mn,"href","#diagnostic-conflict"),y(Yn,"href","#completion-and-snippets"),y(qn,"href","#closing-note"),y(Kn,"href","#what-is-lsp-and-why"),y(Bn,"id","what-is-lsp-and-why"),y(Aa,"href","https://code.visualstudio.com/api/language-extensions/language-server-extension-guide"),y(Aa,"rel","nofollow"),y(Oa,"href","https://microsoft.github.io/language-server-protocol/"),y(Oa,"rel","nofollow"),y(Ra,"href","https://www.youtube.com/watch?v=C9X5VF9ASac"),y(Ra,"rel","nofollow"),y(Fa,"href","#neovim-builtin-lsp-client"),y(Wa,"id","neovim-builtin-lsp-client"),y(Za,"href","https://github.com/neoclide/coc.nvim"),y(Za,"rel","nofollow"),y(os,"href","#configuration"),y(es,"id","configuration"),y(rs,"href","#nvim-lspconfig"),y(is,"id","nvim-lspconfig"),y(hs,"href","https://github.com/neovim/nvim-lspconfig"),y(hs,"rel","nofollow"),y(Ls,"href","https://github.com/wbthomason/packer.nvim"),y(Ls,"rel","nofollow"),y(_s,"class","language-lua"),y($s,"href","#setup"),y(Cs,"id","setup"),y(Os,"class","language-lua"),y(st,"href","https://github.com/elianiva/dotfiles/blob/235c54445268f5838ac4a03669fde4d0a4738fea/nvim/.config/nvim/lua/modules/lsp/init.lua"),y(st,"rel","nofollow"),y(pt,"href","#mappings"),y(ot,"id","mappings"),y(ut,"href","https://github.com/elianiva/dotfiles/blob/235c54445268f5838ac4a03669fde4d0a4738fea/nvim/.config/nvim/lua/modules/lsp/_mappings.lua"),y(ut,"rel","nofollow"),y(ht,"class","language-lua"),y(mt,"href","#language-specific-config"),y(dt,"id","language-specific-config"),y(Tt,"href","#tsserver"),y(Dt,"id","tsserver"),y(zt,"class","language-lua"),y(Zt,"href","#svelteserver"),y(Kt,"id","svelteserver"),y(ke,"class","language-lua"),y(ge,"href","#sumneko_lua"),y(he,"id","sumneko_lua"),y(Ee,"class","language-lua"),y(Ie,"href","#diagnostic"),y(Le,"id","diagnostic"),y($e,"href","https://github.com/nvim-lua/diagnostic-nvim"),y($e,"rel","nofollow"),y(De,"href","https://github.com/neovim/neovim/pull/12655"),y(De,"rel","nofollow"),y(Me,"class","language-lua"),y(no,"href","#linting-and-formatting"),y(Qe,"id","linting-and-formatting"),y(oo,"href","https://github.com/mattn/efm-langserver"),y(oo,"rel","nofollow"),y(io,"href","https://eslint.org"),y(io,"rel","nofollow"),y(uo,"href","https://prettier.io"),y(uo,"rel","nofollow"),y(ho,"href","https://golang.org/cmd/gofmt/"),y(ho,"rel","nofollow"),y(vo,"href","https://github.com/johnnymorganz/stylua"),y(vo,"rel","nofollow"),y(Eo,"href","https://github.com/rust-lang/rustfmt"),y(Eo,"rel","nofollow"),y(To,"class","language-lua"),y(Qo,"class","language-lua"),y(ep,"class","language-lua"),y(mp,"href","https://github.com/elianiva/dotfiles/blob/235c54445268f5838ac4a03669fde4d0a4738fea/nvim/.config/nvim/lua/modules/lsp/init.lua#L89-L108"),y(mp,"rel","nofollow"),y(Lp,"href","#diagnostic-conflict"),y(bp,"id","diagnostic-conflict"),y(Np,"class","language-lua"),y(qp,"href","#completion-and-snippets"),y(Xp,"id","completion-and-snippets"),y(Zp,"href","https://github.com/hrsh7th/nvim-compe"),y(Zp,"rel","nofollow"),y(nc,"href","https://github.com/nvim-lua/completion-nvim"),y(nc,"rel","nofollow"),y(pc,"href","https://github.com/hrsh7th/vim-vsnip"),y(pc,"rel","nofollow"),y(rc,"href","https://github.com/norcalli/snippets.nvim"),y(rc,"rel","nofollow"),y(wc,"class","language-lua"),y(Lc,"href","https://github.com/elianiva/dotfiles/blob/5f813d893ff5a5928bac52995d6b4f806a8b3d2a/nvim/.config/nvim/lua/plugins/_completion.lua"),y(Lc,"rel","nofollow"),y(Sc,"href","#closing-note"),y(_c,"id","closing-note"),y(Oc,"href","https://github.com/neoclide/coc.nvim"),y(Oc,"rel","nofollow"),y(Uc,"href","https://github.com/autozimu/LanguageClient-neovim"),y(Uc,"rel","nofollow"),y(Jc,"href","https://github.com/prabirshrestha/vim-lsp"),y(Jc,"rel","nofollow"),y(zc,"href","https://github.com/dense-analysis/ale"),y(zc,"rel","nofollow"),y(Qc,"href","https://github.com/elianiva/dotfiles/tree/master/nvim/.config/nvim/lua/modules/lsp"),y(Qc,"rel","nofollow")},m(n,e){E(n,a,e),b(a,s),b(s,t),E(n,c,e),E(n,u,e),b(u,L),b(L,$),b($,x),b(x,A),b(u,D),b(u,T),b(T,H),b(H,O),b(O,M),b(u,N),b(u,j),b(j,R),b(R,U),b(U,Y),b(j,W),b(j,F),b(F,J),b(J,X),b(X,q),b(q,V),b(F,z),b(F,B),b(B,K),b(K,Z),b(Z,G),b(F,Q),b(F,nn),b(nn,an),b(an,sn),b(sn,tn),b(F,en),b(F,on),b(on,pn),b(pn,cn),b(cn,rn),b(on,ln),b(on,un),b(un,kn),b(kn,fn),b(fn,hn),b(un,gn),b(un,dn),b(dn,mn),b(mn,vn),b(un,wn),b(un,yn),b(yn,En),b(En,bn),b(F,Ln),b(F,In),b(In,Pn),b(Pn,_n),b(_n,Sn),b(F,Cn),b(F,$n),b($n,xn),b(xn,An),b(An,Dn),b(F,Tn),b(F,Hn),b(Hn,On),b(On,Mn),b(Mn,Nn),b(F,jn),b(F,Rn),b(Rn,Un),b(Un,Yn),b(Yn,Wn),b(u,Fn),b(u,Jn),b(Jn,Xn),b(Xn,qn),b(qn,Vn),E(n,zn,e),E(n,Bn,e),b(Bn,Kn),b(Kn,Zn),E(n,Gn,e),E(n,Qn,e),b(Qn,na),E(n,aa,e),E(n,sa,e),b(sa,ta),b(sa,ea),b(ea,oa),b(sa,pa),b(sa,ca),b(ca,ia),b(sa,ra),b(sa,la),b(la,ua),b(sa,ka),b(sa,fa),b(fa,ha),b(sa,ga),b(sa,da),b(da,ma),b(sa,va),b(sa,wa),b(wa,ya),b(sa,Ea),E(n,ba,e),E(n,La,e),b(La,Ia),b(La,Pa),b(Pa,_a),b(La,Sa),E(n,Ca,e),E(n,$a,e),b($a,xa),b(xa,Aa),b(Aa,Da),b($a,Ta),b($a,Ha),b(Ha,Oa),b(Oa,Ma),b($a,Na),b($a,ja),b(ja,Ra),b(Ra,Ua),E(n,Ya,e),E(n,Wa,e),b(Wa,Fa),b(Fa,Ja),E(n,Xa,e),E(n,qa,e),b(qa,Va),b(qa,za),b(za,Ba),b(qa,Ka),b(qa,Za),b(Za,Ga),b(qa,Qa),E(n,ns,e),E(n,as,e),b(as,ss),E(n,ts,e),E(n,es,e),b(es,os),b(os,ps),E(n,cs,e),E(n,is,e),b(is,rs),b(rs,ls),E(n,us,e),E(n,ks,e),b(ks,fs),b(ks,hs),b(hs,gs),b(ks,ds),b(ks,ms),b(ms,vs),b(ks,ws),E(n,ys,e),E(n,Es,e),b(Es,bs),b(Es,Ls),b(Ls,Is),E(n,Ps,e),E(n,_s,e),_s.innerHTML='<code class="language-lua"><span class="token function">use</span> <span class="token punctuation">&#123;</span><span class="token string">\'neovim/nvim-lspconfig\'</span><span class="token punctuation">,</span> opt <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">&#125;</span> <span class="token comment">-- builtin lsp config</span></code>',E(n,Ss,e),E(n,Cs,e),b(Cs,$s),b($s,xs),E(n,As,e),E(n,Ds,e),b(Ds,Ts),E(n,Hs,e),E(n,Os,e),Os.innerHTML='<code class="language-lua"><span class="token keyword">local</span> custom_on_attach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  mappings<span class="token punctuation">.</span><span class="token function">lsp_mappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">end</span>\n\n<span class="token keyword">local</span> custom_on_init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'Language Server Protocol started!\'</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>flags <span class="token keyword">then</span>\n    client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>allow_incremental_sync <span class="token operator">=</span> <span class="token keyword">true</span>\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span>\n\nnvim_lsp<span class="token punctuation">.</span>gopls<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">&#123;</span>\n  on_attach <span class="token operator">=</span> custom_on_attach<span class="token punctuation">,</span>\n  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span></code>',E(n,Ms,e),E(n,Ns,e),b(Ns,js),b(Ns,Rs),b(Rs,Us),b(Ns,Ys),b(Ns,Ws),b(Ws,Fs),b(Ns,Js),b(Ns,Xs),b(Xs,qs),b(Ns,Vs),b(Ns,zs),b(zs,Bs),b(Ns,Ks),E(n,Zs,e),p(Gs,n,e),E(n,Qs,e),E(n,nt,e),b(nt,at),b(nt,st),b(st,tt),E(n,et,e),E(n,ot,e),b(ot,pt),b(pt,ct),E(n,it,e),E(n,rt,e),b(rt,lt),b(rt,ut),b(ut,kt),E(n,ft,e),E(n,ht,e),ht.innerHTML='<code class="language-lua"><span class="token keyword">local</span> remap <span class="token operator">=</span> vim<span class="token punctuation">.</span>api<span class="token punctuation">.</span>nvim_set_keymap\n<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n<span class="token keyword">local</span> signature <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lspsaga.signaturehelp"</span><span class="token punctuation">)</span>\n<span class="token comment">-- other LSP saga modules</span>\n\nM<span class="token punctuation">.</span>lsp_mappings <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token string">"jdtls"</span> <span class="token keyword">then</span>\n    <span class="token function">nnoremap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"ga"</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jdtls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code_action<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token keyword">else</span>\n    <span class="token function">nnoremap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"ga"</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"plugins._telescope"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lsp_code_actions<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n\n  <span class="token function">inoremap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"&lt;C-s>"</span><span class="token punctuation">,</span> signature<span class="token punctuation">.</span>signature_help<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token comment">-- some other mappings here</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">return</span> M</code>',E(n,gt,e),E(n,dt,e),b(dt,mt),b(mt,vt),E(n,wt,e),E(n,yt,e),b(yt,Et),b(yt,bt),b(bt,Lt),b(yt,It),b(yt,Pt),b(Pt,_t),b(yt,St),b(yt,Ct),b(Ct,$t),b(yt,xt),E(n,At,e),E(n,Dt,e),b(Dt,Tt),b(Tt,Ht),E(n,Ot,e),E(n,Mt,e),b(Mt,Nt),b(Mt,jt),b(jt,Rt),b(Mt,Ut),b(Mt,Yt),b(Yt,Wt),b(Mt,Ft),b(Mt,Jt),b(Jt,Xt),b(Mt,qt),E(n,Vt,e),E(n,zt,e),zt.innerHTML='<code class="language-lua">nvim_lsp<span class="token punctuation">.</span>tsserver<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">&#123;</span>\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\nI have my &#96;tsserver&#96; to be started on every JS<span class="token operator">/</span>TS file regardless of its directory<span class="token punctuation">.</span> With the default config<span class="token punctuation">,</span> it will only start when it found &#96;package<span class="token punctuation">.</span>json&#96; <span class="token keyword">or</span> &#96;<span class="token punctuation">.</span>git&#96; which marks the root directory <span class="token keyword">for</span> the LSP<span class="token punctuation">.</span>\n\n&#96;&#96;&#96;lua\n<span class="token comment">-- inside the &#96;servers&#96; table</span>\ntsserver <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> 06<span class="token function">f717c</span> <span class="token punctuation">(</span>I ACCIDENTALLY DELETED MY LOCAL REPOSITORY LMAO HELP<span class="token punctuation">)</span>\n  filetypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'javascript\'</span><span class="token punctuation">,</span> <span class="token string">\'typescript\'</span><span class="token punctuation">,</span> <span class="token string">\'typescriptreact\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  on_attach <span class="token operator">=</span> custom_on_attach<span class="token punctuation">,</span>\n  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>\n  root_dir <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> vim<span class="token punctuation">.</span>loop<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span></code>',E(n,Bt,e),E(n,Kt,e),b(Kt,Zt),b(Zt,Gt),E(n,Qt,e),E(n,ne,e),b(ne,ae),b(ne,se),b(se,te),b(ne,ee),b(ne,oe),b(oe,pe),b(ne,ce),b(ne,ie),b(ie,re),b(ne,le),E(n,ue,e),E(n,ke,e),ke.innerHTML='<code class="language-lua"><span class="token comment">-- inside the &#96;servers&#96; table</span>\nsvelteserver <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  on_attach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>\n    mappings<span class="token punctuation">.</span><span class="token function">lsp_mappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    client<span class="token punctuation">.</span>server_capabilities<span class="token punctuation">.</span>completionProvider<span class="token punctuation">.</span>triggerCharacters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n      <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">\'"\'</span><span class="token punctuation">,</span> <span class="token string">"\'"</span><span class="token punctuation">,</span> <span class="token string">"&#96;"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n      <span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">":"</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token keyword">end</span><span class="token punctuation">,</span>\n  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>\n  handlers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    <span class="token punctuation">[</span><span class="token string">"textDocument/publishDiagnostics"</span><span class="token punctuation">]</span> <span class="token operator">=</span> is_using_eslint<span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  filetypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'html\'</span><span class="token punctuation">,</span> <span class="token string">\'svelte\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    svelte <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n      plugin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">-- some settings</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span></code>',E(n,fe,e),E(n,he,e),b(he,ge),b(ge,de),E(n,me,e),E(n,ve,e),b(ve,we),E(n,ye,e),E(n,Ee,e),Ee.innerHTML='<code class="language-lua"><span class="token keyword">local</span> sumneko_root <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HOME"</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">"/repos/lua-language-server"</span>\n\n<span class="token comment">-- inside the &#96;servers&#96; table</span>\nsumneko_lua <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  cmd <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    sumneko_root <span class="token operator">..</span> <span class="token string">"/bin/Linux/lua-language-server"</span><span class="token punctuation">,</span>\n    <span class="token string">"-E"</span><span class="token punctuation">,</span>\n    sumneko_root <span class="token operator">..</span> <span class="token string">"/main.lua"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  on_attach <span class="token operator">=</span> custom_on_attach<span class="token punctuation">,</span>\n  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>\n  settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    Lua <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n      runtime <span class="token operator">=</span> <span class="token punctuation">&#123;</span> version <span class="token operator">=</span> <span class="token string">"LuaJIT"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> vim<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>package<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      diagnostics <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n        enable <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n        globals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n          <span class="token string">"vim"</span><span class="token punctuation">,</span> <span class="token string">"describe"</span><span class="token punctuation">,</span> <span class="token string">"it"</span><span class="token punctuation">,</span> <span class="token string">"before_each"</span><span class="token punctuation">,</span> <span class="token string">"after_each"</span><span class="token punctuation">,</span>\n          <span class="token string">"awesome"</span><span class="token punctuation">,</span> <span class="token string">"theme"</span><span class="token punctuation">,</span> <span class="token string">"client"</span><span class="token punctuation">,</span> <span class="token string">"P"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      workspace <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n        preloadFileSize <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span></code>',E(n,be,e),E(n,Le,e),b(Le,Ie),b(Ie,Pe),E(n,_e,e),E(n,Se,e),b(Se,Ce),b(Se,$e),b($e,xe),b(Se,Ae),b(Se,De),b(De,Te),b(Se,He),E(n,Oe,e),E(n,Me,e),Me.innerHTML='<code class="language-lua">vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token string">"textDocument/publishDiagnostics"</span><span class="token punctuation">]</span> <span class="token operator">=</span> vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>\n  vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>diagnostic<span class="token punctuation">.</span>on_publish_diagnostics<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n    virtual_text <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n      prefix <span class="token operator">=</span> <span class="token string">"»"</span><span class="token punctuation">,</span>\n      spacing <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    signs <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    update_in_insert <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span>\n\nvim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">\'LspDiagnosticsSignError\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultError"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\nvim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">\'LspDiagnosticsSignWarning\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultWarning"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\nvim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">\'LspDiagnosticsSignInformation\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultInformation"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\nvim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">\'LspDiagnosticsSignHint\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultHint"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',E(n,Ne,e),E(n,je,e),b(je,Re),b(je,Ue),b(Ue,Ye),b(je,We),b(je,Fe),b(Fe,Je),b(je,Xe),b(je,qe),b(qe,Ve),b(je,ze),b(je,Be),b(Be,Ke),b(je,Ze),E(n,Ge,e),E(n,Qe,e),b(Qe,no),b(no,ao),E(n,so,e),E(n,to,e),b(to,eo),b(to,oo),b(oo,po),b(to,co),b(to,io),b(io,ro),b(to,lo),b(to,uo),b(uo,ko),b(to,fo),b(to,ho),b(ho,go),b(to,mo),b(to,vo),b(vo,wo),b(to,yo),b(to,Eo),b(Eo,bo),b(to,Lo),E(n,Io,e),p(Po,n,e),E(n,_o,e),E(n,So,e),b(So,Co),b(So,$o),b($o,xo),b(So,Ao),E(n,Do,e),E(n,To,e),To.innerHTML='<code class="language-lua">nvim_lsp<span class="token punctuation">.</span>efm<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">&#123;</span>\n  cmd <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"efm-langserver"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  on_attach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>\n    client<span class="token punctuation">.</span>resolved_capabilities<span class="token punctuation">.</span>rename <span class="token operator">=</span> <span class="token keyword">false</span>\n    client<span class="token punctuation">.</span>resolved_capabilities<span class="token punctuation">.</span>hover <span class="token operator">=</span> <span class="token keyword">false</span>\n  <span class="token keyword">end</span><span class="token punctuation">,</span>\n  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>\n  settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    rootMarkers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>vim<span class="token punctuation">.</span>loop<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    languages <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n      javascript <span class="token operator">=</span> <span class="token punctuation">&#123;</span> eslint<span class="token punctuation">,</span> prettier <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token comment">-- other languages here</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',E(n,Ho,e),E(n,Oo,e),b(Oo,Mo),E(n,No,e),E(n,jo,e),b(jo,Ro),b(jo,Uo),b(Uo,Yo),b(jo,Wo),b(jo,Fo),b(Fo,Jo),b(jo,Xo),b(jo,qo),b(qo,Vo),b(jo,zo),b(jo,Bo),b(Bo,Ko),b(jo,Zo),E(n,Go,e),E(n,Qo,e),Qo.innerHTML='<code class="language-lua"><span class="token keyword">local</span> prettier <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  formatCommand <span class="token operator">=</span> <span class="token punctuation">(</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token keyword">not</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span>vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span>vim<span class="token punctuation">.</span>loop<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">\'/.prettierrc\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span>\n        <span class="token keyword">return</span> <span class="token string">"prettier --config ./.prettierrc"</span>\n      <span class="token keyword">else</span>\n        <span class="token keyword">return</span> <span class="token string">"prettier --config ~/.config/nvim/.prettierrc"</span>\n      <span class="token keyword">end</span>\n    <span class="token keyword">end</span>\n  <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">&#125;</span></code>',E(n,np,e),E(n,ap,e),b(ap,sp),E(n,tp,e),E(n,ep,e),ep.innerHTML='<code class="language-lua"><span class="token keyword">local</span> eslint <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  lintCommand <span class="token operator">=</span> <span class="token string">"eslint_d -f unix --stdin --stdin-filename $&#123;INPUT&#125;"</span><span class="token punctuation">,</span>\n  lintIgnoreExitCode <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  lintStdin <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  lintFormats <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"%f:%l:%c: %m"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span></code>',E(n,op,e),E(n,pp,e),b(pp,cp),b(pp,ip),b(ip,rp),b(pp,lp),E(n,up,e),E(n,kp,e),b(kp,fp),b(kp,hp),b(hp,gp),b(kp,dp),b(kp,mp),b(mp,vp),E(n,wp,e),p(yp,n,e),E(n,Ep,e),E(n,bp,e),b(bp,Lp),b(Lp,Ip),E(n,Pp,e),E(n,_p,e),b(_p,Sp),b(_p,Cp),b(Cp,$p),b(_p,xp),b(_p,Ap),b(Ap,Dp),b(_p,Tp),E(n,Hp,e),p(Op,n,e),E(n,Mp,e),E(n,Np,e),Np.innerHTML='<code class="language-lua"><span class="token keyword">local</span> is_using_eslint <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> result<span class="token punctuation">,</span> client_id<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token function">is_cfg_present</span><span class="token punctuation">(</span><span class="token string">"/.eslintrc.json"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">is_cfg_present</span><span class="token punctuation">(</span><span class="token string">"/.eslintrc.js"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">return</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">return</span> vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token string">"textDocument/publishDiagnostics"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> result<span class="token punctuation">,</span> client_id<span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',E(n,jp,e),E(n,Rp,e),b(Rp,Up),b(Rp,Yp),b(Yp,Wp),b(Rp,Fp),E(n,Jp,e),E(n,Xp,e),b(Xp,qp),b(qp,Vp),E(n,zp,e),E(n,Bp,e),b(Bp,Kp),b(Bp,Zp),b(Zp,Gp),b(Bp,Qp),b(Bp,nc),b(nc,ac),b(Bp,sc),E(n,tc,e),E(n,ec,e),b(ec,oc),b(ec,pc),b(pc,cc),b(ec,ic),b(ec,rc),b(rc,lc),b(ec,uc),E(n,kc,e),E(n,fc,e),b(fc,hc),b(fc,gc),b(gc,dc),b(fc,mc),E(n,vc,e),E(n,wc,e),wc.innerHTML='<code class="language-lua"><span class="token keyword">local</span> remap <span class="token operator">=</span> vim<span class="token punctuation">.</span>api<span class="token punctuation">.</span>nvim_set_keymap\n\nvim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>vsnip_snippet_dir <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">stdpath</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token operator">..</span><span class="token string">"/snippets"</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"compe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  enabled              <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  debug                <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>\n  min_length           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  preselect            <span class="token operator">=</span> <span class="token string">"disable"</span><span class="token punctuation">,</span>\n  source_timeout       <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  incomplete_delay     <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  allow_prefix_unmatch <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>\n\n  source <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    path     <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    calc     <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    buffer   <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    vsnip    <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    nvim_lsp <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    nvim_lua <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\nUtil<span class="token punctuation">.</span>trigger_completion <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token number">0</span> <span class="token keyword">then</span>\n    <span class="token keyword">if</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">complete_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"selected"</span><span class="token punctuation">]</span> <span class="token operator">~=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">then</span>\n      <span class="token keyword">return</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">[</span><span class="token string">"compe#confirm"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">end</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">local</span> prev_col<span class="token punctuation">,</span> next_col <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> prev_char <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">sub</span><span class="token punctuation">(</span>prev_col<span class="token punctuation">,</span> prev_col<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> next_char <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">sub</span><span class="token punctuation">(</span>next_col<span class="token punctuation">,</span> next_col<span class="token punctuation">)</span>\n\n  <span class="token comment">-- minimal autopairs-like behaviour</span>\n  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">"&#123;"</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>&#125;&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">"["</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>]&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">"("</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>)&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">">"</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">"&lt;"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span> <span class="token comment">-- html indents</span>\n\n  <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>"</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token function">remap</span><span class="token punctuation">(</span>\n  <span class="token string">"i"</span><span class="token punctuation">,</span>\n  <span class="token string">"&lt;CR>"</span><span class="token punctuation">,</span>\n  <span class="token string">"v:lua.Util.trigger_completion()"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span> expr <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span>\n<span class="token function">remap</span><span class="token punctuation">(</span>\n  <span class="token string">"i"</span><span class="token punctuation">,</span>\n  <span class="token string">"&lt;Tab>"</span><span class="token punctuation">,</span>\n  table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n    <span class="token string">"pumvisible() ? "&lt;C-n>" : v:lua.Util.check_backspace()"</span><span class="token punctuation">,</span>\n    <span class="token string">"? "&lt;Tab>" : compe#confirm()"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> noremap <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> expr <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span>\n\n<span class="token function">remap</span><span class="token punctuation">(</span>\n  <span class="token string">"i"</span><span class="token punctuation">,</span>\n  <span class="token string">"&lt;S-Tab>"</span><span class="token punctuation">,</span>\n  <span class="token string">"pumvisible() ? "&lt;C-p>" : "&lt;S-Tab>""</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span> noremap <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> expr <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span>\n<span class="token function">remap</span><span class="token punctuation">(</span>\n  <span class="token string">"i"</span><span class="token punctuation">,</span>\n  <span class="token string">"&lt;C-Space>"</span><span class="token punctuation">,</span>\n  <span class="token string">"compe#complete()"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span> noremap <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> expr <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span></code>',E(n,yc,e),E(n,Ec,e),b(Ec,bc),b(Ec,Lc),b(Lc,Ic),E(n,Pc,e),E(n,_c,e),b(_c,Sc),b(Sc,Cc),E(n,$c,e),E(n,xc,e),b(xc,Ac),E(n,Dc,e),E(n,Tc,e),b(Tc,Hc),b(Hc,Oc),b(Oc,Mc),b(Hc,Nc),b(Tc,jc),b(Tc,Rc),b(Rc,Uc),b(Uc,Yc),b(Tc,Wc),b(Tc,Fc),b(Fc,Jc),b(Jc,Xc),b(Tc,qc),b(Tc,Vc),b(Vc,zc),b(zc,Bc),E(n,Kc,e),E(n,Zc,e),b(Zc,Gc),b(Zc,Qc),b(Qc,ni),b(Zc,ai),si=!0},p(n,a){const s={};1&a&&(s.$$scope={dirty:a,ctx:n}),Gs.$set(s);const t={};1&a&&(t.$$scope={dirty:a,ctx:n}),Po.$set(t);const e={};1&a&&(e.$$scope={dirty:a,ctx:n}),yp.$set(e);const o={};1&a&&(o.$$scope={dirty:a,ctx:n}),Op.$set(o)},i(n){si||(i(Gs.$$.fragment,n),i(Po.$$.fragment,n),i(yp.$$.fragment,n),i(Op.$$.fragment,n),si=!0)},o(n){r(Gs.$$.fragment,n),r(Po.$$.fragment,n),r(yp.$$.fragment,n),r(Op.$$.fragment,n),si=!1},d(n){n&&v(a),n&&v(c),n&&v(u),n&&v(zn),n&&v(Bn),n&&v(Gn),n&&v(Qn),n&&v(aa),n&&v(sa),n&&v(ba),n&&v(La),n&&v(Ca),n&&v($a),n&&v(Ya),n&&v(Wa),n&&v(Xa),n&&v(qa),n&&v(ns),n&&v(as),n&&v(ts),n&&v(es),n&&v(cs),n&&v(is),n&&v(us),n&&v(ks),n&&v(ys),n&&v(Es),n&&v(Ps),n&&v(_s),n&&v(Ss),n&&v(Cs),n&&v(As),n&&v(Ds),n&&v(Hs),n&&v(Os),n&&v(Ms),n&&v(Ns),n&&v(Zs),l(Gs,n),n&&v(Qs),n&&v(nt),n&&v(et),n&&v(ot),n&&v(it),n&&v(rt),n&&v(ft),n&&v(ht),n&&v(gt),n&&v(dt),n&&v(wt),n&&v(yt),n&&v(At),n&&v(Dt),n&&v(Ot),n&&v(Mt),n&&v(Vt),n&&v(zt),n&&v(Bt),n&&v(Kt),n&&v(Qt),n&&v(ne),n&&v(ue),n&&v(ke),n&&v(fe),n&&v(he),n&&v(me),n&&v(ve),n&&v(ye),n&&v(Ee),n&&v(be),n&&v(Le),n&&v(_e),n&&v(Se),n&&v(Oe),n&&v(Me),n&&v(Ne),n&&v(je),n&&v(Ge),n&&v(Qe),n&&v(so),n&&v(to),n&&v(Io),l(Po,n),n&&v(_o),n&&v(So),n&&v(Do),n&&v(To),n&&v(Ho),n&&v(Oo),n&&v(No),n&&v(jo),n&&v(Go),n&&v(Qo),n&&v(np),n&&v(ap),n&&v(tp),n&&v(ep),n&&v(op),n&&v(pp),n&&v(up),n&&v(kp),n&&v(wp),l(yp,n),n&&v(Ep),n&&v(bp),n&&v(Pp),n&&v(_p),n&&v(Hp),l(Op,n),n&&v(Mp),n&&v(Np),n&&v(jp),n&&v(Rp),n&&v(Jp),n&&v(Xp),n&&v(zp),n&&v(Bp),n&&v(tc),n&&v(ec),n&&v(kc),n&&v(fc),n&&v(vc),n&&v(wc),n&&v(yc),n&&v(Ec),n&&v(Pc),n&&v(_c),n&&v($c),n&&v(xc),n&&v(Dc),n&&v(Tc),n&&v(Kc),n&&v(Zc)}}}function x(n){let a,s;const k=[A];let f={$$slots:{default:[$]},$$scope:{ctx:n}};for(let e=0;e<k.length;e+=1)f=t(f,k[e]);return a=new L({props:f}),{c(){e(a.$$.fragment)},l(n){o(a.$$.fragment,n)},m(n,t){p(a,n,t),s=!0},p(n,[s]){const t=0&s?c(k,[u(A)]):{};1&s&&(t.$$scope={dirty:s,ctx:n}),a.$set(t)},i(n){s||(i(a.$$.fragment,n),s=!0)},o(n){r(a.$$.fragment,n),s=!1},d(n){l(a,n)}}}const A={title:"My setup for Neovim's builtin LSP client",date:"2020-12-18T00:00:00.000Z",desc:"A post where I explain about my setup for Neovim's builtin LSP",tags:["neovim"]};export default class extends n{constructor(n){super(),a(this,n,null,x,s,{})}}export{A as metadata};
