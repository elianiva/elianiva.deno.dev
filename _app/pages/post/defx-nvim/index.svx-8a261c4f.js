import{S as s,i as n,s as a,o as t,p as o,r as e,u as p,v as r,x as c,y as l,z as i,w as k,e as u,t as f,a as d,f as h,g,k as m,d as y,c as w,h as v,j as x,l as E,n as b}from"../../../chunks/stores-7ca13020.js";import{P as I}from"../../../chunks/post-14e8d485.js";import"../../../chunks/ProgressButton-549bf321.js";import"../../../chunks/theme-0c5a7997.js";function T(s){let n,a,t,o,e,p,r,c,l,i,k,I,T,_,P,D,A,L,j,R,N,C,S,H,M,$,O,Y,G,q,U,z,F,K,W,B,V,Z,J,Q,X,ss,ns,as,ts,os,es,ps,rs,cs,ls,is,ks,us,fs,ds,hs,gs,ms,ys,ws,vs,xs,Es,bs,Is,Ts,_s,Ps,Ds,As,Ls,js,Rs,Ns,Cs,Ss,Hs,Ms,$s,Os,Ys,Gs,qs,Us,zs,Fs,Ks,Ws,Bs,Vs,Zs,Js,Qs,Xs,sn,nn,an,tn,on,en,pn,rn,cn,ln,kn,un,fn,dn,hn,gn,mn,yn,wn,vn,xn,En,bn,In,Tn,_n,Pn,Dn,An,Ln,jn,Rn,Nn,Cn,Sn,Hn,Mn,$n,On,Yn,Gn,qn,Un,zn,Fn,Kn,Wn,Bn,Vn,Zn,Jn,Qn,Xn,sa,na,aa,ta,oa,ea,pa,ra,ca,la,ia,ka,ua,fa,da,ha,ga,ma,ya,wa,va,xa,Ea,ba,Ia,Ta,_a,Pa,Da,Aa,La,ja,Ra,Na,Ca,Sa,Ha,Ma,$a,Oa,Ya,Ga,qa,Ua,za,Fa,Ka,Wa,Ba,Va,Za,Ja,Qa,Xa,st,nt,at,tt,ot,et,pt,rt,ct,lt,it,kt,ut,ft,dt;return{c(){n=u("h1"),a=u("a"),t=f("Table of Content"),o=d(),e=u("ul"),p=u("li"),r=u("p"),c=u("a"),l=f("Introduction"),i=d(),k=u("li"),I=u("p"),T=u("a"),_=f("Installation"),P=d(),D=u("li"),A=u("p"),L=u("a"),j=f("Configuration"),R=d(),N=u("ul"),C=u("li"),S=u("a"),H=f("Keybindings"),M=d(),$=u("li"),O=u("a"),Y=f("Using split window"),G=d(),q=u("li"),U=u("a"),z=f("Adding icons"),F=d(),K=u("li"),W=u("p"),B=u("a"),V=f("Conclusion"),Z=d(),J=u("h1"),Q=u("a"),X=f("Introduction"),ss=d(),ns=u("p"),as=f("Hi everyone! This time I will talk about a (Neo)vim plugin called "),ts=u("a"),os=f("Defx"),es=f(". I’ve been looking for an alternative to "),ps=u("a"),rs=f("NERDTree"),cs=f(" for quite a while now. I came across this plugin from a telegram channel called “Vim Indonesia”. Since I have no project that I’m currently working on, why don’t I give it a shot?"),ls=d(),is=u("h1"),ks=u("a"),us=f("Installation"),fs=d(),ds=u("p"),hs=f("The installation is pretty simple. You can add this plugin just like any other plugin from your plugin manager. I’m using "),gs=u("a"),ms=f("vim-plug"),ys=f(" as my plugin manager. To add a plugin, I would simply add this into my plugin list."),ws=d(),vs=u("pre"),xs=d(),Es=u("p"),bs=f("After doing that, I source my init.vim using "),Is=u("code"),Ts=f(":so ~/.config/nvim/init.vim"),_s=f(" and then just run "),Ps=u("code"),Ds=f(":PlugInstall"),As=f(" to install it. Make sure your (Neo)vim supports Python 3."),Ls=d(),js=u("h1"),Rs=u("a"),Ns=f("Configuration"),Cs=d(),Ss=u("h2"),Hs=u("a"),Ms=f("Keybindings"),$s=d(),Os=u("p"),Ys=f("To toggle Defx, you’d run "),Gs=u("code"),qs=f(":Defx"),Us=f(". To make it efficient, let’s assign that to a keystroke. To do that, I add this into my config"),zs=d(),Fs=u("pre"),Ks=d(),Ws=u("p"),Bs=f("Finally, we can just simply press "),Vs=u("code"),Zs=f("ctrl+n"),Js=f(" to toggle it. Awesome!"),Qs=d(),Xs=u("p"),sn=f("You’ll notice that by default it doesn’t handle keypress to open a directory, open a file, add a file, etc like NERDTree. You have to add that by yourself. Thankfully, there is "),nn=u("a"),an=f("this blog"),tn=f(" that helped me making those keybindings. What you need to do is to add this long lines of vimscript to your config file."),on=d(),en=u("pre"),pn=d(),rn=u("p"),cn=f("As usual, don’t get intimidated by the long block of code. It’s just a bunch of keybinds. You can customize it however you want."),ln=d(),kn=u("h2"),un=u("a"),fn=f("Using split window"),dn=d(),hn=u("p"),gn=f("As you can see, Defx looks way more plain than NERDTree. Let’s change that! First thing first, we make it split instead of fullscreen and put it to the left of our screen. To do that, add this to your config."),mn=d(),yn=u("pre"),wn=d(),vn=u("p"),xn=f("Let me quickly explain to you what does what."),En=d(),bn=u("p"),In=u("strong"),Tn=f("winwidth"),_n=f(" : It’s pretty straight forward. This field sets the minimum width for the Defx window width."),Pn=d(),Dn=u("p"),An=u("strong"),Ln=f("split"),jn=f(" : This field sets the mode of the split. You can fill this with horizontal or vertical. In our case, it’s vertical."),Rn=d(),Nn=u("p"),Cn=u("strong"),Sn=f("direction"),Hn=f(" : This field sets the position of the split. In our case, it’s topleft which will make it split to the left. The other possible values are available through "),Mn=u("code"),$n=f(":h defx"),On=f("."),Yn=d(),Gn=u("p"),qn=u("strong"),Un=f("show_ignored_files"),zn=f(" : This option will decide whether it will display the hidden files or not. In our case, it’s not getting displayed."),Fn=d(),Kn=u("p"),Wn=u("strong"),Bn=f("buffer_name"),Vn=f(" : Basically, it sets the buffer name for defx window."),Zn=d(),Jn=u("p"),Qn=u("strong"),Xn=f("toggle"),sa=f(" : This field makes Defx window toggleable. I recommend you to fill this field with 1."),na=d(),aa=u("p"),ta=u("strong"),oa=f("resume"),ea=f(" : This field makes Defx resume-able. It saves the state of where your cursor is so you don’t have to navigate from the root of your project directory again after you close Defx and open it again."),pa=d(),ra=u("p"),ca=f("All right, let’s see what we’ve got so far."),la=d(),ia=u("p"),ka=u("img"),fa=d(),da=u("p"),ha=f("It looks ok to me, but not quite yet. Let’s take it even further by adding some icons to make it eye candy. This next step is optional. If you don’t want any icon, you can skip it."),ga=d(),ma=u("h2"),ya=u("a"),wa=f("Adding icons"),va=d(),xa=u("p"),Ea=f("You know how file explorer in most text editor right? They have an icon that indicates whether it’s a folder or a file. Let’s replicate that in our case."),ba=d(),Ia=u("p"),Ta=f("I use a plugin called "),_a=u("a"),Pa=f("defx-icons"),Da=f(". As the name says, it will add some fancy icons to our file explorer. The installation is the same as Defx installation. Add this line to your config."),Aa=d(),La=u("pre"),ja=d(),Ra=u("p"),Na=f("Make sure to source your new config and do "),Ca=u("code"),Sa=f(":PlugInstall"),Ha=f(" after that. Make sure your terminal is using a patched font which you can get from "),Ma=u("a"),$a=f("here"),Oa=f(" so the icons will be displayed correctly. The installation process is finished, let’s configure it now! It’s simple, just add this block of code into your config."),Ya=d(),Ga=u("pre"),qa=d(),Ua=u("p"),za=f("As you can see, I added the columns field to the custom option function. It tells Defx to display the icons from our previous plugin. Now, I want to add those arrow symbol that indicates a directory. Let’s add that to our config."),Fa=d(),Ka=u("pre"),Wa=d(),Ba=u("p"),Va=f("This block of code creates a new column for the arrow icon. Let’s add that to our custom option function."),Za=d(),Ja=u("pre"),Qa=d(),Xa=u("p"),st=f("There we have it, people. We just transformed Defx to look like most IDE/Text Editor file explorer. Let’s compare it side by side."),nt=d(),at=u("p"),tt=u("img"),et=d(),pt=u("img"),ct=d(),lt=u("h1"),it=u("a"),kt=f("Conclusion"),ut=d(),ft=u("p"),dt=f("I think Defx is a good alternative to NERDTree and is worth to try. Some people said that it’s faster and lighter than NERDTree, but it’s not that significant in my experience. Anyway, let’s end this post here. If you get confused, feel free to hit me up! That’s it, see ya next time :)"),this.h()},l(s){n=h(s,"H1",{id:!0});var u=g(n);a=h(u,"A",{href:!0});var f=g(a);t=m(f,"Table of Content"),f.forEach(y),u.forEach(y),o=w(s),e=h(s,"UL",{});var d=g(e);p=h(d,"LI",{});var v=g(p);r=h(v,"P",{});var x=g(r);c=h(x,"A",{href:!0});var E=g(c);l=m(E,"Introduction"),E.forEach(y),x.forEach(y),v.forEach(y),i=w(d),k=h(d,"LI",{});var b=g(k);I=h(b,"P",{});var ua=g(I);T=h(ua,"A",{href:!0});var ot=g(T);_=m(ot,"Installation"),ot.forEach(y),ua.forEach(y),b.forEach(y),P=w(d),D=h(d,"LI",{});var rt=g(D);A=h(rt,"P",{});var ht=g(A);L=h(ht,"A",{href:!0});var gt=g(L);j=m(gt,"Configuration"),gt.forEach(y),ht.forEach(y),R=w(rt),N=h(rt,"UL",{});var mt=g(N);C=h(mt,"LI",{});var yt=g(C);S=h(yt,"A",{href:!0});var wt=g(S);H=m(wt,"Keybindings"),wt.forEach(y),yt.forEach(y),M=w(mt),$=h(mt,"LI",{});var vt=g($);O=h(vt,"A",{href:!0});var xt=g(O);Y=m(xt,"Using split window"),xt.forEach(y),vt.forEach(y),G=w(mt),q=h(mt,"LI",{});var Et=g(q);U=h(Et,"A",{href:!0});var bt=g(U);z=m(bt,"Adding icons"),bt.forEach(y),Et.forEach(y),mt.forEach(y),rt.forEach(y),F=w(d),K=h(d,"LI",{});var It=g(K);W=h(It,"P",{});var Tt=g(W);B=h(Tt,"A",{href:!0});var _t=g(B);V=m(_t,"Conclusion"),_t.forEach(y),Tt.forEach(y),It.forEach(y),d.forEach(y),Z=w(s),J=h(s,"H1",{id:!0});var Pt=g(J);Q=h(Pt,"A",{href:!0});var Dt=g(Q);X=m(Dt,"Introduction"),Dt.forEach(y),Pt.forEach(y),ss=w(s),ns=h(s,"P",{});var At=g(ns);as=m(At,"Hi everyone! This time I will talk about a (Neo)vim plugin called "),ts=h(At,"A",{href:!0,rel:!0});var Lt=g(ts);os=m(Lt,"Defx"),Lt.forEach(y),es=m(At,". I’ve been looking for an alternative to "),ps=h(At,"A",{href:!0,rel:!0});var jt=g(ps);rs=m(jt,"NERDTree"),jt.forEach(y),cs=m(At," for quite a while now. I came across this plugin from a telegram channel called “Vim Indonesia”. Since I have no project that I’m currently working on, why don’t I give it a shot?"),At.forEach(y),ls=w(s),is=h(s,"H1",{id:!0});var Rt=g(is);ks=h(Rt,"A",{href:!0});var Nt=g(ks);us=m(Nt,"Installation"),Nt.forEach(y),Rt.forEach(y),fs=w(s),ds=h(s,"P",{});var Ct=g(ds);hs=m(Ct,"The installation is pretty simple. You can add this plugin just like any other plugin from your plugin manager. I’m using "),gs=h(Ct,"A",{href:!0,rel:!0});var St=g(gs);ms=m(St,"vim-plug"),St.forEach(y),ys=m(Ct," as my plugin manager. To add a plugin, I would simply add this into my plugin list."),Ct.forEach(y),ws=w(s),vs=h(s,"PRE",{class:!0}),g(vs).forEach(y),xs=w(s),Es=h(s,"P",{});var Ht=g(Es);bs=m(Ht,"After doing that, I source my init.vim using "),Is=h(Ht,"CODE",{});var Mt=g(Is);Ts=m(Mt,":so ~/.config/nvim/init.vim"),Mt.forEach(y),_s=m(Ht," and then just run "),Ps=h(Ht,"CODE",{});var $t=g(Ps);Ds=m($t,":PlugInstall"),$t.forEach(y),As=m(Ht," to install it. Make sure your (Neo)vim supports Python 3."),Ht.forEach(y),Ls=w(s),js=h(s,"H1",{id:!0});var Ot=g(js);Rs=h(Ot,"A",{href:!0});var Yt=g(Rs);Ns=m(Yt,"Configuration"),Yt.forEach(y),Ot.forEach(y),Cs=w(s),Ss=h(s,"H2",{id:!0});var Gt=g(Ss);Hs=h(Gt,"A",{href:!0});var qt=g(Hs);Ms=m(qt,"Keybindings"),qt.forEach(y),Gt.forEach(y),$s=w(s),Os=h(s,"P",{});var Ut=g(Os);Ys=m(Ut,"To toggle Defx, you’d run "),Gs=h(Ut,"CODE",{});var zt=g(Gs);qs=m(zt,":Defx"),zt.forEach(y),Us=m(Ut,". To make it efficient, let’s assign that to a keystroke. To do that, I add this into my config"),Ut.forEach(y),zs=w(s),Fs=h(s,"PRE",{class:!0}),g(Fs).forEach(y),Ks=w(s),Ws=h(s,"P",{});var Ft=g(Ws);Bs=m(Ft,"Finally, we can just simply press "),Vs=h(Ft,"CODE",{});var Kt=g(Vs);Zs=m(Kt,"ctrl+n"),Kt.forEach(y),Js=m(Ft," to toggle it. Awesome!"),Ft.forEach(y),Qs=w(s),Xs=h(s,"P",{});var Wt=g(Xs);sn=m(Wt,"You’ll notice that by default it doesn’t handle keypress to open a directory, open a file, add a file, etc like NERDTree. You have to add that by yourself. Thankfully, there is "),nn=h(Wt,"A",{href:!0,rel:!0});var Bt=g(nn);an=m(Bt,"this blog"),Bt.forEach(y),tn=m(Wt," that helped me making those keybindings. What you need to do is to add this long lines of vimscript to your config file."),Wt.forEach(y),on=w(s),en=h(s,"PRE",{class:!0}),g(en).forEach(y),pn=w(s),rn=h(s,"P",{});var Vt=g(rn);cn=m(Vt,"As usual, don’t get intimidated by the long block of code. It’s just a bunch of keybinds. You can customize it however you want."),Vt.forEach(y),ln=w(s),kn=h(s,"H2",{id:!0});var Zt=g(kn);un=h(Zt,"A",{href:!0});var Jt=g(un);fn=m(Jt,"Using split window"),Jt.forEach(y),Zt.forEach(y),dn=w(s),hn=h(s,"P",{});var Qt=g(hn);gn=m(Qt,"As you can see, Defx looks way more plain than NERDTree. Let’s change that! First thing first, we make it split instead of fullscreen and put it to the left of our screen. To do that, add this to your config."),Qt.forEach(y),mn=w(s),yn=h(s,"PRE",{class:!0}),g(yn).forEach(y),wn=w(s),vn=h(s,"P",{});var Xt=g(vn);xn=m(Xt,"Let me quickly explain to you what does what."),Xt.forEach(y),En=w(s),bn=h(s,"P",{});var so=g(bn);In=h(so,"STRONG",{});var no=g(In);Tn=m(no,"winwidth"),no.forEach(y),_n=m(so," : It’s pretty straight forward. This field sets the minimum width for the Defx window width."),so.forEach(y),Pn=w(s),Dn=h(s,"P",{});var ao=g(Dn);An=h(ao,"STRONG",{});var to=g(An);Ln=m(to,"split"),to.forEach(y),jn=m(ao," : This field sets the mode of the split. You can fill this with horizontal or vertical. In our case, it’s vertical."),ao.forEach(y),Rn=w(s),Nn=h(s,"P",{});var oo=g(Nn);Cn=h(oo,"STRONG",{});var eo=g(Cn);Sn=m(eo,"direction"),eo.forEach(y),Hn=m(oo," : This field sets the position of the split. In our case, it’s topleft which will make it split to the left. The other possible values are available through "),Mn=h(oo,"CODE",{});var po=g(Mn);$n=m(po,":h defx"),po.forEach(y),On=m(oo,"."),oo.forEach(y),Yn=w(s),Gn=h(s,"P",{});var ro=g(Gn);qn=h(ro,"STRONG",{});var co=g(qn);Un=m(co,"show_ignored_files"),co.forEach(y),zn=m(ro," : This option will decide whether it will display the hidden files or not. In our case, it’s not getting displayed."),ro.forEach(y),Fn=w(s),Kn=h(s,"P",{});var lo=g(Kn);Wn=h(lo,"STRONG",{});var io=g(Wn);Bn=m(io,"buffer_name"),io.forEach(y),Vn=m(lo," : Basically, it sets the buffer name for defx window."),lo.forEach(y),Zn=w(s),Jn=h(s,"P",{});var ko=g(Jn);Qn=h(ko,"STRONG",{});var uo=g(Qn);Xn=m(uo,"toggle"),uo.forEach(y),sa=m(ko," : This field makes Defx window toggleable. I recommend you to fill this field with 1."),ko.forEach(y),na=w(s),aa=h(s,"P",{});var fo=g(aa);ta=h(fo,"STRONG",{});var ho=g(ta);oa=m(ho,"resume"),ho.forEach(y),ea=m(fo," : This field makes Defx resume-able. It saves the state of where your cursor is so you don’t have to navigate from the root of your project directory again after you close Defx and open it again."),fo.forEach(y),pa=w(s),ra=h(s,"P",{});var go=g(ra);ca=m(go,"All right, let’s see what we’ve got so far."),go.forEach(y),la=w(s),ia=h(s,"P",{});var mo=g(ia);ka=h(mo,"IMG",{src:!0,alt:!0}),mo.forEach(y),fa=w(s),da=h(s,"P",{});var yo=g(da);ha=m(yo,"It looks ok to me, but not quite yet. Let’s take it even further by adding some icons to make it eye candy. This next step is optional. If you don’t want any icon, you can skip it."),yo.forEach(y),ga=w(s),ma=h(s,"H2",{id:!0});var wo=g(ma);ya=h(wo,"A",{href:!0});var vo=g(ya);wa=m(vo,"Adding icons"),vo.forEach(y),wo.forEach(y),va=w(s),xa=h(s,"P",{});var xo=g(xa);Ea=m(xo,"You know how file explorer in most text editor right? They have an icon that indicates whether it’s a folder or a file. Let’s replicate that in our case."),xo.forEach(y),ba=w(s),Ia=h(s,"P",{});var Eo=g(Ia);Ta=m(Eo,"I use a plugin called "),_a=h(Eo,"A",{href:!0,rel:!0});var bo=g(_a);Pa=m(bo,"defx-icons"),bo.forEach(y),Da=m(Eo,". As the name says, it will add some fancy icons to our file explorer. The installation is the same as Defx installation. Add this line to your config."),Eo.forEach(y),Aa=w(s),La=h(s,"PRE",{class:!0}),g(La).forEach(y),ja=w(s),Ra=h(s,"P",{});var Io=g(Ra);Na=m(Io,"Make sure to source your new config and do "),Ca=h(Io,"CODE",{});var To=g(Ca);Sa=m(To,":PlugInstall"),To.forEach(y),Ha=m(Io," after that. Make sure your terminal is using a patched font which you can get from "),Ma=h(Io,"A",{href:!0,rel:!0});var _o=g(Ma);$a=m(_o,"here"),_o.forEach(y),Oa=m(Io," so the icons will be displayed correctly. The installation process is finished, let’s configure it now! It’s simple, just add this block of code into your config."),Io.forEach(y),Ya=w(s),Ga=h(s,"PRE",{class:!0}),g(Ga).forEach(y),qa=w(s),Ua=h(s,"P",{});var Po=g(Ua);za=m(Po,"As you can see, I added the columns field to the custom option function. It tells Defx to display the icons from our previous plugin. Now, I want to add those arrow symbol that indicates a directory. Let’s add that to our config."),Po.forEach(y),Fa=w(s),Ka=h(s,"PRE",{class:!0}),g(Ka).forEach(y),Wa=w(s),Ba=h(s,"P",{});var Do=g(Ba);Va=m(Do,"This block of code creates a new column for the arrow icon. Let’s add that to our custom option function."),Do.forEach(y),Za=w(s),Ja=h(s,"PRE",{class:!0}),g(Ja).forEach(y),Qa=w(s),Xa=h(s,"P",{});var Ao=g(Xa);st=m(Ao,"There we have it, people. We just transformed Defx to look like most IDE/Text Editor file explorer. Let’s compare it side by side."),Ao.forEach(y),nt=w(s),at=h(s,"P",{});var Lo=g(at);tt=h(Lo,"IMG",{src:!0,alt:!0}),et=w(Lo),pt=h(Lo,"IMG",{src:!0,alt:!0}),Lo.forEach(y),ct=w(s),lt=h(s,"H1",{id:!0});var jo=g(lt);it=h(jo,"A",{href:!0});var Ro=g(it);kt=m(Ro,"Conclusion"),Ro.forEach(y),jo.forEach(y),ut=w(s),ft=h(s,"P",{});var No=g(ft);dt=m(No,"I think Defx is a good alternative to NERDTree and is worth to try. Some people said that it’s faster and lighter than NERDTree, but it’s not that significant in my experience. Anyway, let’s end this post here. If you get confused, feel free to hit me up! That’s it, see ya next time :)"),No.forEach(y),this.h()},h(){v(a,"href","#table-of-content"),v(n,"id","table-of-content"),v(c,"href","#introduction"),v(T,"href","#installation"),v(L,"href","#configuration"),v(S,"href","#keybindings"),v(O,"href","#using-split-window"),v(U,"href","#adding-icons"),v(B,"href","#conclusion"),v(Q,"href","#introduction"),v(J,"id","introduction"),v(ts,"href","https://github.com/airblade/defx.nvim"),v(ts,"rel","nofollow"),v(ps,"href","https://github.com/preservim/nerdtree"),v(ps,"rel","nofollow"),v(ks,"href","#installation"),v(is,"id","installation"),v(gs,"href","https://github.com/junegunn/vim-plug"),v(gs,"rel","nofollow"),v(vs,"class","language-vim"),v(Rs,"href","#configuration"),v(js,"id","configuration"),v(Hs,"href","#keybindings"),v(Ss,"id","keybindings"),v(Fs,"class","language-vim"),v(nn,"href","https://tsarafatma.com/neovim/2020/02/08/defx-file-explorer-for-neovim"),v(nn,"rel","nofollow"),v(en,"class","language-vim"),v(un,"href","#using-split-window"),v(kn,"id","using-split-window"),v(yn,"class","language-vim"),ka.src!==(ua="/assets/post/defx-nvim/preview.png")&&v(ka,"src","/assets/post/defx-nvim/preview.png"),v(ka,"alt","preview"),v(ya,"href","#adding-icons"),v(ma,"id","adding-icons"),v(_a,"href","https://github.com/kristijanhusak/defx-icons"),v(_a,"rel","nofollow"),v(La,"class","language-vim"),v(Ma,"href","https://www.nerdfonts.com/font-downloads"),v(Ma,"rel","nofollow"),v(Ga,"class","language-vim"),v(Ka,"class","language-vim"),v(Ja,"class","language-vim"),tt.src!==(ot="/assets/post/defx-nvim/before.png")&&v(tt,"src","/assets/post/defx-nvim/before.png"),v(tt,"alt","before"),pt.src!==(rt="/assets/post/defx-nvim/after.png")&&v(pt,"src","/assets/post/defx-nvim/after.png"),v(pt,"alt","after"),v(it,"href","#conclusion"),v(lt,"id","conclusion")},m(s,u){x(s,n,u),E(n,a),E(a,t),x(s,o,u),x(s,e,u),E(e,p),E(p,r),E(r,c),E(c,l),E(e,i),E(e,k),E(k,I),E(I,T),E(T,_),E(e,P),E(e,D),E(D,A),E(A,L),E(L,j),E(D,R),E(D,N),E(N,C),E(C,S),E(S,H),E(N,M),E(N,$),E($,O),E(O,Y),E(N,G),E(N,q),E(q,U),E(U,z),E(e,F),E(e,K),E(K,W),E(W,B),E(B,V),x(s,Z,u),x(s,J,u),E(J,Q),E(Q,X),x(s,ss,u),x(s,ns,u),E(ns,as),E(ns,ts),E(ts,os),E(ns,es),E(ns,ps),E(ps,rs),E(ns,cs),x(s,ls,u),x(s,is,u),E(is,ks),E(ks,us),x(s,fs,u),x(s,ds,u),E(ds,hs),E(ds,gs),E(gs,ms),E(ds,ys),x(s,ws,u),x(s,vs,u),vs.innerHTML='<code class="language-vim"><span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">\'nvim\'</span><span class="token punctuation">)</span>\n  Plug <span class="token string">\'Shougo/defx.nvim\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">\'do\'</span><span class="token punctuation">:</span> <span class="token string">\':UpdateRemotePlugins\'</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">else</span>\n  Plug <span class="token string">\'Shougo/defx.nvim\'</span>\n  Plug <span class="token string">\'roxma/nvim-yarp\'</span>\n  Plug <span class="token string">\'roxma/vim-hug-neovim-rpc\'</span>\n<span class="token keyword">endif</span></code>',x(s,xs,u),x(s,Es,u),E(Es,bs),E(Es,Is),E(Is,Ts),E(Es,_s),E(Es,Ps),E(Ps,Ds),E(Es,As),x(s,Ls,u),x(s,js,u),E(js,Rs),E(Rs,Ns),x(s,Cs,u),x(s,Ss,u),E(Ss,Hs),E(Hs,Ms),x(s,$s,u),x(s,Os,u),E(Os,Ys),E(Os,Gs),E(Gs,qs),E(Os,Us),x(s,zs,u),x(s,Fs,u),Fs.innerHTML='<code class="language-vim">nnoremap <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">n</span><span class="token operator">></span> <span class="token punctuation">:</span>Defx</code>',x(s,Ks,u),x(s,Ws,u),E(Ws,Bs),E(Ws,Vs),E(Vs,Zs),E(Ws,Js),x(s,Qs,u),x(s,Xs,u),E(Xs,sn),E(Xs,nn),E(nn,an),E(Xs,tn),x(s,on,u),x(s,en,u),en.innerHTML='<code class="language-vim"><span class="token builtin">autocmd</span> FileType defx <span class="token keyword">call</span> s<span class="token punctuation">:</span><span class="token function">defx_my_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">defx_my_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n  <span class="token comment">" Define mappings</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>CR<span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'drop\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">c</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'copy\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">m</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'move\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">p</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'paste\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">l</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> E defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">,</span> <span class="token string">\'vsplit\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">P</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">,</span> <span class="token string">\'pedit\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">o</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'open_or_close_tree\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> K defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'new_directory\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">N</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'new_file\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> M defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'new_multiple_files\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> C defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'toggle_columns\'</span><span class="token punctuation">,</span> <span class="token string">\'mark:indent:icon:filename:type:size:time\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> S defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'toggle_sort\'</span><span class="token punctuation">,</span> <span class="token string">\'time\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">d</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'remove\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">r</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'rename\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">!</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'execute_command\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">x</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'execute_system\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> yy defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'yank_path\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">.</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'toggle_ignored_files\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token punctuation">;</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'repeat\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">h</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'cd\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'..\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> ~ defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'cd\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">q</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'quit\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>Space<span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'toggle_select\'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">\'j\'</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">*</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'toggle_select_all\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">j</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">\'$\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">\'gg\'</span> <span class="token punctuation">:</span> <span class="token string">\'j\'</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">k</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">\'G\'</span> <span class="token punctuation">:</span> <span class="token string">\'k\'</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">l</span><span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'redraw\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span>g<span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'print\'</span><span class="token punctuation">)</span>\n  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">cd</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">\'change_vim_cwd\'</span><span class="token punctuation">)</span>\n<span class="token keyword">endfunction</span></code>',x(s,pn,u),x(s,rn,u),E(rn,cn),x(s,ln,u),x(s,kn,u),E(kn,un),E(un,fn),x(s,dn,u),x(s,hn,u),E(hn,gn),x(s,mn,u),x(s,yn,u),yn.innerHTML='<code class="language-vim"><span class="token comment">" Set appearance</span>\n<span class="token keyword">call</span> defx#custom#<span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'_\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n       <span class="token string">\'winwidth\'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n       <span class="token string">\'split\'</span><span class="token punctuation">:</span> <span class="token string">\'vertical\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'direction\'</span><span class="token punctuation">:</span> <span class="token string">\'topleft\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'show_ignored_files\'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n       <span class="token string">\'buffer_name\'</span><span class="token punctuation">:</span> <span class="token string">\'defxplorer\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'toggle\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n       <span class="token string">\'resume\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',x(s,wn,u),x(s,vn,u),E(vn,xn),x(s,En,u),x(s,bn,u),E(bn,In),E(In,Tn),E(bn,_n),x(s,Pn,u),x(s,Dn,u),E(Dn,An),E(An,Ln),E(Dn,jn),x(s,Rn,u),x(s,Nn,u),E(Nn,Cn),E(Cn,Sn),E(Nn,Hn),E(Nn,Mn),E(Mn,$n),E(Nn,On),x(s,Yn,u),x(s,Gn,u),E(Gn,qn),E(qn,Un),E(Gn,zn),x(s,Fn,u),x(s,Kn,u),E(Kn,Wn),E(Wn,Bn),E(Kn,Vn),x(s,Zn,u),x(s,Jn,u),E(Jn,Qn),E(Qn,Xn),E(Jn,sa),x(s,na,u),x(s,aa,u),E(aa,ta),E(ta,oa),E(aa,ea),x(s,pa,u),x(s,ra,u),E(ra,ca),x(s,la,u),x(s,ia,u),E(ia,ka),x(s,fa,u),x(s,da,u),E(da,ha),x(s,ga,u),x(s,ma,u),E(ma,ya),E(ya,wa),x(s,va,u),x(s,xa,u),E(xa,Ea),x(s,ba,u),x(s,Ia,u),E(Ia,Ta),E(Ia,_a),E(_a,Pa),E(Ia,Da),x(s,Aa,u),x(s,La,u),La.innerHTML='<code class="language-vim">Plug <span class="token string">\'kristijanhusak/defx-icons\'</span></code>',x(s,ja,u),x(s,Ra,u),E(Ra,Na),E(Ra,Ca),E(Ca,Sa),E(Ra,Ha),E(Ra,Ma),E(Ma,$a),E(Ra,Oa),x(s,Ya,u),x(s,Ga,u),Ga.innerHTML='<code class="language-vim"><span class="token comment">" Set appearance</span>\n<span class="token keyword">call</span> defx#custom#<span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'_\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n       <span class="token string">\'winwidth\'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n       <span class="token string">\'split\'</span><span class="token punctuation">:</span> <span class="token string">\'vertical\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'direction\'</span><span class="token punctuation">:</span> <span class="token string">\'topleft\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'show_ignored_files\'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n       <span class="token string">\'buffer_name\'</span><span class="token punctuation">:</span> <span class="token string">\'defxplorer\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'toggle\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n       <span class="token string">\'columns\'</span><span class="token punctuation">:</span> <span class="token string">\'icons:filename\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'resume\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',x(s,qa,u),x(s,Ua,u),E(Ua,za),x(s,Fa,u),x(s,Ka,u),Ka.innerHTML='<code class="language-vim"><span class="token keyword">call</span> defx#custom#<span class="token function">column</span><span class="token punctuation">(</span><span class="token string">\'icon\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n       <span class="token string">\'directory_icon\'</span><span class="token punctuation">:</span> <span class="token string">\'▸\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'opened_icon\'</span><span class="token punctuation">:</span> <span class="token string">\'▾\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',x(s,Wa,u),x(s,Ba,u),E(Ba,Va),x(s,Za,u),x(s,Ja,u),Ja.innerHTML='<code class="language-vim"><span class="token comment">" Set appearance</span>\n<span class="token keyword">call</span> defx#custom#<span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'_\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n       <span class="token string">\'winwidth\'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n       <span class="token string">\'split\'</span><span class="token punctuation">:</span> <span class="token string">\'vertical\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'direction\'</span><span class="token punctuation">:</span> <span class="token string">\'topleft\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'show_ignored_files\'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n       <span class="token string">\'buffer_name\'</span><span class="token punctuation">:</span> <span class="token string">\'defxplorer\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'toggle\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n       <span class="token string">\'columns\'</span><span class="token punctuation">:</span> <span class="token string">\'icon:indent:icons:filename\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'resume\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',x(s,Qa,u),x(s,Xa,u),E(Xa,st),x(s,nt,u),x(s,at,u),E(at,tt),E(at,et),E(at,pt),x(s,ct,u),x(s,lt,u),E(lt,it),E(it,kt),x(s,ut,u),x(s,ft,u),E(ft,dt)},p:b,d(s){s&&y(n),s&&y(o),s&&y(e),s&&y(Z),s&&y(J),s&&y(ss),s&&y(ns),s&&y(ls),s&&y(is),s&&y(fs),s&&y(ds),s&&y(ws),s&&y(vs),s&&y(xs),s&&y(Es),s&&y(Ls),s&&y(js),s&&y(Cs),s&&y(Ss),s&&y($s),s&&y(Os),s&&y(zs),s&&y(Fs),s&&y(Ks),s&&y(Ws),s&&y(Qs),s&&y(Xs),s&&y(on),s&&y(en),s&&y(pn),s&&y(rn),s&&y(ln),s&&y(kn),s&&y(dn),s&&y(hn),s&&y(mn),s&&y(yn),s&&y(wn),s&&y(vn),s&&y(En),s&&y(bn),s&&y(Pn),s&&y(Dn),s&&y(Rn),s&&y(Nn),s&&y(Yn),s&&y(Gn),s&&y(Fn),s&&y(Kn),s&&y(Zn),s&&y(Jn),s&&y(na),s&&y(aa),s&&y(pa),s&&y(ra),s&&y(la),s&&y(ia),s&&y(fa),s&&y(da),s&&y(ga),s&&y(ma),s&&y(va),s&&y(xa),s&&y(ba),s&&y(Ia),s&&y(Aa),s&&y(La),s&&y(ja),s&&y(Ra),s&&y(Ya),s&&y(Ga),s&&y(qa),s&&y(Ua),s&&y(Fa),s&&y(Ka),s&&y(Wa),s&&y(Ba),s&&y(Za),s&&y(Ja),s&&y(Qa),s&&y(Xa),s&&y(nt),s&&y(at),s&&y(ct),s&&y(lt),s&&y(ut),s&&y(ft)}}}function _(s){let n,a;const u=[P];let f={$$slots:{default:[T]},$$scope:{ctx:s}};for(let o=0;o<u.length;o+=1)f=t(f,u[o]);return n=new I({props:f}),{c(){o(n.$$.fragment)},l(s){e(n.$$.fragment,s)},m(s,t){p(n,s,t),a=!0},p(s,[a]){const t=0&a?r(u,[k(P)]):{};1&a&&(t.$$scope={dirty:a,ctx:s}),n.$set(t)},i(s){a||(c(n.$$.fragment,s),a=!0)},o(s){l(n.$$.fragment,s),a=!1},d(s){i(n,s)}}}const P={title:"Defx, A Dark Powered File Explorer",date:"2020-02-22T00:00:00.000Z",desc:"Trying out yet another plugin for neovim called defx.nvim, it's dark powered! At least that's what it says on the readme",tags:["neovim"]};export default class extends s{constructor(s){super(),n(this,s,null,_,a,{})}}export{P as metadata};
