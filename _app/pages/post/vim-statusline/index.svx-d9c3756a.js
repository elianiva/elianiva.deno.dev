import{S as n,i as s,s as a,o as t,p as e,r as o,u as p,v as l,x as c,y as i,z as r,w as u,e as k,t as d,a as h,f,g as m,k as g,d as y,c as w,h as v,j as b,l as E}from"../../../chunks/stores-7ca13020.js";import{P as I}from"../../../chunks/post-14e8d485.js";import{U as L}from"../../../chunks/Update-70845eca.js";import"../../../chunks/ProgressButton-549bf321.js";import"../../../chunks/theme-0c5a7997.js";function M(n){let s,a,t,e;return{c(){s=k("p"),a=d("I wrote a better version of this in Lua which you can read "),t=k("a"),e=d("here"),this.h()},l(n){s=f(n,"P",{});var o=m(s);a=g(o,"I wrote a better version of this in Lua which you can read "),t=f(o,"A",{href:!0,rel:!0});var p=m(t);e=g(p,"here"),p.forEach(y),o.forEach(y),this.h()},h(){v(t,"href","https://elianiva.me/post/neovim-lua-statusline"),v(t,"rel","nofollow")},m(n,o){b(n,s,o),E(s,a),E(s,t),E(t,e)},d(n){n&&y(s)}}}function C(n){let s,a,t,e,o;return{c(){s=k("p"),a=d("Welp, I accidentally lost my old statusline because I "),t=k("code"),e=d("git push --force"),o=d(" the other day. Sorry :p")},l(n){s=f(n,"P",{});var p=m(s);a=g(p,"Welp, I accidentally lost my old statusline because I "),t=f(p,"CODE",{});var l=m(t);e=g(l,"git push --force"),l.forEach(y),o=g(p," the other day. Sorry :p"),p.forEach(y)},m(n,p){b(n,s,p),E(s,a),E(s,t),E(t,e),E(s,o)},d(n){n&&y(s)}}}function P(n){let s,a,t,l,u,I,P,A,T,B,$,H,S,x,F,R,G,D,j,V,W,q,N,O,_,Y,U,J,z,Z,K,Q,X,nn,sn,an,tn,en,on,pn,ln,cn,rn,un,kn,dn,hn,fn,mn,gn,yn,wn,vn,bn,En,In,Ln,Mn,Cn,Pn,An,Tn,Bn,$n,Hn,Sn,xn,Fn,Rn,Gn,Dn,jn,Vn,Wn,qn,Nn,On,_n,Yn,Un,Jn,zn,Zn,Kn,Qn,Xn,ns,ss,as,ts,es,os,ps,ls,cs,is,rs,us,ks,ds,hs,fs,ms,gs,ys,ws,vs,bs,Es,Is,Ls,Ms,Cs,Ps,As,Ts,Bs,$s,Hs,Ss,xs,Fs,Rs,Gs,Ds,js,Vs,Ws,qs,Ns,Os,_s,Ys,Us,Js,zs,Zs,Ks,Qs,Xs,na,sa,aa,ta,ea,oa,pa,la,ca,ia,ra,ua,ka,da,ha,fa,ma,ga,ya,wa,va,ba,Ea,Ia,La,Ma,Ca,Pa,Aa,Ta,Ba,$a,Ha,Sa,xa,Fa,Ra,Ga,Da,ja,Va,Wa,qa,Na,Oa,_a,Ya,Ua,Ja,za,Za,Ka,Qa,Xa,nt,st,at,tt,et,ot,pt,lt,ct,it,rt,ut,kt,dt,ht,ft,mt,gt,yt,wt,vt,bt,Et,It,Lt,Mt,Ct,Pt,At,Tt,Bt,$t,Ht,St,xt,Ft,Rt,Gt,Dt,jt,Vt,Wt,qt,Nt,Ot,_t,Yt,Ut,Jt,zt,Zt,Kt,Qt,Xt,ne,se,ae,te,ee,oe,pe,le,ce,ie,re,ue,ke,de,he,fe,me,ge,ye,we,ve,be,Ee,Ie,Le,Me,Ce,Pe,Ae,Te,Be,$e,He,Se,xe,Fe,Re,Ge,De,je,Ve,We,qe,Ne,Oe,_e,Ye,Ue,Je,ze,Ze,Ke,Qe,Xe,no,so,ao,to,eo,oo,po,lo,co,io,ro,uo,ko,ho,fo,mo,go,yo,wo,vo,bo,Eo,Io,Lo,Mo,Co,Po,Ao,To,Bo,$o,Ho,So,xo,Fo,Ro,Go,Do,jo,Vo;return zn=new L({props:{date:"29-11-2020",$$slots:{default:[M]},$$scope:{ctx:n}}}),Ho=new L({props:{date:"15-10-2020",$$slots:{default:[C]},$$scope:{ctx:n}}}),{c(){s=k("h1"),a=k("a"),t=d("Table of Content"),l=h(),u=k("ul"),I=k("li"),P=k("p"),A=k("a"),T=d("Introduction"),B=h(),$=k("li"),H=k("p"),S=k("a"),x=d("Prerequisite"),F=h(),R=k("li"),G=k("p"),D=k("a"),j=d("Creating the statusline"),V=h(),W=k("ul"),q=k("li"),N=k("a"),O=d("Deprecating the old one"),_=h(),Y=k("li"),U=k("a"),J=d("Making the structure"),z=h(),Z=k("li"),K=k("a"),Q=d("Base colour"),X=h(),nn=k("li"),sn=k("a"),an=d("Modes indicator"),tn=h(),en=k("li"),on=k("a"),pn=d("Git integration"),ln=h(),cn=k("li"),rn=k("a"),un=d("Right Section"),kn=h(),dn=k("li"),hn=k("a"),fn=d("Filename"),mn=h(),gn=k("li"),yn=k("a"),wn=d("Filetype"),vn=h(),bn=k("li"),En=k("a"),In=d("Line Number"),Ln=h(),Mn=k("li"),Cn=k("a"),Pn=d("Inactive Line"),An=h(),Tn=k("li"),Bn=k("p"),$n=k("a"),Hn=d("Apply the statusline"),Sn=h(),xn=k("li"),Fn=k("p"),Rn=k("a"),Gn=d("Conclusion"),Dn=h(),jn=k("h1"),Vn=k("a"),Wn=d("Introduction"),qn=h(),Nn=k("p"),On=d("Hi everyone! In this post, I will talk about making your own custom statusline in vim. There are a lot of plugins out there that makes vim statusline looks way better and works out of the box. But, if you make your own, that means you lose one dependency and it feels good to make your own custom one. That makes it unique compared to anyone else."),_n=h(),Yn=k("p"),Un=d("The reason why I made this post is also because I want to change my statusline. While my current statusline looks eye candy (to me at least), it takes a whole lot of space. So, I want to simplifiy it and why not make that process as a post. Let’s get into it!"),Jn=h(),e(zn.$$.fragment),Zn=h(),Kn=k("h1"),Qn=k("a"),Xn=d("Prerequisite"),ns=h(),ss=k("p"),as=d("First of all, we need to prepare a few things :"),ts=h(),es=k("ul"),os=k("li"),ps=d("(Neo)Vim Text Editor (Duh, isn’t that obvious?)."),ls=h(),cs=k("li"),is=d("Terminal that is capable of true colours"),rs=h(),us=k("li"),ks=d("Patience"),ds=h(),hs=k("li"),fs=d("Googling skills incase something doesn’t work correctly"),ms=h(),gs=k("p"),ys=d("All is set, let’s actually make the statusline!"),ws=h(),vs=k("h1"),bs=k("a"),Es=d("Creating the statusline"),Is=h(),Ls=k("h2"),Ms=k("a"),Cs=d("Deprecating the old one"),Ps=h(),As=k("p"),Ts=d("First thing first, I removed my old statusline. You don’t need to do it if you don’t have it already. If you are curious how my statusline looks, let me show you."),Bs=h(),$s=k("p"),Hs=k("img"),xs=h(),Fs=k("p"),Rs=d("As you can see, it looks like a capsule for each module. I took the design from a reddit post that I’ve found the other day. "),Gs=k("a"),Ds=d("Here it is"),js=d(". It looks sick when I saw it for the first time. But, as time passes I started to think that it wasted quite a lot of space. So I decided to change it"),Vs=h(),Ws=k("h2"),qs=k("a"),Ns=d("Making the structure"),Os=h(),_s=k("p"),Ys=d("Let’s start with the structure of the statusline. Create 2 functions for your statusline as so."),Us=h(),Js=k("pre"),zs=h(),Zs=k("h2"),Ks=k("a"),Qs=d("Base colour"),Xs=h(),na=k("p"),sa=d("Next, we’ll define the base colour for the background. I chose a lighter colour for the background so it stands out. To add a base colour, you need to add "),aa=k("code"),ta=d("%#Base#"),ea=d(" where "),oa=k("code"),pa=d("Base"),la=d(" is the name of the color highlight. To set a colour highlight, you’d do:"),ca=h(),ia=k("pre"),ra=h(),ua=k("p"),ka=d("You can freely change the colours as you like. The colour are set, let’s apply it to our statusline. To apply it, you’d do:"),da=h(),ha=k("pre"),fa=h(),ma=k("h2"),ga=k("a"),ya=d("Modes indicator"),wa=h(),va=k("p"),ba=d("Let’s make a module for out statusline because so far, what we did is just setting the background colour. The most importan part for me is the indicator for the mode that you’re currently in. To do that, you’d add:"),Ea=h(),Ia=k("pre"),La=h(),Ma=k("p"),Ca=d("Just calm down, don’t get intimidated by the code. It looks like much, but it’s just a list to indicate what mode you’re currently in. Make sure you place that on top of the "),Pa=k("code"),Aa=d("ActiveLine"),Ta=d(" function. You don’t need to understand all of that. All you need to know is, "),Ba=k("em"),$a=d("It just works."),Ha=h(),Sa=k("p"),xa=d("Let’s add some colours for that module. It’s the same like before, you add "),Fa=k("code"),Ra=d("%#Mode#"),Ga=d(" where "),Da=k("code"),ja=d("Mode"),Va=d(" is the name for highlight group. Set the colour for the highlight as so:"),Wa=h(),qa=k("pre"),Na=h(),Oa=k("p"),_a=d("It will give the "),Ya=k("code"),Ua=d("Mode"),Ja=d(" module a blue background and a dark colour for the text. It will also make the text bold. Let’s ppply it to our statusline once again."),za=h(),Za=k("pre"),Ka=h(),Qa=k("h2"),Xa=k("a"),nt=d("Git integration"),st=h(),at=k("p"),tt=d("Being able to see your git branch on your statusline is great. So, let’s do that! First thing first, you’ll need some kind of git plugin to show the git status (I think it’s possible without it, but I’m not sure). I’ll use a vim plugin called "),et=k("a"),ot=d("vim-fugitive"),pt=d(". It’s not only for this reason, it has a lot of useful command too!"),lt=h(),ct=k("p"),it=d("Let’s create the module for that. First thing first, the branch name that you’re currently in."),rt=h(),ut=k("pre"),kt=h(),dt=k("p"),ht=d("Create the colours for that module and apply it by doing so:"),ft=h(),mt=k("pre"),gt=h(),yt=k("h2"),wt=k("a"),vt=d("Right Section"),bt=h(),Et=k("p"),It=d("After creating the left section, let’s move to the right part. To move to the right part of the statusline, what you’d do is to add:"),Lt=h(),Mt=k("pre"),Ct=h(),Pt=k("p"),At=d("What that block code is doing is:"),Tt=h(),Bt=k("ul"),$t=k("li"),Ht=d("It normalize the colour of the background"),St=h(),xt=k("li"),Ft=d("Move the next module to the right"),Rt=h(),Gt=k("h2"),Dt=k("a"),jt=d("Filename"),Vt=h(),Wt=k("p"),qt=d("I want to make the filename module as the first module for the right section. I also added the feature where if your file isn’t saved yet, it’ll give a star symbol at the end of the filename, change the colour to white and make it bold."),Nt=h(),Ot=k("pre"),_t=h(),Yt=k("p"),Ut=d("Then we’ll add it to our previous statusline like we did for the other modules."),Jt=h(),zt=k("pre"),Zt=h(),Kt=k("h2"),Qt=k("a"),Xt=d("Filetype"),ne=h(),se=k("p"),ae=d("Similar to "),te=k("code"),ee=d("filename"),oe=d(", filetype module only display a filetype from that file. You know, like "),pe=k("code"),le=d("javascript"),ce=d(", "),ie=k("code"),re=d("html"),ue=d(", "),ke=k("code"),de=d("markdown"),he=d(", etc. Let’s make that module."),fe=h(),me=k("pre"),ge=h(),ye=k("p"),we=d("After making it, let’s apply it to our statusline."),ve=h(),be=k("pre"),Ee=h(),Ie=k("p"),Le=d("The reason why I use a function just to display a filetype is to make all of the letter lowercase and display "),Me=k("code"),Ce=d("-"),Pe=d(" when the filetype is unidentified."),Ae=h(),Te=k("h2"),Be=k("a"),$e=d("Line Number"),He=h(),Se=k("p"),xe=d("Last but not least, it’s the line number and line column module. It’s used to display the line number that you’re currently in. It’s a really simple module. Let’s make that!"),Fe=h(),Re=k("pre"),Ge=h(),De=k("h2"),je=k("a"),Ve=d("Inactive Line"),We=h(),qe=k("p"),Ne=d("We’ve made the statusline for the active window, let’s make one for the inactive window. It’s simple."),Oe=h(),_e=k("pre"),Ye=h(),Ue=k("h1"),Je=k("a"),ze=d("Apply the statusline"),Ze=h(),Ke=k("p"),Qe=d("Let’s see what we’ve made so far."),Xe=h(),no=k("pre"),so=h(),ao=k("p"),to=d("As you can see, currently we didn’t do anything to our current statusline because we haven’t apply it yet. So, let’s apply it!"),eo=h(),oo=k("pre"),po=h(),lo=k("p"),co=d("We use autocmd to make the statusline changed automatically based of the current window status. Make sure you’ve set "),io=k("code"),ro=d("laststatus"),uo=d(" to 2 so your vim will always display the statusline. If you don’t know what I mean, add"),ko=h(),ho=k("pre"),fo=h(),mo=k("p"),go=d("to your .vimrc or init.vim"),yo=h(),wo=k("p"),vo=d("Here’s what it looks like when it’s finished"),bo=h(),Eo=k("p"),Io=k("img"),Mo=h(),Co=k("p"),Po=d("It doesn’t look like an eye candy, but it doesn’t take a whole lotta space.\nIf you want the old one, "),Ao=k("a"),To=d("Here it is"),Bo=d(". Just take what you need from that file, it’s not that hard to understand ;)"),$o=h(),e(Ho.$$.fragment),So=h(),xo=k("h1"),Fo=k("a"),Ro=d("Conclusion"),Go=h(),Do=k("p"),jo=d("Making a custom statusline of your own is quite a lengthy process. But, I think it’s a fun process nonetheless. If you want to tinker with it even more, just do it! It’s a repetitive process once you know the basic. I’m not a vim expert myself, so sorry if I’ve missed something in this post. Alright then, I’m gonna end this post right here. If you have any question regarding to this post, feel free to hit me up! See ya!"),this.h()},l(n){s=f(n,"H1",{id:!0});var e=m(s);a=f(e,"A",{href:!0});var p=m(a);t=g(p,"Table of Content"),p.forEach(y),e.forEach(y),l=w(n),u=f(n,"UL",{});var c=m(u);I=f(c,"LI",{});var i=m(I);P=f(i,"P",{});var r=m(P);A=f(r,"A",{href:!0});var k=m(A);T=g(k,"Introduction"),k.forEach(y),r.forEach(y),i.forEach(y),B=w(c),$=f(c,"LI",{});var d=m($);H=f(d,"P",{});var h=m(H);S=f(h,"A",{href:!0});var v=m(S);x=g(v,"Prerequisite"),v.forEach(y),h.forEach(y),d.forEach(y),F=w(c),R=f(c,"LI",{});var b=m(R);G=f(b,"P",{});var E=m(G);D=f(E,"A",{href:!0});var L=m(D);j=g(L,"Creating the statusline"),L.forEach(y),E.forEach(y),V=w(b),W=f(b,"UL",{});var M=m(W);q=f(M,"LI",{});var C=m(q);N=f(C,"A",{href:!0});var Ss=m(N);O=g(Ss,"Deprecating the old one"),Ss.forEach(y),C.forEach(y),_=w(M),Y=f(M,"LI",{});var Lo=m(Y);U=f(Lo,"A",{href:!0});var Vo=m(U);J=g(Vo,"Making the structure"),Vo.forEach(y),Lo.forEach(y),z=w(M),Z=f(M,"LI",{});var Wo=m(Z);K=f(Wo,"A",{href:!0});var qo=m(K);Q=g(qo,"Base colour"),qo.forEach(y),Wo.forEach(y),X=w(M),nn=f(M,"LI",{});var No=m(nn);sn=f(No,"A",{href:!0});var Oo=m(sn);an=g(Oo,"Modes indicator"),Oo.forEach(y),No.forEach(y),tn=w(M),en=f(M,"LI",{});var _o=m(en);on=f(_o,"A",{href:!0});var Yo=m(on);pn=g(Yo,"Git integration"),Yo.forEach(y),_o.forEach(y),ln=w(M),cn=f(M,"LI",{});var Uo=m(cn);rn=f(Uo,"A",{href:!0});var Jo=m(rn);un=g(Jo,"Right Section"),Jo.forEach(y),Uo.forEach(y),kn=w(M),dn=f(M,"LI",{});var zo=m(dn);hn=f(zo,"A",{href:!0});var Zo=m(hn);fn=g(Zo,"Filename"),Zo.forEach(y),zo.forEach(y),mn=w(M),gn=f(M,"LI",{});var Ko=m(gn);yn=f(Ko,"A",{href:!0});var Qo=m(yn);wn=g(Qo,"Filetype"),Qo.forEach(y),Ko.forEach(y),vn=w(M),bn=f(M,"LI",{});var Xo=m(bn);En=f(Xo,"A",{href:!0});var np=m(En);In=g(np,"Line Number"),np.forEach(y),Xo.forEach(y),Ln=w(M),Mn=f(M,"LI",{});var sp=m(Mn);Cn=f(sp,"A",{href:!0});var ap=m(Cn);Pn=g(ap,"Inactive Line"),ap.forEach(y),sp.forEach(y),M.forEach(y),b.forEach(y),An=w(c),Tn=f(c,"LI",{});var tp=m(Tn);Bn=f(tp,"P",{});var ep=m(Bn);$n=f(ep,"A",{href:!0});var op=m($n);Hn=g(op,"Apply the statusline"),op.forEach(y),ep.forEach(y),tp.forEach(y),Sn=w(c),xn=f(c,"LI",{});var pp=m(xn);Fn=f(pp,"P",{});var lp=m(Fn);Rn=f(lp,"A",{href:!0});var cp=m(Rn);Gn=g(cp,"Conclusion"),cp.forEach(y),lp.forEach(y),pp.forEach(y),c.forEach(y),Dn=w(n),jn=f(n,"H1",{id:!0});var ip=m(jn);Vn=f(ip,"A",{href:!0});var rp=m(Vn);Wn=g(rp,"Introduction"),rp.forEach(y),ip.forEach(y),qn=w(n),Nn=f(n,"P",{});var up=m(Nn);On=g(up,"Hi everyone! In this post, I will talk about making your own custom statusline in vim. There are a lot of plugins out there that makes vim statusline looks way better and works out of the box. But, if you make your own, that means you lose one dependency and it feels good to make your own custom one. That makes it unique compared to anyone else."),up.forEach(y),_n=w(n),Yn=f(n,"P",{});var kp=m(Yn);Un=g(kp,"The reason why I made this post is also because I want to change my statusline. While my current statusline looks eye candy (to me at least), it takes a whole lot of space. So, I want to simplifiy it and why not make that process as a post. Let’s get into it!"),kp.forEach(y),Jn=w(n),o(zn.$$.fragment,n),Zn=w(n),Kn=f(n,"H1",{id:!0});var dp=m(Kn);Qn=f(dp,"A",{href:!0});var hp=m(Qn);Xn=g(hp,"Prerequisite"),hp.forEach(y),dp.forEach(y),ns=w(n),ss=f(n,"P",{});var fp=m(ss);as=g(fp,"First of all, we need to prepare a few things :"),fp.forEach(y),ts=w(n),es=f(n,"UL",{});var mp=m(es);os=f(mp,"LI",{});var gp=m(os);ps=g(gp,"(Neo)Vim Text Editor (Duh, isn’t that obvious?)."),gp.forEach(y),ls=w(mp),cs=f(mp,"LI",{});var yp=m(cs);is=g(yp,"Terminal that is capable of true colours"),yp.forEach(y),rs=w(mp),us=f(mp,"LI",{});var wp=m(us);ks=g(wp,"Patience"),wp.forEach(y),ds=w(mp),hs=f(mp,"LI",{});var vp=m(hs);fs=g(vp,"Googling skills incase something doesn’t work correctly"),vp.forEach(y),mp.forEach(y),ms=w(n),gs=f(n,"P",{});var bp=m(gs);ys=g(bp,"All is set, let’s actually make the statusline!"),bp.forEach(y),ws=w(n),vs=f(n,"H1",{id:!0});var Ep=m(vs);bs=f(Ep,"A",{href:!0});var Ip=m(bs);Es=g(Ip,"Creating the statusline"),Ip.forEach(y),Ep.forEach(y),Is=w(n),Ls=f(n,"H2",{id:!0});var Lp=m(Ls);Ms=f(Lp,"A",{href:!0});var Mp=m(Ms);Cs=g(Mp,"Deprecating the old one"),Mp.forEach(y),Lp.forEach(y),Ps=w(n),As=f(n,"P",{});var Cp=m(As);Ts=g(Cp,"First thing first, I removed my old statusline. You don’t need to do it if you don’t have it already. If you are curious how my statusline looks, let me show you."),Cp.forEach(y),Bs=w(n),$s=f(n,"P",{});var Pp=m($s);Hs=f(Pp,"IMG",{src:!0,alt:!0}),Pp.forEach(y),xs=w(n),Fs=f(n,"P",{});var Ap=m(Fs);Rs=g(Ap,"As you can see, it looks like a capsule for each module. I took the design from a reddit post that I’ve found the other day. "),Gs=f(Ap,"A",{href:!0,rel:!0});var Tp=m(Gs);Ds=g(Tp,"Here it is"),Tp.forEach(y),js=g(Ap,". It looks sick when I saw it for the first time. But, as time passes I started to think that it wasted quite a lot of space. So I decided to change it"),Ap.forEach(y),Vs=w(n),Ws=f(n,"H2",{id:!0});var Bp=m(Ws);qs=f(Bp,"A",{href:!0});var $p=m(qs);Ns=g($p,"Making the structure"),$p.forEach(y),Bp.forEach(y),Os=w(n),_s=f(n,"P",{});var Hp=m(_s);Ys=g(Hp,"Let’s start with the structure of the statusline. Create 2 functions for your statusline as so."),Hp.forEach(y),Us=w(n),Js=f(n,"PRE",{class:!0}),m(Js).forEach(y),zs=w(n),Zs=f(n,"H2",{id:!0});var Sp=m(Zs);Ks=f(Sp,"A",{href:!0});var xp=m(Ks);Qs=g(xp,"Base colour"),xp.forEach(y),Sp.forEach(y),Xs=w(n),na=f(n,"P",{});var Fp=m(na);sa=g(Fp,"Next, we’ll define the base colour for the background. I chose a lighter colour for the background so it stands out. To add a base colour, you need to add "),aa=f(Fp,"CODE",{});var Rp=m(aa);ta=g(Rp,"%#Base#"),Rp.forEach(y),ea=g(Fp," where "),oa=f(Fp,"CODE",{});var Gp=m(oa);pa=g(Gp,"Base"),Gp.forEach(y),la=g(Fp," is the name of the color highlight. To set a colour highlight, you’d do:"),Fp.forEach(y),ca=w(n),ia=f(n,"PRE",{class:!0}),m(ia).forEach(y),ra=w(n),ua=f(n,"P",{});var Dp=m(ua);ka=g(Dp,"You can freely change the colours as you like. The colour are set, let’s apply it to our statusline. To apply it, you’d do:"),Dp.forEach(y),da=w(n),ha=f(n,"PRE",{class:!0}),m(ha).forEach(y),fa=w(n),ma=f(n,"H2",{id:!0});var jp=m(ma);ga=f(jp,"A",{href:!0});var Vp=m(ga);ya=g(Vp,"Modes indicator"),Vp.forEach(y),jp.forEach(y),wa=w(n),va=f(n,"P",{});var Wp=m(va);ba=g(Wp,"Let’s make a module for out statusline because so far, what we did is just setting the background colour. The most importan part for me is the indicator for the mode that you’re currently in. To do that, you’d add:"),Wp.forEach(y),Ea=w(n),Ia=f(n,"PRE",{class:!0}),m(Ia).forEach(y),La=w(n),Ma=f(n,"P",{});var qp=m(Ma);Ca=g(qp,"Just calm down, don’t get intimidated by the code. It looks like much, but it’s just a list to indicate what mode you’re currently in. Make sure you place that on top of the "),Pa=f(qp,"CODE",{});var Np=m(Pa);Aa=g(Np,"ActiveLine"),Np.forEach(y),Ta=g(qp," function. You don’t need to understand all of that. All you need to know is, "),Ba=f(qp,"EM",{});var Op=m(Ba);$a=g(Op,"It just works."),Op.forEach(y),qp.forEach(y),Ha=w(n),Sa=f(n,"P",{});var _p=m(Sa);xa=g(_p,"Let’s add some colours for that module. It’s the same like before, you add "),Fa=f(_p,"CODE",{});var Yp=m(Fa);Ra=g(Yp,"%#Mode#"),Yp.forEach(y),Ga=g(_p," where "),Da=f(_p,"CODE",{});var Up=m(Da);ja=g(Up,"Mode"),Up.forEach(y),Va=g(_p," is the name for highlight group. Set the colour for the highlight as so:"),_p.forEach(y),Wa=w(n),qa=f(n,"PRE",{class:!0}),m(qa).forEach(y),Na=w(n),Oa=f(n,"P",{});var Jp=m(Oa);_a=g(Jp,"It will give the "),Ya=f(Jp,"CODE",{});var zp=m(Ya);Ua=g(zp,"Mode"),zp.forEach(y),Ja=g(Jp," module a blue background and a dark colour for the text. It will also make the text bold. Let’s ppply it to our statusline once again."),Jp.forEach(y),za=w(n),Za=f(n,"PRE",{class:!0}),m(Za).forEach(y),Ka=w(n),Qa=f(n,"H2",{id:!0});var Zp=m(Qa);Xa=f(Zp,"A",{href:!0});var Kp=m(Xa);nt=g(Kp,"Git integration"),Kp.forEach(y),Zp.forEach(y),st=w(n),at=f(n,"P",{});var Qp=m(at);tt=g(Qp,"Being able to see your git branch on your statusline is great. So, let’s do that! First thing first, you’ll need some kind of git plugin to show the git status (I think it’s possible without it, but I’m not sure). I’ll use a vim plugin called "),et=f(Qp,"A",{href:!0,rel:!0});var Xp=m(et);ot=g(Xp,"vim-fugitive"),Xp.forEach(y),pt=g(Qp,". It’s not only for this reason, it has a lot of useful command too!"),Qp.forEach(y),lt=w(n),ct=f(n,"P",{});var nl=m(ct);it=g(nl,"Let’s create the module for that. First thing first, the branch name that you’re currently in."),nl.forEach(y),rt=w(n),ut=f(n,"PRE",{class:!0}),m(ut).forEach(y),kt=w(n),dt=f(n,"P",{});var sl=m(dt);ht=g(sl,"Create the colours for that module and apply it by doing so:"),sl.forEach(y),ft=w(n),mt=f(n,"PRE",{class:!0}),m(mt).forEach(y),gt=w(n),yt=f(n,"H2",{id:!0});var al=m(yt);wt=f(al,"A",{href:!0});var tl=m(wt);vt=g(tl,"Right Section"),tl.forEach(y),al.forEach(y),bt=w(n),Et=f(n,"P",{});var el=m(Et);It=g(el,"After creating the left section, let’s move to the right part. To move to the right part of the statusline, what you’d do is to add:"),el.forEach(y),Lt=w(n),Mt=f(n,"PRE",{class:!0}),m(Mt).forEach(y),Ct=w(n),Pt=f(n,"P",{});var ol=m(Pt);At=g(ol,"What that block code is doing is:"),ol.forEach(y),Tt=w(n),Bt=f(n,"UL",{});var pl=m(Bt);$t=f(pl,"LI",{});var ll=m($t);Ht=g(ll,"It normalize the colour of the background"),ll.forEach(y),St=w(pl),xt=f(pl,"LI",{});var cl=m(xt);Ft=g(cl,"Move the next module to the right"),cl.forEach(y),pl.forEach(y),Rt=w(n),Gt=f(n,"H2",{id:!0});var il=m(Gt);Dt=f(il,"A",{href:!0});var rl=m(Dt);jt=g(rl,"Filename"),rl.forEach(y),il.forEach(y),Vt=w(n),Wt=f(n,"P",{});var ul=m(Wt);qt=g(ul,"I want to make the filename module as the first module for the right section. I also added the feature where if your file isn’t saved yet, it’ll give a star symbol at the end of the filename, change the colour to white and make it bold."),ul.forEach(y),Nt=w(n),Ot=f(n,"PRE",{class:!0}),m(Ot).forEach(y),_t=w(n),Yt=f(n,"P",{});var kl=m(Yt);Ut=g(kl,"Then we’ll add it to our previous statusline like we did for the other modules."),kl.forEach(y),Jt=w(n),zt=f(n,"PRE",{class:!0}),m(zt).forEach(y),Zt=w(n),Kt=f(n,"H2",{id:!0});var dl=m(Kt);Qt=f(dl,"A",{href:!0});var hl=m(Qt);Xt=g(hl,"Filetype"),hl.forEach(y),dl.forEach(y),ne=w(n),se=f(n,"P",{});var fl=m(se);ae=g(fl,"Similar to "),te=f(fl,"CODE",{});var ml=m(te);ee=g(ml,"filename"),ml.forEach(y),oe=g(fl,", filetype module only display a filetype from that file. You know, like "),pe=f(fl,"CODE",{});var gl=m(pe);le=g(gl,"javascript"),gl.forEach(y),ce=g(fl,", "),ie=f(fl,"CODE",{});var yl=m(ie);re=g(yl,"html"),yl.forEach(y),ue=g(fl,", "),ke=f(fl,"CODE",{});var wl=m(ke);de=g(wl,"markdown"),wl.forEach(y),he=g(fl,", etc. Let’s make that module."),fl.forEach(y),fe=w(n),me=f(n,"PRE",{class:!0}),m(me).forEach(y),ge=w(n),ye=f(n,"P",{});var vl=m(ye);we=g(vl,"After making it, let’s apply it to our statusline."),vl.forEach(y),ve=w(n),be=f(n,"PRE",{class:!0}),m(be).forEach(y),Ee=w(n),Ie=f(n,"P",{});var bl=m(Ie);Le=g(bl,"The reason why I use a function just to display a filetype is to make all of the letter lowercase and display "),Me=f(bl,"CODE",{});var El=m(Me);Ce=g(El,"-"),El.forEach(y),Pe=g(bl," when the filetype is unidentified."),bl.forEach(y),Ae=w(n),Te=f(n,"H2",{id:!0});var Il=m(Te);Be=f(Il,"A",{href:!0});var Ll=m(Be);$e=g(Ll,"Line Number"),Ll.forEach(y),Il.forEach(y),He=w(n),Se=f(n,"P",{});var Ml=m(Se);xe=g(Ml,"Last but not least, it’s the line number and line column module. It’s used to display the line number that you’re currently in. It’s a really simple module. Let’s make that!"),Ml.forEach(y),Fe=w(n),Re=f(n,"PRE",{class:!0}),m(Re).forEach(y),Ge=w(n),De=f(n,"H2",{id:!0});var Cl=m(De);je=f(Cl,"A",{href:!0});var Pl=m(je);Ve=g(Pl,"Inactive Line"),Pl.forEach(y),Cl.forEach(y),We=w(n),qe=f(n,"P",{});var Al=m(qe);Ne=g(Al,"We’ve made the statusline for the active window, let’s make one for the inactive window. It’s simple."),Al.forEach(y),Oe=w(n),_e=f(n,"PRE",{class:!0}),m(_e).forEach(y),Ye=w(n),Ue=f(n,"H1",{id:!0});var Tl=m(Ue);Je=f(Tl,"A",{href:!0});var Bl=m(Je);ze=g(Bl,"Apply the statusline"),Bl.forEach(y),Tl.forEach(y),Ze=w(n),Ke=f(n,"P",{});var $l=m(Ke);Qe=g($l,"Let’s see what we’ve made so far."),$l.forEach(y),Xe=w(n),no=f(n,"PRE",{class:!0}),m(no).forEach(y),so=w(n),ao=f(n,"P",{});var Hl=m(ao);to=g(Hl,"As you can see, currently we didn’t do anything to our current statusline because we haven’t apply it yet. So, let’s apply it!"),Hl.forEach(y),eo=w(n),oo=f(n,"PRE",{class:!0}),m(oo).forEach(y),po=w(n),lo=f(n,"P",{});var Sl=m(lo);co=g(Sl,"We use autocmd to make the statusline changed automatically based of the current window status. Make sure you’ve set "),io=f(Sl,"CODE",{});var xl=m(io);ro=g(xl,"laststatus"),xl.forEach(y),uo=g(Sl," to 2 so your vim will always display the statusline. If you don’t know what I mean, add"),Sl.forEach(y),ko=w(n),ho=f(n,"PRE",{class:!0}),m(ho).forEach(y),fo=w(n),mo=f(n,"P",{});var Fl=m(mo);go=g(Fl,"to your .vimrc or init.vim"),Fl.forEach(y),yo=w(n),wo=f(n,"P",{});var Rl=m(wo);vo=g(Rl,"Here’s what it looks like when it’s finished"),Rl.forEach(y),bo=w(n),Eo=f(n,"P",{});var Gl=m(Eo);Io=f(Gl,"IMG",{src:!0,alt:!0}),Gl.forEach(y),Mo=w(n),Co=f(n,"P",{});var Dl=m(Co);Po=g(Dl,"It doesn’t look like an eye candy, but it doesn’t take a whole lotta space.\nIf you want the old one, "),Ao=f(Dl,"A",{href:!0,rel:!0});var jl=m(Ao);To=g(jl,"Here it is"),jl.forEach(y),Bo=g(Dl,". Just take what you need from that file, it’s not that hard to understand ;)"),Dl.forEach(y),$o=w(n),o(Ho.$$.fragment,n),So=w(n),xo=f(n,"H1",{id:!0});var Vl=m(xo);Fo=f(Vl,"A",{href:!0});var Wl=m(Fo);Ro=g(Wl,"Conclusion"),Wl.forEach(y),Vl.forEach(y),Go=w(n),Do=f(n,"P",{});var ql=m(Do);jo=g(ql,"Making a custom statusline of your own is quite a lengthy process. But, I think it’s a fun process nonetheless. If you want to tinker with it even more, just do it! It’s a repetitive process once you know the basic. I’m not a vim expert myself, so sorry if I’ve missed something in this post. Alright then, I’m gonna end this post right here. If you have any question regarding to this post, feel free to hit me up! See ya!"),ql.forEach(y),this.h()},h(){v(a,"href","#table-of-content"),v(s,"id","table-of-content"),v(A,"href","#introduction"),v(S,"href","#prerequisite"),v(D,"href","#creating-the-statusline"),v(N,"href","#deprecating-the-old-one"),v(U,"href","#making-the-structure"),v(K,"href","#base-colour"),v(sn,"href","#modes-indicator"),v(on,"href","#git-integration"),v(rn,"href","#right-section"),v(hn,"href","#filename"),v(yn,"href","#filetype"),v(En,"href","#line-number"),v(Cn,"href","#inactive-line"),v($n,"href","#apply-the-statusline"),v(Rn,"href","#conclusion"),v(Vn,"href","#introduction"),v(jn,"id","introduction"),v(Qn,"href","#prerequisite"),v(Kn,"id","prerequisite"),v(bs,"href","#creating-the-statusline"),v(vs,"id","creating-the-statusline"),v(Ms,"href","#deprecating-the-old-one"),v(Ls,"id","deprecating-the-old-one"),Hs.src!==(Ss="/assets/post/vim-statusline/old.png")&&v(Hs,"src","/assets/post/vim-statusline/old.png"),v(Hs,"alt","old statusline"),v(Gs,"href","https://www.reddit.com/r/vimporn/comments/efjcv0/gruvboxxx/?utm_source=share&utm_medium=web2x"),v(Gs,"rel","nofollow"),v(qs,"href","#making-the-structure"),v(Ws,"id","making-the-structure"),v(Js,"class","language-vim"),v(Ks,"href","#base-colour"),v(Zs,"id","base-colour"),v(ia,"class","language-vim"),v(ha,"class","language-vim"),v(ga,"href","#modes-indicator"),v(ma,"id","modes-indicator"),v(Ia,"class","language-vim"),v(qa,"class","language-vim"),v(Za,"class","language-vim"),v(Xa,"href","#git-integration"),v(Qa,"id","git-integration"),v(et,"href","https://github.com/tpope/vim-fugitive"),v(et,"rel","nofollow"),v(ut,"class","language-vim"),v(mt,"class","language-vim"),v(wt,"href","#right-section"),v(yt,"id","right-section"),v(Mt,"class","language-vim"),v(Dt,"href","#filename"),v(Gt,"id","filename"),v(Ot,"class","language-vim"),v(zt,"class","language-vim"),v(Qt,"href","#filetype"),v(Kt,"id","filetype"),v(me,"class","language-vim"),v(be,"class","language-vim"),v(Be,"href","#line-number"),v(Te,"id","line-number"),v(Re,"class","language-vim"),v(je,"href","#inactive-line"),v(De,"id","inactive-line"),v(_e,"class","language-vim"),v(Je,"href","#apply-the-statusline"),v(Ue,"id","apply-the-statusline"),v(no,"class","language-vim"),v(oo,"class","language-vim"),v(ho,"class","language-vim"),Io.src!==(Lo="/assets/post/vim-statusline/new.png")&&v(Io,"src","/assets/post/vim-statusline/new.png"),v(Io,"alt","new statusline"),v(Ao,"href","https://github.com/irrellia/dotfiles/blob/0c1ca17af07d7fdf72577a44d2a1e8bbab855d93/.config/nvim/modules/statusline.vim"),v(Ao,"rel","nofollow"),v(Fo,"href","#conclusion"),v(xo,"id","conclusion")},m(n,e){b(n,s,e),E(s,a),E(a,t),b(n,l,e),b(n,u,e),E(u,I),E(I,P),E(P,A),E(A,T),E(u,B),E(u,$),E($,H),E(H,S),E(S,x),E(u,F),E(u,R),E(R,G),E(G,D),E(D,j),E(R,V),E(R,W),E(W,q),E(q,N),E(N,O),E(W,_),E(W,Y),E(Y,U),E(U,J),E(W,z),E(W,Z),E(Z,K),E(K,Q),E(W,X),E(W,nn),E(nn,sn),E(sn,an),E(W,tn),E(W,en),E(en,on),E(on,pn),E(W,ln),E(W,cn),E(cn,rn),E(rn,un),E(W,kn),E(W,dn),E(dn,hn),E(hn,fn),E(W,mn),E(W,gn),E(gn,yn),E(yn,wn),E(W,vn),E(W,bn),E(bn,En),E(En,In),E(W,Ln),E(W,Mn),E(Mn,Cn),E(Cn,Pn),E(u,An),E(u,Tn),E(Tn,Bn),E(Bn,$n),E($n,Hn),E(u,Sn),E(u,xn),E(xn,Fn),E(Fn,Rn),E(Rn,Gn),b(n,Dn,e),b(n,jn,e),E(jn,Vn),E(Vn,Wn),b(n,qn,e),b(n,Nn,e),E(Nn,On),b(n,_n,e),b(n,Yn,e),E(Yn,Un),b(n,Jn,e),p(zn,n,e),b(n,Zn,e),b(n,Kn,e),E(Kn,Qn),E(Qn,Xn),b(n,ns,e),b(n,ss,e),E(ss,as),b(n,ts,e),b(n,es,e),E(es,os),E(os,ps),E(es,ls),E(es,cs),E(cs,is),E(es,rs),E(es,us),E(us,ks),E(es,ds),E(es,hs),E(hs,fs),b(n,ms,e),b(n,gs,e),E(gs,ys),b(n,ws,e),b(n,vs,e),E(vs,bs),E(bs,Es),b(n,Is,e),b(n,Ls,e),E(Ls,Ms),E(Ms,Cs),b(n,Ps,e),b(n,As,e),E(As,Ts),b(n,Bs,e),b(n,$s,e),E($s,Hs),b(n,xs,e),b(n,Fs,e),E(Fs,Rs),E(Fs,Gs),E(Gs,Ds),E(Fs,js),b(n,Vs,e),b(n,Ws,e),E(Ws,qs),E(qs,Ns),b(n,Os,e),b(n,_s,e),E(_s,Ys),b(n,Us,e),b(n,Js,e),Js.innerHTML='<code class="language-vim"><span class="token comment">" We\'ll use this for the active statusline</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" We\'ll use this for the inactive statusline</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,zs,e),b(n,Zs,e),E(Zs,Ks),E(Ks,Qs),b(n,Xs,e),b(n,na,e),E(na,sa),E(na,aa),E(aa,ta),E(na,ea),E(na,oa),E(oa,pa),E(na,la),b(n,ca,e),b(n,ia,e),ia.innerHTML='<code class="language-vim">  <span class="token builtin">hi</span> Base guibg<span class="token operator">=</span>#<span class="token number">212333</span> guifg<span class="token operator">=</span>#<span class="token number">212333</span></code>',b(n,ra,e),b(n,ua,e),E(ua,ka),b(n,da,e),b(n,ha,e),ha.innerHTML='<code class="language-vim"><span class="token comment">" We\'ll use this for the active statusline</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,fa,e),b(n,ma,e),E(ma,ga),E(ga,ya),b(n,wa,e),b(n,va,e),E(va,ba),b(n,Ea,e),b(n,Ia,e),Ia.innerHTML='<code class="language-vim">  <span class="token keyword">let</span> g<span class="token punctuation">:</span>currentmode<span class="token operator">=</span><span class="token punctuation">&#123;</span>\n      <span class="token string">\'n\'</span> <span class="token punctuation">:</span> <span class="token string">\'Normal \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'no\'</span> <span class="token punctuation">:</span> <span class="token string">\'N·Operator Pending \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'v\'</span> <span class="token punctuation">:</span> <span class="token string">\'Visual \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'V\'</span> <span class="token punctuation">:</span> <span class="token string">\'V·Line \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'^V\'</span> <span class="token punctuation">:</span> <span class="token string">\'V·Block \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'s\'</span> <span class="token punctuation">:</span> <span class="token string">\'Select \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'S\'</span><span class="token punctuation">:</span> <span class="token string">\'S·Line \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'^S\'</span> <span class="token punctuation">:</span> <span class="token string">\'S·Block \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'i\'</span> <span class="token punctuation">:</span> <span class="token string">\'Insert \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'R\'</span> <span class="token punctuation">:</span> <span class="token string">\'Replace \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'Rv\'</span> <span class="token punctuation">:</span> <span class="token string">\'V·Replace \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'c\'</span> <span class="token punctuation">:</span> <span class="token string">\'Command \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'cv\'</span> <span class="token punctuation">:</span> <span class="token string">\'Vim Ex \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'ce\'</span> <span class="token punctuation">:</span> <span class="token string">\'Ex \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'r\'</span> <span class="token punctuation">:</span> <span class="token string">\'Prompt \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'rm\'</span> <span class="token punctuation">:</span> <span class="token string">\'More \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'r?\'</span> <span class="token punctuation">:</span> <span class="token string">\'Confirm \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'!\'</span> <span class="token punctuation">:</span> <span class="token string">\'Shell \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'t\'</span> <span class="token punctuation">:</span> <span class="token string">\'Terminal \'</span>\n      <span class="token punctuation">&#125;</span>\n\n<span class="token comment">" Get current mode</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ModeCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent <span class="token operator">=</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>g<span class="token punctuation">:</span>currentmode<span class="token punctuation">,</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent<span class="token punctuation">,</span> <span class="token string">\'V·Block \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode <span class="token operator">=</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist\n    <span class="token keyword">return</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode\n<span class="token keyword">endfunction</span></code>',b(n,La,e),b(n,Ma,e),E(Ma,Ca),E(Ma,Pa),E(Pa,Aa),E(Ma,Ta),E(Ma,Ba),E(Ba,$a),b(n,Ha,e),b(n,Sa,e),E(Sa,xa),E(Sa,Fa),E(Fa,Ra),E(Sa,Ga),E(Sa,Da),E(Da,ja),E(Sa,Va),b(n,Wa,e),b(n,qa,e),qa.innerHTML='<code class="language-vim"><span class="token builtin">hi</span> Mode guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold</code>',b(n,Na,e),b(n,Oa,e),E(Oa,_a),E(Oa,Ya),E(Ya,Ua),E(Oa,Ja),b(n,za,e),b(n,Za,e),Za.innerHTML='<code class="language-vim"><span class="token comment">" We\'ll use this for the active statusline</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Current mode</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,Ka,e),b(n,Qa,e),E(Qa,Xa),E(Xa,nt),b(n,st,e),b(n,at,e),E(at,tt),E(at,et),E(et,ot),E(at,pt),b(n,lt,e),b(n,ct,e),E(ct,it),b(n,rt,e),b(n,ut,e),ut.innerHTML='<code class="language-vim"><span class="token comment">" Get current git branch</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">GitBranch</span><span class="token punctuation">(</span>git<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> a<span class="token punctuation">:</span>git <span class="token operator">==</span> <span class="token string">""</span>\n    <span class="token keyword">return</span> <span class="token string">\'-\'</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">:</span>git\n  <span class="token keyword">endif</span>\n<span class="token keyword">endfunction</span></code>',b(n,kt,e),b(n,dt,e),E(dt,ht),b(n,ft,e),b(n,mt,e),mt.innerHTML='<code class="language-vim"><span class="token builtin">hi</span> Git guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb\n\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Current mode</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>\n\n  <span class="token comment">" Current git branch</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,gt,e),b(n,yt,e),E(yt,wt),E(wt,vt),b(n,bt,e),b(n,Et,e),E(Et,It),b(n,Lt,e),b(n,Mt,e),Mt.innerHTML='<code class="language-vim"><span class="token comment">" Make the colour highlight normal</span>\n<span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n<span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span></code>',b(n,Ct,e),b(n,Pt,e),E(Pt,At),b(n,Tt,e),b(n,Bt,e),E(Bt,$t),E($t,Ht),E(Bt,St),E(Bt,xt),E(xt,Ft),b(n,Rt,e),b(n,Gt,e),E(Gt,Dt),E(Dt,jt),b(n,Vt,e),b(n,Wt,e),E(Wt,qt),b(n,Nt,e),b(n,Ot,e),Ot.innerHTML='<code class="language-vim"><span class="token comment">" Check modified status</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckMod</span><span class="token punctuation">(</span>modi<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> a<span class="token punctuation">:</span>modi <span class="token operator">==</span> <span class="token number">1</span>\n    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span> gui<span class="token operator">=</span>bold\n    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'%:t\'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string">\'*\'</span>\n  <span class="token keyword">else</span>\n    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'%:t\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">endif</span>\n<span class="token keyword">endfunction</span></code>',b(n,_t,e),b(n,Yt,e),E(Yt,Ut),b(n,Jt,e),b(n,zt,e),zt.innerHTML='<code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Current mode</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>\n\n  <span class="token comment">" Current git branch</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>\n\n  <span class="token comment">" Make the colour highlight normal</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span>\n\n  <span class="token comment">" Current modified status and filename</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Modi# %&#123;CheckMod(&amp;modified)&#125; "</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,Zt,e),b(n,Kt,e),E(Kt,Qt),E(Qt,Xt),b(n,ne,e),b(n,se,e),E(se,ae),E(se,te),E(te,ee),E(se,oe),E(se,pe),E(pe,le),E(se,ce),E(se,ie),E(ie,re),E(se,ue),E(se,ke),E(ke,de),E(se,he),b(n,fe,e),b(n,me,e),me.innerHTML='<code class="language-vim"><span class="token comment">" Set the colour</span>\n<span class="token builtin">hi</span> Filetype guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb\n\n<span class="token comment">" Get current filetype</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckFT</span><span class="token punctuation">(</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">\'\'</span>\n    <span class="token keyword">return</span> <span class="token string">\'-\'</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> <span class="token function">tolower</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>\n  <span class="token keyword">endif</span>\n<span class="token keyword">endfunction</span></code>',b(n,ge,e),b(n,ye,e),E(ye,we),b(n,ve,e),b(n,be,e),be.innerHTML='<code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Current mode</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>\n\n  <span class="token comment">" Current git branch</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>\n\n  <span class="token comment">" Make the colour highlight normal</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span>\n\n  <span class="token comment">" Current modified status and filename</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Modi# %&#123;CheckMod(&amp;modified)&#125; "</span>\n\n  <span class="token comment">" Current filetype</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Filetype# %&#123;CheckFT(&amp;filetype)&#125; "</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,Ee,e),b(n,Ie,e),E(Ie,Le),E(Ie,Me),E(Me,Ce),E(Ie,Pe),b(n,Ae,e),b(n,Te,e),E(Te,Be),E(Be,$e),b(n,He,e),b(n,Se,e),E(Se,xe),b(n,Fe,e),b(n,Re,e),Re.innerHTML='<code class="language-vim"><span class="token comment">" Colour for line number module</span>\n<span class="token builtin">hi</span> LineCol guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold\n\n<span class="token comment">" Current line and column</span>\n<span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#LineCol# Ln %l, Col %c "</span></code>',b(n,Ge,e),b(n,De,e),E(De,je),E(je,Ve),b(n,We,e),b(n,qe,e),E(qe,Ne),b(n,Oe,e),b(n,_e,e),_e.innerHTML='<code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">" Set empty statusline and colors</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Full path of the file</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#LineCol# %F "</span>\n\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,Ye,e),b(n,Ue,e),E(Ue,Je),E(Je,ze),b(n,Ze,e),b(n,Ke,e),E(Ke,Qe),b(n,Xe,e),b(n,no,e),no.innerHTML='<code class="language-vim"><span class="token comment">" Statusline colors</span>\n<span class="token builtin">hi</span> Base guibg<span class="token operator">=</span>#<span class="token number">212333</span> guifg<span class="token operator">=</span>#<span class="token number">212333</span>\n<span class="token builtin">hi</span> Mode guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold\n<span class="token builtin">hi</span> Git guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb\n<span class="token builtin">hi</span> Filetype guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb\n<span class="token builtin">hi</span> LineCol guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold\n<span class="token comment">" Get current mode</span>\n<span class="token keyword">let</span> g<span class="token punctuation">:</span>currentmode<span class="token operator">=</span><span class="token punctuation">&#123;</span>\n      <span class="token string">\'n\'</span> <span class="token punctuation">:</span> <span class="token string">\'Normal \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'no\'</span> <span class="token punctuation">:</span> <span class="token string">\'N·Operator Pending \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'v\'</span> <span class="token punctuation">:</span> <span class="token string">\'Visual \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'V\'</span> <span class="token punctuation">:</span> <span class="token string">\'V·Line \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'^V\'</span> <span class="token punctuation">:</span> <span class="token string">\'V·Block \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'s\'</span> <span class="token punctuation">:</span> <span class="token string">\'Select \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'S\'</span><span class="token punctuation">:</span> <span class="token string">\'S·Line \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'^S\'</span> <span class="token punctuation">:</span> <span class="token string">\'S·Block \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'i\'</span> <span class="token punctuation">:</span> <span class="token string">\'Insert \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'R\'</span> <span class="token punctuation">:</span> <span class="token string">\'Replace \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'Rv\'</span> <span class="token punctuation">:</span> <span class="token string">\'V·Replace \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'c\'</span> <span class="token punctuation">:</span> <span class="token string">\'Command \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'cv\'</span> <span class="token punctuation">:</span> <span class="token string">\'Vim Ex \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'ce\'</span> <span class="token punctuation">:</span> <span class="token string">\'Ex \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'r\'</span> <span class="token punctuation">:</span> <span class="token string">\'Prompt \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'rm\'</span> <span class="token punctuation">:</span> <span class="token string">\'More \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'r?\'</span> <span class="token punctuation">:</span> <span class="token string">\'Confirm \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'!\'</span> <span class="token punctuation">:</span> <span class="token string">\'Shell \'</span><span class="token punctuation">,</span>\n      <span class="token string">\'t\'</span> <span class="token punctuation">:</span> <span class="token string">\'Terminal \'</span>\n      <span class="token punctuation">&#125;</span>\n\n<span class="token comment">" Get current mode</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ModeCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent <span class="token operator">=</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>g<span class="token punctuation">:</span>currentmode<span class="token punctuation">,</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent<span class="token punctuation">,</span> <span class="token string">\'V·Block \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode <span class="token operator">=</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist\n    <span class="token keyword">return</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" Get current git branch</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">GitBranch</span><span class="token punctuation">(</span>git<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> a<span class="token punctuation">:</span>git <span class="token operator">==</span> <span class="token string">""</span>\n    <span class="token keyword">return</span> <span class="token string">\'-\'</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">:</span>git\n  <span class="token keyword">endif</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" Get current filetype</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckFT</span><span class="token punctuation">(</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">\'\'</span>\n    <span class="token keyword">return</span> <span class="token string">\'-\'</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> <span class="token function">tolower</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>\n  <span class="token keyword">endif</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" Check modified status</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckMod</span><span class="token punctuation">(</span>modi<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> a<span class="token punctuation">:</span>modi <span class="token operator">==</span> <span class="token number">1</span>\n    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'%:t\'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string">\'*\'</span>\n  <span class="token keyword">else</span>\n    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>\n    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'%:t\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">endif</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" Set active statusline</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">" Set empty statusline and colors</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Current mode</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>\n\n  <span class="token comment">" Current git branch</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>\n\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Align items to right</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span>\n\n  <span class="token comment">" Current modified status and filename</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Modi# %&#123;CheckMod(&amp;modified)&#125; "</span>\n\n  <span class="token comment">" Current filetype</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Filetype# %&#123;CheckFT(&amp;filetype)&#125; "</span>\n\n  <span class="token comment">" Current line and column</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#LineCol# Ln %l, Col %c "</span>\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">" Set empty statusline and colors</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>\n\n  <span class="token comment">" Full path of the file</span>\n  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Filename# %F "</span>\n\n  <span class="token keyword">return</span> <span class="token builtin">statusline</span>\n<span class="token keyword">endfunction</span></code>',b(n,so,e),b(n,ao,e),E(ao,to),b(n,eo,e),b(n,oo,e),oo.innerHTML='<code class="language-vim"><span class="token comment">" Change statusline automatically</span>\naugroup Statusline\n  <span class="token builtin">autocmd</span><span class="token operator">!</span>\n  <span class="token builtin">autocmd</span> WinEnter<span class="token punctuation">,</span>BufEnter <span class="token operator">*</span> <span class="token keyword">setlocal</span> <span class="token builtin">statusline</span><span class="token operator">=</span><span class="token operator">%</span><span class="token operator">!</span><span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token builtin">autocmd</span> WinLeave<span class="token punctuation">,</span>BufLeave <span class="token operator">*</span> <span class="token keyword">setlocal</span> <span class="token builtin">statusline</span><span class="token operator">=</span><span class="token operator">%</span><span class="token operator">!</span><span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token builtin">autocmd</span> FileType nerdtree <span class="token keyword">setlocal</span> <span class="token builtin">statusline</span><span class="token operator">=</span><span class="token operator">%</span><span class="token operator">!</span><span class="token function">NERDLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\naugroup END</code>',b(n,po,e),b(n,lo,e),E(lo,co),E(lo,io),E(io,ro),E(lo,uo),b(n,ko,e),b(n,ho,e),ho.innerHTML='<code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">laststatus</span><span class="token operator">=</span><span class="token number">2</span></code>',b(n,fo,e),b(n,mo,e),E(mo,go),b(n,yo,e),b(n,wo,e),E(wo,vo),b(n,bo,e),b(n,Eo,e),E(Eo,Io),b(n,Mo,e),b(n,Co,e),E(Co,Po),E(Co,Ao),E(Ao,To),E(Co,Bo),b(n,$o,e),p(Ho,n,e),b(n,So,e),b(n,xo,e),E(xo,Fo),E(Fo,Ro),b(n,Go,e),b(n,Do,e),E(Do,jo),Vo=!0},p(n,s){const a={};1&s&&(a.$$scope={dirty:s,ctx:n}),zn.$set(a);const t={};1&s&&(t.$$scope={dirty:s,ctx:n}),Ho.$set(t)},i(n){Vo||(c(zn.$$.fragment,n),c(Ho.$$.fragment,n),Vo=!0)},o(n){i(zn.$$.fragment,n),i(Ho.$$.fragment,n),Vo=!1},d(n){n&&y(s),n&&y(l),n&&y(u),n&&y(Dn),n&&y(jn),n&&y(qn),n&&y(Nn),n&&y(_n),n&&y(Yn),n&&y(Jn),r(zn,n),n&&y(Zn),n&&y(Kn),n&&y(ns),n&&y(ss),n&&y(ts),n&&y(es),n&&y(ms),n&&y(gs),n&&y(ws),n&&y(vs),n&&y(Is),n&&y(Ls),n&&y(Ps),n&&y(As),n&&y(Bs),n&&y($s),n&&y(xs),n&&y(Fs),n&&y(Vs),n&&y(Ws),n&&y(Os),n&&y(_s),n&&y(Us),n&&y(Js),n&&y(zs),n&&y(Zs),n&&y(Xs),n&&y(na),n&&y(ca),n&&y(ia),n&&y(ra),n&&y(ua),n&&y(da),n&&y(ha),n&&y(fa),n&&y(ma),n&&y(wa),n&&y(va),n&&y(Ea),n&&y(Ia),n&&y(La),n&&y(Ma),n&&y(Ha),n&&y(Sa),n&&y(Wa),n&&y(qa),n&&y(Na),n&&y(Oa),n&&y(za),n&&y(Za),n&&y(Ka),n&&y(Qa),n&&y(st),n&&y(at),n&&y(lt),n&&y(ct),n&&y(rt),n&&y(ut),n&&y(kt),n&&y(dt),n&&y(ft),n&&y(mt),n&&y(gt),n&&y(yt),n&&y(bt),n&&y(Et),n&&y(Lt),n&&y(Mt),n&&y(Ct),n&&y(Pt),n&&y(Tt),n&&y(Bt),n&&y(Rt),n&&y(Gt),n&&y(Vt),n&&y(Wt),n&&y(Nt),n&&y(Ot),n&&y(_t),n&&y(Yt),n&&y(Jt),n&&y(zt),n&&y(Zt),n&&y(Kt),n&&y(ne),n&&y(se),n&&y(fe),n&&y(me),n&&y(ge),n&&y(ye),n&&y(ve),n&&y(be),n&&y(Ee),n&&y(Ie),n&&y(Ae),n&&y(Te),n&&y(He),n&&y(Se),n&&y(Fe),n&&y(Re),n&&y(Ge),n&&y(De),n&&y(We),n&&y(qe),n&&y(Oe),n&&y(_e),n&&y(Ye),n&&y(Ue),n&&y(Ze),n&&y(Ke),n&&y(Xe),n&&y(no),n&&y(so),n&&y(ao),n&&y(eo),n&&y(oo),n&&y(po),n&&y(lo),n&&y(ko),n&&y(ho),n&&y(fo),n&&y(mo),n&&y(yo),n&&y(wo),n&&y(bo),n&&y(Eo),n&&y(Mo),n&&y(Co),n&&y($o),r(Ho,n),n&&y(So),n&&y(xo),n&&y(Go),n&&y(Do)}}}function A(n){let s,a;const k=[T];let d={$$slots:{default:[P]},$$scope:{ctx:n}};for(let e=0;e<k.length;e+=1)d=t(d,k[e]);return s=new I({props:d}),{c(){e(s.$$.fragment)},l(n){o(s.$$.fragment,n)},m(n,t){p(s,n,t),a=!0},p(n,[a]){const t=0&a?l(k,[u(T)]):{};1&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){a||(c(s.$$.fragment,n),a=!0)},o(n){i(s.$$.fragment,n),a=!1},d(n){r(s,n)}}}const T={title:"Making your own statusline in (Neo)vim",date:"2020-02-15T00:00:00.000Z",desc:"A post where I made my own lightsaber. I mean, my own vim's statusline to make my vim looks even more personalised",tags:["neovim"]};export default class extends n{constructor(n){super(),s(this,n,null,A,a,{})}}export{T as metadata};
