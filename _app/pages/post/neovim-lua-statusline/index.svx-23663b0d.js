import{S as n,i as s,s as a,o as t,p as o,r as p,u as e,v as c,x as l,y as i,z as u,w as r,e as k,t as h,a as d,f,g,k as m,d as w,c as v,h as y,j as E,l as b}from"../../../chunks/stores-7ca13020.js";import{P as _}from"../../../chunks/post-14e8d485.js";import{U as I}from"../../../chunks/Update-70845eca.js";import"../../../chunks/ProgressButton-549bf321.js";import"../../../chunks/theme-0c5a7997.js";function C(n){let s,a;return{c(){s=k("p"),a=h("Thanks @Evgeni for the suggestion on creating a table for each section truncation width, it’s easier to keep track of which component has how many width.")},l(n){s=f(n,"P",{});var t=g(s);a=m(t,"Thanks @Evgeni for the suggestion on creating a table for each section truncation width, it’s easier to keep track of which component has how many width."),t.forEach(w)},m(n,t){E(n,s,t),b(s,a)},d(n){n&&w(s)}}}function L(n){let s,a;return{c(){s=k("p"),a=h("I now use the blank separator.")},l(n){s=f(n,"P",{});var t=g(s);a=m(t,"I now use the blank separator."),t.forEach(w)},m(n,t){E(n,s,t),b(s,a)},d(n){n&&w(s)}}}function P(n){let s,a,t,o,p,e,c,l;return{c(){s=k("p"),a=h("Thanks to @Evgeni for pointing me out, I moved the "),t=k("code"),o=h("mode"),p=h(" table outside of the function because previously I was putting it inside a function which will get created every time the function is executed."),e=d(),c=k("br"),l=h("\nAlso, since I moved from `vim.fn.mode` to `vim.api.nvim_get_mode().mode`, there are *a lot* of missing keys on my `mode` table; Hence a metatable is used so it will give me an `Unknown` mode instead of throwing an error when there's no matching key on the table. (Also thanks @Evgeni :)")},l(n){s=f(n,"P",{});var i=g(s);a=m(i,"Thanks to @Evgeni for pointing me out, I moved the "),t=f(i,"CODE",{});var u=g(t);o=m(u,"mode"),u.forEach(w),p=m(i," table outside of the function because previously I was putting it inside a function which will get created every time the function is executed."),i.forEach(w),e=v(n),c=f(n,"BR",{}),l=m(n,"\nAlso, since I moved from `vim.fn.mode` to `vim.api.nvim_get_mode().mode`, there are *a lot* of missing keys on my `mode` table; Hence a metatable is used so it will give me an `Unknown` mode instead of throwing an error when there's no matching key on the table. (Also thanks @Evgeni :)")},m(n,i){E(n,s,i),b(s,a),b(s,t),b(t,o),b(s,p),E(n,e,i),E(n,c,i),E(n,l,i)},d(n){n&&w(s),n&&w(e),n&&w(c),n&&w(l)}}}function A(n){let s,a,t,o,p,e,c,l,i,u,r;return{c(){s=k("p"),a=h("I display this at my "),t=k("code"),o=h("tabline"),p=h(" instead, I took it from "),e=k("a"),c=h("cooper-anderson’s"),l=h(" config and heavily modify it. "),i=k("a"),u=h("Here’s"),r=h(" the relevant file for that. It will show the available diagnostics at the top right corner of the screen and update them in real-time."),this.h()},l(n){s=f(n,"P",{});var k=g(s);a=m(k,"I display this at my "),t=f(k,"CODE",{});var h=g(t);o=m(h,"tabline"),h.forEach(w),p=m(k," instead, I took it from "),e=f(k,"A",{href:!0,rel:!0});var d=g(e);c=m(d,"cooper-anderson’s"),d.forEach(w),l=m(k," config and heavily modify it. "),i=f(k,"A",{href:!0,rel:!0});var v=g(i);u=m(v,"Here’s"),v.forEach(w),r=m(k," the relevant file for that. It will show the available diagnostics at the top right corner of the screen and update them in real-time."),k.forEach(w),this.h()},h(){y(e,"href","https://github.com/cooper-anderson/dotfiles/blob/2ddc280f3da7b6fc1e77be79393f92652326dd69/nvim/lua/ampersand/plugins/bufferline.lua"),y(e,"rel","nofollow"),y(i,"href","https://github.com/elianiva/dotfiles/blob/dcac8bce32b521e94da8c165426f948ee7507f13/nvim/.config/nvim/lua/plugin/_bufferline.lua"),y(i,"rel","nofollow")},m(n,k){E(n,s,k),b(s,a),b(s,t),b(t,o),b(s,p),b(s,e),b(e,c),b(s,l),b(s,i),b(i,u),b(s,r)},d(n){n&&w(s)}}}function S(n){let s,a,t,c,r,_,S,$,x,D,M,T,H,O,N,V,B,R,F,j,q,G,W,U,Y,z,K,Q,Z,J,X,nn,sn,an,tn,on,pn,en,cn,ln,un,rn,kn,hn,dn,fn,gn,mn,wn,vn,yn,En,bn,_n,In,Cn,Ln,Pn,An,Sn,$n,xn,Dn,Mn,Tn,Hn,On,Nn,Vn,Bn,Rn,Fn,jn,qn,Gn,Wn,Un,Yn,zn,Kn,Qn,Zn,Jn,Xn,ns,ss,as,ts,os,ps,es,cs,ls,is,us,rs,ks,hs,ds,fs,gs,ms,ws,vs,ys,Es,bs,_s,Is,Cs,Ls,Ps,As,Ss,$s,xs,Ds,Ms,Ts,Hs,Os,Ns,Vs,Bs,Rs,Fs,js,qs,Gs,Ws,Us,Ys,zs,Ks,Qs,Zs,Js,Xs,na,sa,aa,ta,oa,pa,ea,ca,la,ia,ua,ra,ka,ha,da,fa,ga,ma,wa,va,ya,Ea,ba,_a,Ia,Ca,La,Pa,Aa,Sa,$a,xa,Da,Ma,Ta,Ha,Oa,Na,Va,Ba,Ra,Fa,ja,qa,Ga,Wa,Ua,Ya,za,Ka,Qa,Za,Ja,Xa,nt,st,at,tt,ot,pt,et,ct,lt,it,ut,rt,kt,ht,dt,ft,gt,mt,wt,vt,yt,Et,bt,_t,It,Ct,Lt,Pt,At,St,$t,xt,Dt,Mt,Tt,Ht,Ot,Nt,Vt,Bt,Rt,Ft,jt,qt,Gt,Wt,Ut,Yt,zt,Kt,Qt,Zt,Jt,Xt,no,so,ao,to,oo,po,eo,co,lo,io,uo,ro,ko,ho,fo,go,mo,wo,vo,yo,Eo,bo,_o,Io,Co,Lo,Po,Ao,So,$o,xo,Do,Mo,To,Ho,Oo,No,Vo,Bo,Ro,Fo,jo,qo,Go,Wo,Uo,Yo,zo,Ko,Qo,Zo,Jo,Xo,np,sp,ap,tp,op,pp,ep,cp,lp,ip,up,rp,kp,hp,dp,fp,gp,mp,wp,vp,yp,Ep,bp,_p,Ip,Cp,Lp,Pp,Ap,Sp,$p,xp,Dp,Mp,Tp,Hp,Op,Np,Vp,Bp,Rp,Fp,jp,qp,Gp,Wp,Up,Yp,zp,Kp,Qp,Zp,Jp,Xp,ne,se,ae,te,oe,pe,ee,ce,le,ie,ue,re,ke,he,de,fe,ge,me,we,ve,ye,Ee,be,_e,Ie,Ce,Le,Pe,Ae,Se,$e,xe,De,Me,Te,He,Oe,Ne,Ve,Be,Re,Fe,je,qe,Ge,We,Ue,Ye,ze,Ke,Qe,Ze,Je,Xe,nc,sc,ac,tc,oc,pc,ec,cc,lc,ic,uc,rc,kc,hc,dc,fc,gc,mc,wc,vc,yc,Ec,bc,_c,Ic,Cc,Lc,Pc,Ac,Sc,$c,xc,Dc,Mc,Tc,Hc,Oc,Nc,Vc,Bc,Rc,Fc,jc,qc,Gc,Wc,Uc,Yc,zc,Kc,Qc,Zc,Jc,Xc,nl,sl,al,tl,ol,pl,el,cl,ll,il,ul,rl,kl,hl,dl,fl,gl,ml,wl,vl,yl,El,bl,_l,Il,Cl,Ll,Pl,Al,Sl,$l,xl,Dl,Ml,Tl,Hl,Ol,Nl,Vl,Bl,Rl,Fl,jl,ql,Gl,Wl,Ul,Yl,zl,Kl,Ql,Zl,Jl,Xl,ni,si,ai,ti,oi,pi,ei,ci,li,ii,ui,ri,ki,hi,di,fi,gi,mi,wi,vi,yi,Ei,bi,_i,Ii,Ci,Li,Pi,Ai,Si,$i,xi,Di,Mi,Ti,Hi,Oi,Ni,Vi,Bi,Ri,Fi,ji,qi,Gi,Wi,Ui,Yi,zi,Ki,Qi,Zi,Ji,Xi,nu,su,au,tu,ou,pu;return nt=new I({props:{date:"26-02-2021",$$slots:{default:[C]},$$scope:{ctx:n}}}),Nt=new I({props:{date:"30-01-2021",$$slots:{default:[L]},$$scope:{ctx:n}}}),Uo=new I({props:{date:"26-02-2021",$$slots:{default:[P]},$$scope:{ctx:n}}}),Rc=new I({props:{date:"30-01-2021",$$slots:{default:[A]},$$scope:{ctx:n}}}),{c(){s=k("h1"),a=k("a"),t=h("Table of Content"),c=d(),r=k("ul"),_=k("li"),S=k("p"),$=k("a"),x=h("Introduction"),D=d(),M=k("li"),T=k("p"),H=k("a"),O=h("Prerequisite"),N=d(),V=k("li"),B=k("p"),R=k("a"),F=h("Creating The Statusline"),j=d(),q=k("ul"),G=k("li"),W=k("a"),U=h("Initial Setup"),Y=d(),z=k("li"),K=k("a"),Q=h("First Function"),Z=d(),J=k("li"),X=k("a"),nn=h("Highlight groups"),sn=d(),an=k("li"),tn=k("a"),on=h("Separators"),pn=d(),en=k("li"),cn=k("a"),ln=h("Mode Component"),un=d(),rn=k("li"),kn=k("a"),hn=h("Git Status Component"),dn=d(),fn=k("li"),gn=k("a"),mn=h("Filename Component"),wn=d(),vn=k("li"),yn=k("a"),En=h("Filetype Component"),bn=d(),_n=k("li"),In=k("a"),Cn=h("Line Component"),Ln=d(),Pn=k("li"),An=k("a"),Sn=h("LSP Diagnostic"),$n=d(),xn=k("li"),Dn=k("p"),Mn=k("a"),Tn=h("Different Statusline"),Hn=d(),On=k("ul"),Nn=k("li"),Vn=k("a"),Bn=h("Active Statusline"),Rn=d(),Fn=k("li"),jn=k("a"),qn=h("Inactive Statusline"),Gn=d(),Wn=k("li"),Un=k("a"),Yn=h("Inactive Statusline"),zn=d(),Kn=k("li"),Qn=k("a"),Zn=h("Dynamic statusline"),Jn=d(),Xn=k("li"),ns=k("p"),ss=k("a"),as=h("Result"),ts=d(),os=k("li"),ps=k("p"),es=k("a"),cs=h("Closing Note"),ls=d(),is=k("h1"),us=k("a"),rs=h("Introduction"),ks=d(),hs=k("p"),ds=h("Hello there! So, I’ve been playing around with the latest Neovim feature and\nthat is it can now use Lua for its config. Quite a while ago I wrote "),fs=k("a"),gs=h("this post"),ms=h(" where I explain how I made my statusline. Now, it’s time to update that post using Lua :)"),ws=d(),vs=k("h1"),ys=k("a"),Es=h("Prerequisite"),bs=d(),_s=k("p"),Is=h("If you want to follow along, then these are the prerequisite."),Cs=d(),Ls=k("ul"),Ps=k("li"),As=h("Neovim 0.5 (we need this version for lua support)"),Ss=d(),$s=k("li"),xs=k("a"),Ds=h("gitsigns.nvim"),Ms=d(),Ts=k("li"),Hs=k("a"),Os=h("nerdfont"),Ns=d(),Vs=k("li"),Bs=k("a"),Rs=h("nvim-web-devicons"),Fs=d(),js=k("li"),qs=h("Terminal that supports true colour (I use "),Gs=k("a"),Ws=h("Alacritty"),Us=h(")"),Ys=d(),zs=k("li"),Ks=h("Patience"),Qs=d(),Zs=k("li"),Js=h("Googling skills in case something doesn’t work correctly :p"),Xs=d(),na=k("h1"),sa=k("a"),aa=h("Creating The Statusline"),ta=d(),oa=k("h2"),pa=k("a"),ea=h("Initial Setup"),ca=d(),la=k("p"),ia=h("I wrote my statusline on "),ua=k("code"),ra=h("~/.config/nvim/lua/modules/_statusline.lua"),ka=h(" along with my other lua modules so it will get picked up by Neovim and I can import it by using "),ha=k("code"),da=h("require('modules._statusline')"),fa=d(),ga=k("h2"),ma=k("a"),wa=h("First Function"),va=d(),ya=k("p"),Ea=h("I create an empty table for my statusline and alias for "),ba=k("code"),_a=h("vim.fn"),Ia=h(" and "),Ca=k("code"),La=h("vim.api"),Pa=h(" to make it shorter. You can call it whatever you want, I call it "),Aa=k("code"),Sa=h("M"),$a=h(" since this variable is just a ‘temporary’ table that I’m going to use for a metatable. My current file now looks something like this."),xa=d(),Da=k("pre"),Ma=d(),Ta=k("p"),Ha=h("This first function is going to be a helper function that will return "),Oa=k("code"),Na=h("true"),Va=h(" of "),Ba=k("code"),Ra=h("false"),Fa=h(" based on the current window width. I use this to decide whether or not a component should display a full or a truncated version of it."),ja=d(),qa=k("pre"),Ga=d(),Wa=k("p"),Ua=h("This function calls "),Ya=k("code"),za=h("vim.api.nvim_win_get_width"),Ka=h(" for the current active window which will return its width. This function will return "),Qa=k("code"),Za=h("true"),Ja=h(" if the current window width is less than the passed argument thus telling a component to truncate its content."),Xa=d(),o(nt.$$.fragment),st=d(),at=k("h2"),tt=k("a"),ot=h("Highlight groups"),pt=d(),et=k("p"),ct=h("I have this table that contains a string for the highlight group. I can then concatenate one of its items with a component and apply the highlight group for that component."),lt=d(),it=k("pre"),ut=d(),rt=k("p"),kt=h("I made the highlight groups on my "),ht=k("code"),dt=h("~/.config/nvim/lua/modules/_appearances.lua"),ft=h(" along with my other hl-group definitions, but here’s the important snippet."),gt=d(),mt=k("pre"),wt=d(),vt=k("p"),yt=h("You can define this using VimL but I prefer doing it in Lua because 99% of my config is in Lua and I don’t really like using VimL."),Et=d(),bt=k("h2"),_t=k("a"),It=h("Separators"),Ct=d(),Lt=k("p"),Pt=h("Since I use "),At=k("a"),St=h("nerdfont"),$t=h(", I have fancy symbols that I can use. I use these symbols as a separator."),xt=d(),Dt=k("pre"),Mt=d(),Tt=k("p"),Ht=h("I use the arrow separator, either one is fine. It will look empty here because my website doesn’t use Nerdfont."),Ot=d(),o(Nt.$$.fragment),Vt=d(),Bt=k("h2"),Rt=k("a"),Ft=h("Mode Component"),jt=d(),qt=k("p"),Gt=h("The first component for my statusline is the one that shows the current mode."),Wt=d(),Ut=k("pre"),Yt=d(),zt=k("p"),Kt=h("You probably notice that "),Qt=k("code"),Zt=h("V·Block"),Jt=h(" and "),Xt=k("code"),no=h("S·Block"),so=h(" look empty but they’re not. It’s a special character of "),ao=k("code"),to=h("C-V"),oo=h(" and "),po=k("code"),eo=h("C-S"),co=h(". If you go to (Neo)vim and press "),lo=k("code"),io=h("C-V"),uo=h(" in insert mode twice, it will insert something like "),ro=k("code"),ko=h("^V"),ho=h(". It’s not the same as "),fo=k("code"),go=h("^V"),mo=h(", I thought they’re the same but they’re not."),wo=d(),vo=k("p"),yo=h("What that code does is creates a key-value pair table with string as a key and a table as its value. I use the table’s key to match what "),Eo=k("code"),bo=h("vim.api.nvim_get_mode().mode"),_o=h(" returns."),Io=d(),Co=k("p"),Lo=h("Depending on the current window width, it will return different output. For example, if my current window isn’t wide enough, it will return "),Po=k("code"),Ao=h("N"),So=h(" instead of "),$o=k("code"),xo=h("Normal"),Do=h(". If you want to change when it will start to change then adjust the argument that is passed to the "),Mo=k("code"),To=h("is_truncated"),Ho=h(" function. Remember that "),Oo=k("code"),No=h("trunc_width"),Vo=h(" table from earlier? We use "),Bo=k("code"),Ro=h("mode"),Fo=h(" value here so that my Mode component will get truncated if my window width is less than "),jo=k("code"),qo=h("80"),Go=h("."),Wo=d(),o(Uo.$$.fragment),Yo=d(),zo=k("h2"),Ko=k("a"),Qo=h("Git Status Component"),Zo=d(),Jo=k("p"),Xo=h("I use "),np=k("a"),sp=h("gitsigns.nvim"),ap=h(" to show the git hunk status on "),tp=k("code"),op=h("signcolumn"),pp=h(". It provides some details like how many lines have been changed, added, or removed. It also provides the branch name. So, I’d like to integrate this functionality into my statusline."),ep=d(),cp=k("pre"),lp=d(),ip=k("p"),up=h("What that code does is it gets the git hunk status from "),rp=k("a"),kp=h("gitsigns.nvim"),hp=h(" and store it on a variable. I use fallback here because it doesn’t get set on initial "),dp=k("code"),fp=h("BufEnter"),gp=h(" so I’ll get a "),mp=k("code"),wp=h("nil"),vp=h(" error if I don’t do that."),yp=d(),Ep=k("p"),bp=h("The next bit is it checks if the branch name exists or not (basically checking if we’re in a git repo or not), if it exists then it will return a formatted status that will look something like this."),_p=d(),Ip=k("p"),Cp=k("img"),Pp=d(),Ap=k("p"),Sp=h("If the current window isn’t wide enough, it will remove the git hunk summary and just display the branch name."),$p=d(),xp=k("p"),Dp=h("If you get confused with "),Mp=k("code"),Tp=h("and"),Hp=h(" and "),Op=k("code"),Np=h("or"),Vp=h(", it’s similar to ternary operator. "),Bp=k("code"),Rp=h("cond and true or false"),Fp=h(" is the same as "),jp=k("code"),qp=h("cond ? true : false"),Gp=h(" because "),Wp=k("code"),Up=h("and"),Yp=h(" and "),zp=k("code"),Kp=h("or"),Qp=h(" is a "),Zp=k("a"),Jp=h("short circuit"),Xp=h(" in Lua."),ne=d(),se=k("h2"),ae=k("a"),te=h("Filename Component"),oe=d(),pe=k("p"),ee=h("My next component is a filename component. I’d like to be able to see the filename without having to press "),ce=k("code"),le=h("<C-G>"),ie=h(" every time I want to check the filename and its full path."),ue=d(),re=k("pre"),ke=d(),he=k("p"),de=h("Depending on the current window width, it will display an absolute path, relative path to our "),fe=k("code"),ge=h("$CWD"),me=h(", or just the current filename."),we=d(),ve=k("p"),ye=h("The "),Ee=k("code"),be=h("%<"),_e=h(" is to tell the statusline to truncate this component if it’s too long or doesn’t have enough space instead of truncating the first component."),Ie=d(),Ce=k("h2"),Le=k("a"),Pe=h("Filetype Component"),Ae=d(),Se=k("p"),$e=h("I want to see the filetype of the current buffer, so I’d like to include this on my statusline as well."),xe=d(),De=k("pre"),Me=d(),Te=k("p"),He=h("It gets a value from "),Oe=k("code"),Ne=h("vim.bo.filetype"),Ve=h(" which will return a filetype and I transform it to lowercase using the "),Be=k("code"),Re=h("lower()"),Fe=h(" method. If the current buffer doesn’t have a filetype, it will return nothing."),je=d(),qe=k("p"),Ge=h("I also use "),We=k("a"),Ue=h("nvim-web-devicons"),Ye=h(" to get the fancy icon for the current filetype."),ze=d(),Ke=k("h2"),Qe=k("a"),Ze=h("Line Component"),Je=d(),Xe=k("p"),nc=h("Even though I have "),sc=k("code"),ac=h("number"),tc=h(" and "),oc=k("code"),pc=h("relativenumber"),ec=h(" turned on, I’d like to have this on my statusline as well."),cc=d(),lc=k("pre"),ic=d(),uc=k("p"),rc=h("It will display something like "),kc=k("code"),hc=h("Ln 12, Col 2"),dc=h(" which means the cursor is at Line 12 and Column 2. This component also depends on the current window width, if it’s not wide enough then it will display something like "),fc=k("code"),gc=h("12:2"),mc=h("."),wc=d(),vc=k("h2"),yc=k("a"),Ec=h("LSP Diagnostic"),bc=d(),_c=k("p"),Ic=h("I use the built-in LSP client and it has the diagnostic capability. I can get the diagnostic summary using "),Cc=k("code"),Lc=h("vim.lsp.diagnostic.get_count(bufnr, severity)"),Pc=h("."),Ac=d(),Sc=k("pre"),$c=d(),xc=k("p"),Dc=h("I got this section from "),Mc=k("a"),Tc=h("this repo"),Hc=h(" with some modification. It will be hidden when the current window width is less than "),Oc=k("code"),Nc=h("120"),Vc=h(". I don’t personally use this because I use a small monitor."),Bc=d(),o(Rc.$$.fragment),Fc=d(),jc=k("h1"),qc=k("a"),Gc=h("Different Statusline"),Wc=d(),Uc=k("p"),Yc=h("I want to have 3 different statusline for different states which are "),zc=k("em"),Kc=h("Active"),Qc=h(" for the currently active window, "),Zc=k("em"),Jc=h("Inactive"),Xc=h(" for the inactive window, and "),nl=k("em"),sl=h("Explorer"),al=h(" for the file explorer window."),tl=d(),ol=k("h2"),pl=k("a"),el=h("Active Statusline"),cl=d(),ll=k("p"),il=h("I combine all of my components as follows."),ul=d(),rl=k("pre"),kl=d(),hl=k("p"),dl=h("The "),fl=k("code"),gl=h("%="),ml=h(" acts like a separator. It will place all of the next components to the right, since I want my filename indicator to be in the middle, I put 2 of them around my filename indicator. It will basically center it. You can play around with it and find which one you like."),wl=d(),vl=k("h2"),yl=k("a"),El=h("Inactive Statusline"),bl=d(),_l=k("p"),Il=h("I want this inactive statusline to be as boring as possible so it won’t distract me."),Cl=d(),Ll=k("pre"),Pl=d(),Al=k("p"),Sl=h("It’s just displaying the full path of the file with a dimmed colour, super simple."),$l=d(),xl=k("h2"),Dl=k("a"),Ml=h("Inactive Statusline"),Tl=d(),Hl=k("p"),Ol=h("I have [nvim-tree.lua][nvim-tree-lua] as my file explorer and I want to have different statusline for it, so I made this simple statusline."),Nl=d(),Vl=k("pre"),Bl=d(),Rl=k("h2"),Fl=k("a"),jl=h("Dynamic statusline"),ql=d(),Gl=k("p"),Wl=h("I use metatable to set the statusline from autocmd because the "),Ul=k("code"),Yl=h(":"),zl=h(" symbol conflicts with VimL syntax. I’m probably going to change this once Neovim has the ability to define autocmd using Lua natively."),Kl=d(),Ql=k("pre"),Zl=d(),Jl=k("p"),Xl=h("This auto command runs every time we enter or leave a buffer and set the corresponding statusline. It needs to be done using VimL because it doesn’t have lua version "),ni=k("em"),si=h("yet"),ai=h(". It’s currently a "),ti=k("a"),oi=h("work in progress"),pi=h(" at the time of writing this post."),ei=d(),ci=k("h1"),li=k("a"),ii=h("Result"),ui=d(),ri=k("p"),ki=h("Here’s how my entire file looks and "),hi=k("a"),di=h("here’s"),fi=h(" the corresponding highlight-groups definition."),gi=d(),mi=k("pre"),wi=d(),vi=k("p"),yi=h("And here’s the result."),Ei=d(),bi=k("p"),_i=k("img"),Ci=d(),Li=k("p"),Pi=h("Also a "),Ai=k("a"),Si=h("preview video"),$i=h(" for a better demonstration. As you can see in the video, they change their appearance based on the window width."),xi=d(),Di=k("p"),Mi=h("That’s the active statusline, I don’t think I need to put a screenshot for the inactive one because nothing is interesting going on there :p."),Ti=d(),Hi=k("p"),Oi=h("Here’s "),Ni=k("a"),Vi=h("my statusline file"),Bi=h(" for a reference."),Ri=d(),Fi=k("p"),ji=h("There are also some great statusline plugins written in lua if you want to get started quickly such as [tjdevries/express_line.nvim][express-line], "),qi=k("a"),Gi=h("glepnir/galaxyline.nvim"),Wi=h(", "),Ui=k("a"),Yi=h("adelarsq/neoline.vim"),zi=h(" and so on."),Ki=d(),Qi=k("h1"),Zi=k("a"),Ji=h("Closing Note"),Xi=d(),nu=k("p"),su=h("I really like how it turned out, Lua support on Neovim is probably the best update I’ve ever experienced. It makes me want to play around with Neovim’s API even more. Kudos to all of Neovim contributors!"),au=d(),tu=k("p"),ou=h("Anyway, thanks for reading, and gave a great day! :)"),this.h()},l(n){s=f(n,"H1",{id:!0});var o=g(s);a=f(o,"A",{href:!0});var e=g(a);t=m(e,"Table of Content"),e.forEach(w),o.forEach(w),c=v(n),r=f(n,"UL",{});var l=g(r);_=f(l,"LI",{});var i=g(_);S=f(i,"P",{});var u=g(S);$=f(u,"A",{href:!0});var k=g($);x=m(k,"Introduction"),k.forEach(w),u.forEach(w),i.forEach(w),D=v(l),M=f(l,"LI",{});var h=g(M);T=f(h,"P",{});var d=g(T);H=f(d,"A",{href:!0});var y=g(H);O=m(y,"Prerequisite"),y.forEach(w),d.forEach(w),h.forEach(w),N=v(l),V=f(l,"LI",{});var E=g(V);B=f(E,"P",{});var b=g(B);R=f(b,"A",{href:!0});var I=g(R);F=m(I,"Creating The Statusline"),I.forEach(w),b.forEach(w),j=v(E),q=f(E,"UL",{});var C=g(q);G=f(C,"LI",{});var L=g(G);W=f(L,"A",{href:!0});var P=g(W);U=m(P,"Initial Setup"),P.forEach(w),L.forEach(w),Y=v(C),z=f(C,"LI",{});var A=g(z);K=f(A,"A",{href:!0});var Lp=g(K);Q=m(Lp,"First Function"),Lp.forEach(w),A.forEach(w),Z=v(C),J=f(C,"LI",{});var Ii=g(J);X=f(Ii,"A",{href:!0});var pu=g(X);nn=m(pu,"Highlight groups"),pu.forEach(w),Ii.forEach(w),sn=v(C),an=f(C,"LI",{});var eu=g(an);tn=f(eu,"A",{href:!0});var cu=g(tn);on=m(cu,"Separators"),cu.forEach(w),eu.forEach(w),pn=v(C),en=f(C,"LI",{});var lu=g(en);cn=f(lu,"A",{href:!0});var iu=g(cn);ln=m(iu,"Mode Component"),iu.forEach(w),lu.forEach(w),un=v(C),rn=f(C,"LI",{});var uu=g(rn);kn=f(uu,"A",{href:!0});var ru=g(kn);hn=m(ru,"Git Status Component"),ru.forEach(w),uu.forEach(w),dn=v(C),fn=f(C,"LI",{});var ku=g(fn);gn=f(ku,"A",{href:!0});var hu=g(gn);mn=m(hu,"Filename Component"),hu.forEach(w),ku.forEach(w),wn=v(C),vn=f(C,"LI",{});var du=g(vn);yn=f(du,"A",{href:!0});var fu=g(yn);En=m(fu,"Filetype Component"),fu.forEach(w),du.forEach(w),bn=v(C),_n=f(C,"LI",{});var gu=g(_n);In=f(gu,"A",{href:!0});var mu=g(In);Cn=m(mu,"Line Component"),mu.forEach(w),gu.forEach(w),Ln=v(C),Pn=f(C,"LI",{});var wu=g(Pn);An=f(wu,"A",{href:!0});var vu=g(An);Sn=m(vu,"LSP Diagnostic"),vu.forEach(w),wu.forEach(w),C.forEach(w),E.forEach(w),$n=v(l),xn=f(l,"LI",{});var yu=g(xn);Dn=f(yu,"P",{});var Eu=g(Dn);Mn=f(Eu,"A",{href:!0});var bu=g(Mn);Tn=m(bu,"Different Statusline"),bu.forEach(w),Eu.forEach(w),Hn=v(yu),On=f(yu,"UL",{});var _u=g(On);Nn=f(_u,"LI",{});var Iu=g(Nn);Vn=f(Iu,"A",{href:!0});var Cu=g(Vn);Bn=m(Cu,"Active Statusline"),Cu.forEach(w),Iu.forEach(w),Rn=v(_u),Fn=f(_u,"LI",{});var Lu=g(Fn);jn=f(Lu,"A",{href:!0});var Pu=g(jn);qn=m(Pu,"Inactive Statusline"),Pu.forEach(w),Lu.forEach(w),Gn=v(_u),Wn=f(_u,"LI",{});var Au=g(Wn);Un=f(Au,"A",{href:!0});var Su=g(Un);Yn=m(Su,"Inactive Statusline"),Su.forEach(w),Au.forEach(w),zn=v(_u),Kn=f(_u,"LI",{});var $u=g(Kn);Qn=f($u,"A",{href:!0});var xu=g(Qn);Zn=m(xu,"Dynamic statusline"),xu.forEach(w),$u.forEach(w),_u.forEach(w),yu.forEach(w),Jn=v(l),Xn=f(l,"LI",{});var Du=g(Xn);ns=f(Du,"P",{});var Mu=g(ns);ss=f(Mu,"A",{href:!0});var Tu=g(ss);as=m(Tu,"Result"),Tu.forEach(w),Mu.forEach(w),Du.forEach(w),ts=v(l),os=f(l,"LI",{});var Hu=g(os);ps=f(Hu,"P",{});var Ou=g(ps);es=f(Ou,"A",{href:!0});var Nu=g(es);cs=m(Nu,"Closing Note"),Nu.forEach(w),Ou.forEach(w),Hu.forEach(w),l.forEach(w),ls=v(n),is=f(n,"H1",{id:!0});var Vu=g(is);us=f(Vu,"A",{href:!0});var Bu=g(us);rs=m(Bu,"Introduction"),Bu.forEach(w),Vu.forEach(w),ks=v(n),hs=f(n,"P",{});var Ru=g(hs);ds=m(Ru,"Hello there! So, I’ve been playing around with the latest Neovim feature and\nthat is it can now use Lua for its config. Quite a while ago I wrote "),fs=f(Ru,"A",{href:!0,rel:!0});var Fu=g(fs);gs=m(Fu,"this post"),Fu.forEach(w),ms=m(Ru," where I explain how I made my statusline. Now, it’s time to update that post using Lua :)"),Ru.forEach(w),ws=v(n),vs=f(n,"H1",{id:!0});var ju=g(vs);ys=f(ju,"A",{href:!0});var qu=g(ys);Es=m(qu,"Prerequisite"),qu.forEach(w),ju.forEach(w),bs=v(n),_s=f(n,"P",{});var Gu=g(_s);Is=m(Gu,"If you want to follow along, then these are the prerequisite."),Gu.forEach(w),Cs=v(n),Ls=f(n,"UL",{});var Wu=g(Ls);Ps=f(Wu,"LI",{});var Uu=g(Ps);As=m(Uu,"Neovim 0.5 (we need this version for lua support)"),Uu.forEach(w),Ss=v(Wu),$s=f(Wu,"LI",{});var Yu=g($s);xs=f(Yu,"A",{href:!0,rel:!0});var zu=g(xs);Ds=m(zu,"gitsigns.nvim"),zu.forEach(w),Yu.forEach(w),Ms=v(Wu),Ts=f(Wu,"LI",{});var Ku=g(Ts);Hs=f(Ku,"A",{href:!0,rel:!0});var Qu=g(Hs);Os=m(Qu,"nerdfont"),Qu.forEach(w),Ku.forEach(w),Ns=v(Wu),Vs=f(Wu,"LI",{});var Zu=g(Vs);Bs=f(Zu,"A",{href:!0,rel:!0});var Ju=g(Bs);Rs=m(Ju,"nvim-web-devicons"),Ju.forEach(w),Zu.forEach(w),Fs=v(Wu),js=f(Wu,"LI",{});var Xu=g(js);qs=m(Xu,"Terminal that supports true colour (I use "),Gs=f(Xu,"A",{href:!0,rel:!0});var nr=g(Gs);Ws=m(nr,"Alacritty"),nr.forEach(w),Us=m(Xu,")"),Xu.forEach(w),Ys=v(Wu),zs=f(Wu,"LI",{});var sr=g(zs);Ks=m(sr,"Patience"),sr.forEach(w),Qs=v(Wu),Zs=f(Wu,"LI",{});var ar=g(Zs);Js=m(ar,"Googling skills in case something doesn’t work correctly :p"),ar.forEach(w),Wu.forEach(w),Xs=v(n),na=f(n,"H1",{id:!0});var tr=g(na);sa=f(tr,"A",{href:!0});var or=g(sa);aa=m(or,"Creating The Statusline"),or.forEach(w),tr.forEach(w),ta=v(n),oa=f(n,"H2",{id:!0});var pr=g(oa);pa=f(pr,"A",{href:!0});var er=g(pa);ea=m(er,"Initial Setup"),er.forEach(w),pr.forEach(w),ca=v(n),la=f(n,"P",{});var cr=g(la);ia=m(cr,"I wrote my statusline on "),ua=f(cr,"CODE",{});var lr=g(ua);ra=m(lr,"~/.config/nvim/lua/modules/_statusline.lua"),lr.forEach(w),ka=m(cr," along with my other lua modules so it will get picked up by Neovim and I can import it by using "),ha=f(cr,"CODE",{});var ir=g(ha);da=m(ir,"require('modules._statusline')"),ir.forEach(w),cr.forEach(w),fa=v(n),ga=f(n,"H2",{id:!0});var ur=g(ga);ma=f(ur,"A",{href:!0});var rr=g(ma);wa=m(rr,"First Function"),rr.forEach(w),ur.forEach(w),va=v(n),ya=f(n,"P",{});var kr=g(ya);Ea=m(kr,"I create an empty table for my statusline and alias for "),ba=f(kr,"CODE",{});var hr=g(ba);_a=m(hr,"vim.fn"),hr.forEach(w),Ia=m(kr," and "),Ca=f(kr,"CODE",{});var dr=g(Ca);La=m(dr,"vim.api"),dr.forEach(w),Pa=m(kr," to make it shorter. You can call it whatever you want, I call it "),Aa=f(kr,"CODE",{});var fr=g(Aa);Sa=m(fr,"M"),fr.forEach(w),$a=m(kr," since this variable is just a ‘temporary’ table that I’m going to use for a metatable. My current file now looks something like this."),kr.forEach(w),xa=v(n),Da=f(n,"PRE",{class:!0}),g(Da).forEach(w),Ma=v(n),Ta=f(n,"P",{});var gr=g(Ta);Ha=m(gr,"This first function is going to be a helper function that will return "),Oa=f(gr,"CODE",{});var mr=g(Oa);Na=m(mr,"true"),mr.forEach(w),Va=m(gr," of "),Ba=f(gr,"CODE",{});var wr=g(Ba);Ra=m(wr,"false"),wr.forEach(w),Fa=m(gr," based on the current window width. I use this to decide whether or not a component should display a full or a truncated version of it."),gr.forEach(w),ja=v(n),qa=f(n,"PRE",{class:!0}),g(qa).forEach(w),Ga=v(n),Wa=f(n,"P",{});var vr=g(Wa);Ua=m(vr,"This function calls "),Ya=f(vr,"CODE",{});var yr=g(Ya);za=m(yr,"vim.api.nvim_win_get_width"),yr.forEach(w),Ka=m(vr," for the current active window which will return its width. This function will return "),Qa=f(vr,"CODE",{});var Er=g(Qa);Za=m(Er,"true"),Er.forEach(w),Ja=m(vr," if the current window width is less than the passed argument thus telling a component to truncate its content."),vr.forEach(w),Xa=v(n),p(nt.$$.fragment,n),st=v(n),at=f(n,"H2",{id:!0});var br=g(at);tt=f(br,"A",{href:!0});var _r=g(tt);ot=m(_r,"Highlight groups"),_r.forEach(w),br.forEach(w),pt=v(n),et=f(n,"P",{});var Ir=g(et);ct=m(Ir,"I have this table that contains a string for the highlight group. I can then concatenate one of its items with a component and apply the highlight group for that component."),Ir.forEach(w),lt=v(n),it=f(n,"PRE",{class:!0}),g(it).forEach(w),ut=v(n),rt=f(n,"P",{});var Cr=g(rt);kt=m(Cr,"I made the highlight groups on my "),ht=f(Cr,"CODE",{});var Lr=g(ht);dt=m(Lr,"~/.config/nvim/lua/modules/_appearances.lua"),Lr.forEach(w),ft=m(Cr," along with my other hl-group definitions, but here’s the important snippet."),Cr.forEach(w),gt=v(n),mt=f(n,"PRE",{class:!0}),g(mt).forEach(w),wt=v(n),vt=f(n,"P",{});var Pr=g(vt);yt=m(Pr,"You can define this using VimL but I prefer doing it in Lua because 99% of my config is in Lua and I don’t really like using VimL."),Pr.forEach(w),Et=v(n),bt=f(n,"H2",{id:!0});var Ar=g(bt);_t=f(Ar,"A",{href:!0});var Sr=g(_t);It=m(Sr,"Separators"),Sr.forEach(w),Ar.forEach(w),Ct=v(n),Lt=f(n,"P",{});var $r=g(Lt);Pt=m($r,"Since I use "),At=f($r,"A",{href:!0,rel:!0});var xr=g(At);St=m(xr,"nerdfont"),xr.forEach(w),$t=m($r,", I have fancy symbols that I can use. I use these symbols as a separator."),$r.forEach(w),xt=v(n),Dt=f(n,"PRE",{class:!0}),g(Dt).forEach(w),Mt=v(n),Tt=f(n,"P",{});var Dr=g(Tt);Ht=m(Dr,"I use the arrow separator, either one is fine. It will look empty here because my website doesn’t use Nerdfont."),Dr.forEach(w),Ot=v(n),p(Nt.$$.fragment,n),Vt=v(n),Bt=f(n,"H2",{id:!0});var Mr=g(Bt);Rt=f(Mr,"A",{href:!0});var Tr=g(Rt);Ft=m(Tr,"Mode Component"),Tr.forEach(w),Mr.forEach(w),jt=v(n),qt=f(n,"P",{});var Hr=g(qt);Gt=m(Hr,"The first component for my statusline is the one that shows the current mode."),Hr.forEach(w),Wt=v(n),Ut=f(n,"PRE",{class:!0}),g(Ut).forEach(w),Yt=v(n),zt=f(n,"P",{});var Or=g(zt);Kt=m(Or,"You probably notice that "),Qt=f(Or,"CODE",{});var Nr=g(Qt);Zt=m(Nr,"V·Block"),Nr.forEach(w),Jt=m(Or," and "),Xt=f(Or,"CODE",{});var Vr=g(Xt);no=m(Vr,"S·Block"),Vr.forEach(w),so=m(Or," look empty but they’re not. It’s a special character of "),ao=f(Or,"CODE",{});var Br=g(ao);to=m(Br,"C-V"),Br.forEach(w),oo=m(Or," and "),po=f(Or,"CODE",{});var Rr=g(po);eo=m(Rr,"C-S"),Rr.forEach(w),co=m(Or,". If you go to (Neo)vim and press "),lo=f(Or,"CODE",{});var Fr=g(lo);io=m(Fr,"C-V"),Fr.forEach(w),uo=m(Or," in insert mode twice, it will insert something like "),ro=f(Or,"CODE",{});var jr=g(ro);ko=m(jr,"^V"),jr.forEach(w),ho=m(Or,". It’s not the same as "),fo=f(Or,"CODE",{});var qr=g(fo);go=m(qr,"^V"),qr.forEach(w),mo=m(Or,", I thought they’re the same but they’re not."),Or.forEach(w),wo=v(n),vo=f(n,"P",{});var Gr=g(vo);yo=m(Gr,"What that code does is creates a key-value pair table with string as a key and a table as its value. I use the table’s key to match what "),Eo=f(Gr,"CODE",{});var Wr=g(Eo);bo=m(Wr,"vim.api.nvim_get_mode().mode"),Wr.forEach(w),_o=m(Gr," returns."),Gr.forEach(w),Io=v(n),Co=f(n,"P",{});var Ur=g(Co);Lo=m(Ur,"Depending on the current window width, it will return different output. For example, if my current window isn’t wide enough, it will return "),Po=f(Ur,"CODE",{});var Yr=g(Po);Ao=m(Yr,"N"),Yr.forEach(w),So=m(Ur," instead of "),$o=f(Ur,"CODE",{});var zr=g($o);xo=m(zr,"Normal"),zr.forEach(w),Do=m(Ur,". If you want to change when it will start to change then adjust the argument that is passed to the "),Mo=f(Ur,"CODE",{});var Kr=g(Mo);To=m(Kr,"is_truncated"),Kr.forEach(w),Ho=m(Ur," function. Remember that "),Oo=f(Ur,"CODE",{});var Qr=g(Oo);No=m(Qr,"trunc_width"),Qr.forEach(w),Vo=m(Ur," table from earlier? We use "),Bo=f(Ur,"CODE",{});var Zr=g(Bo);Ro=m(Zr,"mode"),Zr.forEach(w),Fo=m(Ur," value here so that my Mode component will get truncated if my window width is less than "),jo=f(Ur,"CODE",{});var Jr=g(jo);qo=m(Jr,"80"),Jr.forEach(w),Go=m(Ur,"."),Ur.forEach(w),Wo=v(n),p(Uo.$$.fragment,n),Yo=v(n),zo=f(n,"H2",{id:!0});var Xr=g(zo);Ko=f(Xr,"A",{href:!0});var nk=g(Ko);Qo=m(nk,"Git Status Component"),nk.forEach(w),Xr.forEach(w),Zo=v(n),Jo=f(n,"P",{});var sk=g(Jo);Xo=m(sk,"I use "),np=f(sk,"A",{href:!0,rel:!0});var ak=g(np);sp=m(ak,"gitsigns.nvim"),ak.forEach(w),ap=m(sk," to show the git hunk status on "),tp=f(sk,"CODE",{});var tk=g(tp);op=m(tk,"signcolumn"),tk.forEach(w),pp=m(sk,". It provides some details like how many lines have been changed, added, or removed. It also provides the branch name. So, I’d like to integrate this functionality into my statusline."),sk.forEach(w),ep=v(n),cp=f(n,"PRE",{class:!0}),g(cp).forEach(w),lp=v(n),ip=f(n,"P",{});var ok=g(ip);up=m(ok,"What that code does is it gets the git hunk status from "),rp=f(ok,"A",{href:!0,rel:!0});var pk=g(rp);kp=m(pk,"gitsigns.nvim"),pk.forEach(w),hp=m(ok," and store it on a variable. I use fallback here because it doesn’t get set on initial "),dp=f(ok,"CODE",{});var ek=g(dp);fp=m(ek,"BufEnter"),ek.forEach(w),gp=m(ok," so I’ll get a "),mp=f(ok,"CODE",{});var ck=g(mp);wp=m(ck,"nil"),ck.forEach(w),vp=m(ok," error if I don’t do that."),ok.forEach(w),yp=v(n),Ep=f(n,"P",{});var lk=g(Ep);bp=m(lk,"The next bit is it checks if the branch name exists or not (basically checking if we’re in a git repo or not), if it exists then it will return a formatted status that will look something like this."),lk.forEach(w),_p=v(n),Ip=f(n,"P",{});var ik=g(Ip);Cp=f(ik,"IMG",{src:!0,alt:!0}),ik.forEach(w),Pp=v(n),Ap=f(n,"P",{});var uk=g(Ap);Sp=m(uk,"If the current window isn’t wide enough, it will remove the git hunk summary and just display the branch name."),uk.forEach(w),$p=v(n),xp=f(n,"P",{});var rk=g(xp);Dp=m(rk,"If you get confused with "),Mp=f(rk,"CODE",{});var kk=g(Mp);Tp=m(kk,"and"),kk.forEach(w),Hp=m(rk," and "),Op=f(rk,"CODE",{});var hk=g(Op);Np=m(hk,"or"),hk.forEach(w),Vp=m(rk,", it’s similar to ternary operator. "),Bp=f(rk,"CODE",{});var dk=g(Bp);Rp=m(dk,"cond and true or false"),dk.forEach(w),Fp=m(rk," is the same as "),jp=f(rk,"CODE",{});var fk=g(jp);qp=m(fk,"cond ? true : false"),fk.forEach(w),Gp=m(rk," because "),Wp=f(rk,"CODE",{});var gk=g(Wp);Up=m(gk,"and"),gk.forEach(w),Yp=m(rk," and "),zp=f(rk,"CODE",{});var mk=g(zp);Kp=m(mk,"or"),mk.forEach(w),Qp=m(rk," is a "),Zp=f(rk,"A",{href:!0,rel:!0});var wk=g(Zp);Jp=m(wk,"short circuit"),wk.forEach(w),Xp=m(rk," in Lua."),rk.forEach(w),ne=v(n),se=f(n,"H2",{id:!0});var vk=g(se);ae=f(vk,"A",{href:!0});var yk=g(ae);te=m(yk,"Filename Component"),yk.forEach(w),vk.forEach(w),oe=v(n),pe=f(n,"P",{});var Ek=g(pe);ee=m(Ek,"My next component is a filename component. I’d like to be able to see the filename without having to press "),ce=f(Ek,"CODE",{});var bk=g(ce);le=m(bk,"<C-G>"),bk.forEach(w),ie=m(Ek," every time I want to check the filename and its full path."),Ek.forEach(w),ue=v(n),re=f(n,"PRE",{class:!0}),g(re).forEach(w),ke=v(n),he=f(n,"P",{});var _k=g(he);de=m(_k,"Depending on the current window width, it will display an absolute path, relative path to our "),fe=f(_k,"CODE",{});var Ik=g(fe);ge=m(Ik,"$CWD"),Ik.forEach(w),me=m(_k,", or just the current filename."),_k.forEach(w),we=v(n),ve=f(n,"P",{});var Ck=g(ve);ye=m(Ck,"The "),Ee=f(Ck,"CODE",{});var Lk=g(Ee);be=m(Lk,"%<"),Lk.forEach(w),_e=m(Ck," is to tell the statusline to truncate this component if it’s too long or doesn’t have enough space instead of truncating the first component."),Ck.forEach(w),Ie=v(n),Ce=f(n,"H2",{id:!0});var Pk=g(Ce);Le=f(Pk,"A",{href:!0});var Ak=g(Le);Pe=m(Ak,"Filetype Component"),Ak.forEach(w),Pk.forEach(w),Ae=v(n),Se=f(n,"P",{});var Sk=g(Se);$e=m(Sk,"I want to see the filetype of the current buffer, so I’d like to include this on my statusline as well."),Sk.forEach(w),xe=v(n),De=f(n,"PRE",{class:!0}),g(De).forEach(w),Me=v(n),Te=f(n,"P",{});var $k=g(Te);He=m($k,"It gets a value from "),Oe=f($k,"CODE",{});var xk=g(Oe);Ne=m(xk,"vim.bo.filetype"),xk.forEach(w),Ve=m($k," which will return a filetype and I transform it to lowercase using the "),Be=f($k,"CODE",{});var Dk=g(Be);Re=m(Dk,"lower()"),Dk.forEach(w),Fe=m($k," method. If the current buffer doesn’t have a filetype, it will return nothing."),$k.forEach(w),je=v(n),qe=f(n,"P",{});var Mk=g(qe);Ge=m(Mk,"I also use "),We=f(Mk,"A",{href:!0,rel:!0});var Tk=g(We);Ue=m(Tk,"nvim-web-devicons"),Tk.forEach(w),Ye=m(Mk," to get the fancy icon for the current filetype."),Mk.forEach(w),ze=v(n),Ke=f(n,"H2",{id:!0});var Hk=g(Ke);Qe=f(Hk,"A",{href:!0});var Ok=g(Qe);Ze=m(Ok,"Line Component"),Ok.forEach(w),Hk.forEach(w),Je=v(n),Xe=f(n,"P",{});var Nk=g(Xe);nc=m(Nk,"Even though I have "),sc=f(Nk,"CODE",{});var Vk=g(sc);ac=m(Vk,"number"),Vk.forEach(w),tc=m(Nk," and "),oc=f(Nk,"CODE",{});var Bk=g(oc);pc=m(Bk,"relativenumber"),Bk.forEach(w),ec=m(Nk," turned on, I’d like to have this on my statusline as well."),Nk.forEach(w),cc=v(n),lc=f(n,"PRE",{class:!0}),g(lc).forEach(w),ic=v(n),uc=f(n,"P",{});var Rk=g(uc);rc=m(Rk,"It will display something like "),kc=f(Rk,"CODE",{});var Fk=g(kc);hc=m(Fk,"Ln 12, Col 2"),Fk.forEach(w),dc=m(Rk," which means the cursor is at Line 12 and Column 2. This component also depends on the current window width, if it’s not wide enough then it will display something like "),fc=f(Rk,"CODE",{});var jk=g(fc);gc=m(jk,"12:2"),jk.forEach(w),mc=m(Rk,"."),Rk.forEach(w),wc=v(n),vc=f(n,"H2",{id:!0});var qk=g(vc);yc=f(qk,"A",{href:!0});var Gk=g(yc);Ec=m(Gk,"LSP Diagnostic"),Gk.forEach(w),qk.forEach(w),bc=v(n),_c=f(n,"P",{});var Wk=g(_c);Ic=m(Wk,"I use the built-in LSP client and it has the diagnostic capability. I can get the diagnostic summary using "),Cc=f(Wk,"CODE",{});var Uk=g(Cc);Lc=m(Uk,"vim.lsp.diagnostic.get_count(bufnr, severity)"),Uk.forEach(w),Pc=m(Wk,"."),Wk.forEach(w),Ac=v(n),Sc=f(n,"PRE",{class:!0}),g(Sc).forEach(w),$c=v(n),xc=f(n,"P",{});var Yk=g(xc);Dc=m(Yk,"I got this section from "),Mc=f(Yk,"A",{href:!0,rel:!0});var zk=g(Mc);Tc=m(zk,"this repo"),zk.forEach(w),Hc=m(Yk," with some modification. It will be hidden when the current window width is less than "),Oc=f(Yk,"CODE",{});var Kk=g(Oc);Nc=m(Kk,"120"),Kk.forEach(w),Vc=m(Yk,". I don’t personally use this because I use a small monitor."),Yk.forEach(w),Bc=v(n),p(Rc.$$.fragment,n),Fc=v(n),jc=f(n,"H1",{id:!0});var Qk=g(jc);qc=f(Qk,"A",{href:!0});var Zk=g(qc);Gc=m(Zk,"Different Statusline"),Zk.forEach(w),Qk.forEach(w),Wc=v(n),Uc=f(n,"P",{});var Jk=g(Uc);Yc=m(Jk,"I want to have 3 different statusline for different states which are "),zc=f(Jk,"EM",{});var Xk=g(zc);Kc=m(Xk,"Active"),Xk.forEach(w),Qc=m(Jk," for the currently active window, "),Zc=f(Jk,"EM",{});var nh=g(Zc);Jc=m(nh,"Inactive"),nh.forEach(w),Xc=m(Jk," for the inactive window, and "),nl=f(Jk,"EM",{});var sh=g(nl);sl=m(sh,"Explorer"),sh.forEach(w),al=m(Jk," for the file explorer window."),Jk.forEach(w),tl=v(n),ol=f(n,"H2",{id:!0});var ah=g(ol);pl=f(ah,"A",{href:!0});var th=g(pl);el=m(th,"Active Statusline"),th.forEach(w),ah.forEach(w),cl=v(n),ll=f(n,"P",{});var oh=g(ll);il=m(oh,"I combine all of my components as follows."),oh.forEach(w),ul=v(n),rl=f(n,"PRE",{class:!0}),g(rl).forEach(w),kl=v(n),hl=f(n,"P",{});var ph=g(hl);dl=m(ph,"The "),fl=f(ph,"CODE",{});var eh=g(fl);gl=m(eh,"%="),eh.forEach(w),ml=m(ph," acts like a separator. It will place all of the next components to the right, since I want my filename indicator to be in the middle, I put 2 of them around my filename indicator. It will basically center it. You can play around with it and find which one you like."),ph.forEach(w),wl=v(n),vl=f(n,"H2",{id:!0});var ch=g(vl);yl=f(ch,"A",{href:!0});var lh=g(yl);El=m(lh,"Inactive Statusline"),lh.forEach(w),ch.forEach(w),bl=v(n),_l=f(n,"P",{});var ih=g(_l);Il=m(ih,"I want this inactive statusline to be as boring as possible so it won’t distract me."),ih.forEach(w),Cl=v(n),Ll=f(n,"PRE",{class:!0}),g(Ll).forEach(w),Pl=v(n),Al=f(n,"P",{});var uh=g(Al);Sl=m(uh,"It’s just displaying the full path of the file with a dimmed colour, super simple."),uh.forEach(w),$l=v(n),xl=f(n,"H2",{id:!0});var rh=g(xl);Dl=f(rh,"A",{href:!0});var kh=g(Dl);Ml=m(kh,"Inactive Statusline"),kh.forEach(w),rh.forEach(w),Tl=v(n),Hl=f(n,"P",{});var hh=g(Hl);Ol=m(hh,"I have [nvim-tree.lua][nvim-tree-lua] as my file explorer and I want to have different statusline for it, so I made this simple statusline."),hh.forEach(w),Nl=v(n),Vl=f(n,"PRE",{class:!0}),g(Vl).forEach(w),Bl=v(n),Rl=f(n,"H2",{id:!0});var dh=g(Rl);Fl=f(dh,"A",{href:!0});var fh=g(Fl);jl=m(fh,"Dynamic statusline"),fh.forEach(w),dh.forEach(w),ql=v(n),Gl=f(n,"P",{});var gh=g(Gl);Wl=m(gh,"I use metatable to set the statusline from autocmd because the "),Ul=f(gh,"CODE",{});var mh=g(Ul);Yl=m(mh,":"),mh.forEach(w),zl=m(gh," symbol conflicts with VimL syntax. I’m probably going to change this once Neovim has the ability to define autocmd using Lua natively."),gh.forEach(w),Kl=v(n),Ql=f(n,"PRE",{class:!0}),g(Ql).forEach(w),Zl=v(n),Jl=f(n,"P",{});var wh=g(Jl);Xl=m(wh,"This auto command runs every time we enter or leave a buffer and set the corresponding statusline. It needs to be done using VimL because it doesn’t have lua version "),ni=f(wh,"EM",{});var vh=g(ni);si=m(vh,"yet"),vh.forEach(w),ai=m(wh,". It’s currently a "),ti=f(wh,"A",{href:!0,rel:!0});var yh=g(ti);oi=m(yh,"work in progress"),yh.forEach(w),pi=m(wh," at the time of writing this post."),wh.forEach(w),ei=v(n),ci=f(n,"H1",{id:!0});var Eh=g(ci);li=f(Eh,"A",{href:!0});var bh=g(li);ii=m(bh,"Result"),bh.forEach(w),Eh.forEach(w),ui=v(n),ri=f(n,"P",{});var _h=g(ri);ki=m(_h,"Here’s how my entire file looks and "),hi=f(_h,"A",{href:!0,rel:!0});var Ih=g(hi);di=m(Ih,"here’s"),Ih.forEach(w),fi=m(_h," the corresponding highlight-groups definition."),_h.forEach(w),gi=v(n),mi=f(n,"PRE",{class:!0}),g(mi).forEach(w),wi=v(n),vi=f(n,"P",{});var Ch=g(vi);yi=m(Ch,"And here’s the result."),Ch.forEach(w),Ei=v(n),bi=f(n,"P",{});var Lh=g(bi);_i=f(Lh,"IMG",{src:!0,alt:!0}),Lh.forEach(w),Ci=v(n),Li=f(n,"P",{});var Ph=g(Li);Pi=m(Ph,"Also a "),Ai=f(Ph,"A",{href:!0,rel:!0});var Ah=g(Ai);Si=m(Ah,"preview video"),Ah.forEach(w),$i=m(Ph," for a better demonstration. As you can see in the video, they change their appearance based on the window width."),Ph.forEach(w),xi=v(n),Di=f(n,"P",{});var Sh=g(Di);Mi=m(Sh,"That’s the active statusline, I don’t think I need to put a screenshot for the inactive one because nothing is interesting going on there :p."),Sh.forEach(w),Ti=v(n),Hi=f(n,"P",{});var $h=g(Hi);Oi=m($h,"Here’s "),Ni=f($h,"A",{href:!0,rel:!0});var xh=g(Ni);Vi=m(xh,"my statusline file"),xh.forEach(w),Bi=m($h," for a reference."),$h.forEach(w),Ri=v(n),Fi=f(n,"P",{});var Dh=g(Fi);ji=m(Dh,"There are also some great statusline plugins written in lua if you want to get started quickly such as [tjdevries/express_line.nvim][express-line], "),qi=f(Dh,"A",{href:!0,rel:!0});var Mh=g(qi);Gi=m(Mh,"glepnir/galaxyline.nvim"),Mh.forEach(w),Wi=m(Dh,", "),Ui=f(Dh,"A",{href:!0,rel:!0});var Th=g(Ui);Yi=m(Th,"adelarsq/neoline.vim"),Th.forEach(w),zi=m(Dh," and so on."),Dh.forEach(w),Ki=v(n),Qi=f(n,"H1",{id:!0});var Hh=g(Qi);Zi=f(Hh,"A",{href:!0});var Oh=g(Zi);Ji=m(Oh,"Closing Note"),Oh.forEach(w),Hh.forEach(w),Xi=v(n),nu=f(n,"P",{});var Nh=g(nu);su=m(Nh,"I really like how it turned out, Lua support on Neovim is probably the best update I’ve ever experienced. It makes me want to play around with Neovim’s API even more. Kudos to all of Neovim contributors!"),Nh.forEach(w),au=v(n),tu=f(n,"P",{});var Vh=g(tu);ou=m(Vh,"Anyway, thanks for reading, and gave a great day! :)"),Vh.forEach(w),this.h()},h(){y(a,"href","#table-of-content"),y(s,"id","table-of-content"),y($,"href","#introduction"),y(H,"href","#prerequisite"),y(R,"href","#creating-the-statusline"),y(W,"href","#initial-setup"),y(K,"href","#first-function"),y(X,"href","#highlight-groups"),y(tn,"href","#separators"),y(cn,"href","#mode-component"),y(kn,"href","#git-status-component"),y(gn,"href","#filename-component"),y(yn,"href","#filetype-component"),y(In,"href","#line-component"),y(An,"href","#lsp-diagnostic"),y(Mn,"href","#different-statusline"),y(Vn,"href","#active-statusline"),y(jn,"href","#inactive-statusline"),y(Un,"href","#inactive-statusline-1"),y(Qn,"href","#dynamic-statusline"),y(ss,"href","#result"),y(es,"href","#closing-note"),y(us,"href","#introduction"),y(is,"id","introduction"),y(fs,"href","https://elianiva.me/post/vim-statusline"),y(fs,"rel","nofollow"),y(ys,"href","#prerequisite"),y(vs,"id","prerequisite"),y(xs,"href","https://github.com/lewis6991/gitsigns.nvim"),y(xs,"rel","nofollow"),y(Hs,"href","https://nerdfonts.com"),y(Hs,"rel","nofollow"),y(Bs,"href","https://github.com/kyazdani42/nvim-web-devicons"),y(Bs,"rel","nofollow"),y(Gs,"href","https://github.com/alacritty/alacritty"),y(Gs,"rel","nofollow"),y(sa,"href","#creating-the-statusline"),y(na,"id","creating-the-statusline"),y(pa,"href","#initial-setup"),y(oa,"id","initial-setup"),y(ma,"href","#first-function"),y(ga,"id","first-function"),y(Da,"class","language-lua"),y(qa,"class","language-lua"),y(tt,"href","#highlight-groups"),y(at,"id","highlight-groups"),y(it,"class","language-lua"),y(mt,"class","language-lua"),y(_t,"href","#separators"),y(bt,"id","separators"),y(At,"href","https://nerdfonts.com"),y(At,"rel","nofollow"),y(Dt,"class","language-lua"),y(Rt,"href","#mode-component"),y(Bt,"id","mode-component"),y(Ut,"class","language-lua"),y(Ko,"href","#git-status-component"),y(zo,"id","git-status-component"),y(np,"href","https://github.com/lewis6991/gitsigns.nvim"),y(np,"rel","nofollow"),y(cp,"class","language-lua"),y(rp,"href","https://github.com/lewis6991/gitsigns.nvim"),y(rp,"rel","nofollow"),Cp.src!==(Lp="/assets/post/neovim-lua-statusline/gitstatus.png")&&y(Cp,"src","/assets/post/neovim-lua-statusline/gitstatus.png"),y(Cp,"alt","gitstatus"),y(Zp,"href","https://en.m.wikipedia.org/wiki/Short-circuit_evaluation"),y(Zp,"rel","nofollow"),y(ae,"href","#filename-component"),y(se,"id","filename-component"),y(re,"class","language-lua"),y(Le,"href","#filetype-component"),y(Ce,"id","filetype-component"),y(De,"class","language-lua"),y(We,"href","https://github.com/kyazdani42/nvim-web-devicons"),y(We,"rel","nofollow"),y(Qe,"href","#line-component"),y(Ke,"id","line-component"),y(lc,"class","language-lua"),y(yc,"href","#lsp-diagnostic"),y(vc,"id","lsp-diagnostic"),y(Sc,"class","language-lua"),y(Mc,"href","https://github.com/nvim-lua/lsp-status.nvim"),y(Mc,"rel","nofollow"),y(qc,"href","#different-statusline"),y(jc,"id","different-statusline"),y(pl,"href","#active-statusline"),y(ol,"id","active-statusline"),y(rl,"class","language-lua"),y(yl,"href","#inactive-statusline"),y(vl,"id","inactive-statusline"),y(Ll,"class","language-lua"),y(Dl,"href","#inactive-statusline-1"),y(xl,"id","inactive-statusline-1"),y(Vl,"class","language-lua"),y(Fl,"href","#dynamic-statusline"),y(Rl,"id","dynamic-statusline"),y(Ql,"class","language-lua"),y(ti,"href","https://github.com/neovim/neovim/pull/12378"),y(ti,"rel","nofollow"),y(li,"href","#result"),y(ci,"id","result"),y(hi,"href","https://github.com/elianiva/dotfiles/blob/934fe3dd54aab909c396bf0fafae285946fa7fb5/nvim/.config/nvim/lua/modules/_appearances.lua"),y(hi,"rel","nofollow"),y(mi,"class","language-lua"),_i.src!==(Ii="/assets/post/neovim-lua-statusline/result.png")&&y(_i,"src","/assets/post/neovim-lua-statusline/result.png"),y(_i,"alt","result"),y(Ai,"href","https://streamable.com/arzm3q"),y(Ai,"rel","nofollow"),y(Ni,"href","https://github.com/elianiva/dotfiles/blob/master/nvim/.config/nvim/lua/modules/_statusline.lua"),y(Ni,"rel","nofollow"),y(qi,"href","https://github.com/glepnir/galaxyline.nvim"),y(qi,"rel","nofollow"),y(Ui,"href","https://github.com/adelarsq/neoline.vim"),y(Ui,"rel","nofollow"),y(Zi,"href","#closing-note"),y(Qi,"id","closing-note")},m(n,o){E(n,s,o),b(s,a),b(a,t),E(n,c,o),E(n,r,o),b(r,_),b(_,S),b(S,$),b($,x),b(r,D),b(r,M),b(M,T),b(T,H),b(H,O),b(r,N),b(r,V),b(V,B),b(B,R),b(R,F),b(V,j),b(V,q),b(q,G),b(G,W),b(W,U),b(q,Y),b(q,z),b(z,K),b(K,Q),b(q,Z),b(q,J),b(J,X),b(X,nn),b(q,sn),b(q,an),b(an,tn),b(tn,on),b(q,pn),b(q,en),b(en,cn),b(cn,ln),b(q,un),b(q,rn),b(rn,kn),b(kn,hn),b(q,dn),b(q,fn),b(fn,gn),b(gn,mn),b(q,wn),b(q,vn),b(vn,yn),b(yn,En),b(q,bn),b(q,_n),b(_n,In),b(In,Cn),b(q,Ln),b(q,Pn),b(Pn,An),b(An,Sn),b(r,$n),b(r,xn),b(xn,Dn),b(Dn,Mn),b(Mn,Tn),b(xn,Hn),b(xn,On),b(On,Nn),b(Nn,Vn),b(Vn,Bn),b(On,Rn),b(On,Fn),b(Fn,jn),b(jn,qn),b(On,Gn),b(On,Wn),b(Wn,Un),b(Un,Yn),b(On,zn),b(On,Kn),b(Kn,Qn),b(Qn,Zn),b(r,Jn),b(r,Xn),b(Xn,ns),b(ns,ss),b(ss,as),b(r,ts),b(r,os),b(os,ps),b(ps,es),b(es,cs),E(n,ls,o),E(n,is,o),b(is,us),b(us,rs),E(n,ks,o),E(n,hs,o),b(hs,ds),b(hs,fs),b(fs,gs),b(hs,ms),E(n,ws,o),E(n,vs,o),b(vs,ys),b(ys,Es),E(n,bs,o),E(n,_s,o),b(_s,Is),E(n,Cs,o),E(n,Ls,o),b(Ls,Ps),b(Ps,As),b(Ls,Ss),b(Ls,$s),b($s,xs),b(xs,Ds),b(Ls,Ms),b(Ls,Ts),b(Ts,Hs),b(Hs,Os),b(Ls,Ns),b(Ls,Vs),b(Vs,Bs),b(Bs,Rs),b(Ls,Fs),b(Ls,js),b(js,qs),b(js,Gs),b(Gs,Ws),b(js,Us),b(Ls,Ys),b(Ls,zs),b(zs,Ks),b(Ls,Qs),b(Ls,Zs),b(Zs,Js),E(n,Xs,o),E(n,na,o),b(na,sa),b(sa,aa),E(n,ta,o),E(n,oa,o),b(oa,pa),b(pa,ea),E(n,ca,o),E(n,la,o),b(la,ia),b(la,ua),b(ua,ra),b(la,ka),b(la,ha),b(ha,da),E(n,fa,o),E(n,ga,o),b(ga,ma),b(ma,wa),E(n,va,o),E(n,ya,o),b(ya,Ea),b(ya,ba),b(ba,_a),b(ya,Ia),b(ya,Ca),b(Ca,La),b(ya,Pa),b(ya,Aa),b(Aa,Sa),b(ya,$a),E(n,xa,o),E(n,Da,o),Da.innerHTML='<code class="language-lua"><span class="token keyword">local</span> fn <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn\n<span class="token keyword">local</span> api <span class="token operator">=</span> vim<span class="token punctuation">.</span>api\n<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code>',E(n,Ma,o),E(n,Ta,o),b(Ta,Ha),b(Ta,Oa),b(Oa,Na),b(Ta,Va),b(Ta,Ba),b(Ba,Ra),b(Ta,Fa),E(n,ja,o),E(n,qa,o),qa.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>trunc_width <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  <span class="token comment">-- You can adjust these values to your liking, if you want</span>\n  <span class="token comment">-- I promise this will all makes sense later :)</span>\n  mode       <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>\n  git_status <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>\n  filename   <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">,</span>\n  line_col   <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token number">80</span> <span class="token comment">-- handle edge cases, if there\'s any</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\nM<span class="token punctuation">.</span>is_truncated <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> width<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> current_width <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_win_get_width</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> current_width <span class="token operator">&lt;</span> width\n<span class="token keyword">end</span></code>',E(n,Ga,o),E(n,Wa,o),b(Wa,Ua),b(Wa,Ya),b(Ya,za),b(Wa,Ka),b(Wa,Qa),b(Qa,Za),b(Wa,Ja),E(n,Xa,o),e(nt,n,o),E(n,st,o),E(n,at,o),b(at,tt),b(tt,ot),E(n,pt,o),E(n,et,o),b(et,ct),E(n,lt,o),E(n,it,o),it.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  active        <span class="token operator">=</span> <span class="token string">\'%#StatusLine#\'</span><span class="token punctuation">,</span>\n  inactive      <span class="token operator">=</span> <span class="token string">\'%#StatuslineNC#\'</span><span class="token punctuation">,</span>\n  mode          <span class="token operator">=</span> <span class="token string">\'%#Mode#\'</span><span class="token punctuation">,</span>\n  mode_alt      <span class="token operator">=</span> <span class="token string">\'%#ModeAlt#\'</span><span class="token punctuation">,</span>\n  git           <span class="token operator">=</span> <span class="token string">\'%#Git#\'</span><span class="token punctuation">,</span>\n  git_alt       <span class="token operator">=</span> <span class="token string">\'%#GitAlt#\'</span><span class="token punctuation">,</span>\n  filetype      <span class="token operator">=</span> <span class="token string">\'%#Filetype#\'</span><span class="token punctuation">,</span>\n  filetype_alt  <span class="token operator">=</span> <span class="token string">\'%#FiletypeAlt#\'</span><span class="token punctuation">,</span>\n  line_col      <span class="token operator">=</span> <span class="token string">\'%#LineCol#\'</span><span class="token punctuation">,</span>\n  line_col_alt  <span class="token operator">=</span> <span class="token string">\'%#LineColAlt#\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span></code>',E(n,ut,o),E(n,rt,o),b(rt,kt),b(rt,ht),b(ht,dt),b(rt,ft),E(n,gt,o),E(n,mt,o),mt.innerHTML='<code class="language-lua"><span class="token keyword">local</span> set_hl <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> bg <span class="token operator">=</span> options<span class="token punctuation">.</span>bg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> <span class="token string">\'\'</span> <span class="token keyword">or</span> <span class="token string">\'guibg=\'</span> <span class="token operator">..</span> options<span class="token punctuation">.</span>bg\n  <span class="token keyword">local</span> fg <span class="token operator">=</span> options<span class="token punctuation">.</span>fg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> <span class="token string">\'\'</span> <span class="token keyword">or</span> <span class="token string">\'guifg=\'</span> <span class="token operator">..</span> options<span class="token punctuation">.</span>fg\n  <span class="token keyword">local</span> gui <span class="token operator">=</span> options<span class="token punctuation">.</span>gui <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> <span class="token string">\'\'</span> <span class="token keyword">or</span> <span class="token string">\'gui=\'</span> <span class="token operator">..</span> options<span class="token punctuation">.</span>gui\n\n  vim<span class="token punctuation">.</span><span class="token function">cmd</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'hi %s %s %s %s\'</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> bg<span class="token punctuation">,</span> fg<span class="token punctuation">,</span> gui<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token comment">-- you can of course pick whatever colour you want, I picked these colours</span>\n<span class="token comment">-- because I use Gruvbox and I like them</span>\n<span class="token keyword">local</span> highlights <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'StatusLine\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> fg <span class="token operator">=</span> <span class="token string">\'#3C3836\'</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">\'#EBDBB2\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'StatusLineNC\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> fg <span class="token operator">=</span> <span class="token string">\'#3C3836\'</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">\'#928374\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'Mode\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#928374\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#1D2021\'</span><span class="token punctuation">,</span> gui<span class="token operator">=</span><span class="token string">"bold"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'LineCol\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#928374\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#1D2021\'</span><span class="token punctuation">,</span> gui<span class="token operator">=</span><span class="token string">"bold"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'Git\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#504945\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#EBDBB2\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'Filetype\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#504945\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#EBDBB2\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'Filename\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#504945\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#EBDBB2\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'ModeAlt\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#504945\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#928374\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'GitAlt\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#3C3836\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#504945\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'LineColAlt\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#504945\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#928374\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span><span class="token string">\'FiletypeAlt\'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">\'#3C3836\'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">\'#504945\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">for</span> _<span class="token punctuation">,</span> highlight <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>highlights<span class="token punctuation">)</span> <span class="token keyword">do</span>\n  <span class="token function">set_hl</span><span class="token punctuation">(</span>highlight<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> highlight<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',E(n,wt,o),E(n,vt,o),b(vt,yt),E(n,Et,o),E(n,bt,o),b(bt,_t),b(_t,It),E(n,Ct,o),E(n,Lt,o),b(Lt,Pt),b(Lt,At),b(At,St),b(Lt,$t),E(n,xt,o),E(n,Dt,o),Dt.innerHTML='<code class="language-lua"><span class="token comment">-- I keep this here just in case I changed my mind so I don\'t have to find these icons again when I need them</span>\n<span class="token comment">-- you can of course just store one of them if you want</span>\nM<span class="token punctuation">.</span>separators <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  arrow <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  rounded <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  blank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">local</span> active_sep <span class="token operator">=</span> <span class="token string">\'blank\'</span></code>',E(n,Mt,o),E(n,Tt,o),b(Tt,Ht),E(n,Ot,o),e(Nt,n,o),E(n,Vt,o),E(n,Bt,o),b(Bt,Rt),b(Rt,Ft),E(n,jt,o),E(n,qt,o),b(qt,Gt),E(n,Wt,o),E(n,Ut,o),Ut.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>modes <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  <span class="token punctuation">[</span><span class="token string">\'n\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Normal\'</span><span class="token punctuation">,</span> <span class="token string">\'N\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'no\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'N·Pending\'</span><span class="token punctuation">,</span> <span class="token string">\'N·P\'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'v\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Visual\'</span><span class="token punctuation">,</span> <span class="token string">\'V\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'V\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'V·Line\'</span><span class="token punctuation">,</span> <span class="token string">\'V·L\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'V·Block\'</span><span class="token punctuation">,</span> <span class="token string">\'V·B\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'s\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Select\'</span><span class="token punctuation">,</span> <span class="token string">\'S\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'S\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'S·Line\'</span><span class="token punctuation">,</span> <span class="token string">\'S·L\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'S·Block\'</span><span class="token punctuation">,</span> <span class="token string">\'S·B\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'i\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Insert\'</span><span class="token punctuation">,</span> <span class="token string">\'I\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'ic\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Insert\'</span><span class="token punctuation">,</span> <span class="token string">\'I\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'R\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Replace\'</span><span class="token punctuation">,</span> <span class="token string">\'R\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'Rv\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'V·Replace\'</span><span class="token punctuation">,</span> <span class="token string">\'V·R\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'c\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Command\'</span><span class="token punctuation">,</span> <span class="token string">\'C\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'cv\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Vim·Ex \'</span><span class="token punctuation">,</span> <span class="token string">\'V·E\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'ce\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Ex \'</span><span class="token punctuation">,</span> <span class="token string">\'E\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'r\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Prompt \'</span><span class="token punctuation">,</span> <span class="token string">\'P\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'rm\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'More \'</span><span class="token punctuation">,</span> <span class="token string">\'M\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'r?\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Confirm \'</span><span class="token punctuation">,</span> <span class="token string">\'C\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'!\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Shell \'</span><span class="token punctuation">,</span> <span class="token string">\'S\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'t\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Terminal \'</span><span class="token punctuation">,</span> <span class="token string">\'T\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">\'Unknown\'</span><span class="token punctuation">,</span> <span class="token string">\'U\'</span><span class="token punctuation">&#125;</span> <span class="token comment">-- handle edge cases</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\nM<span class="token punctuation">.</span>get_current_mode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> current_mode <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_get_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode\n\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>mode<span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\' %s \'</span><span class="token punctuation">,</span> modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\' %s \'</span><span class="token punctuation">,</span> modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',E(n,Yt,o),E(n,zt,o),b(zt,Kt),b(zt,Qt),b(Qt,Zt),b(zt,Jt),b(zt,Xt),b(Xt,no),b(zt,so),b(zt,ao),b(ao,to),b(zt,oo),b(zt,po),b(po,eo),b(zt,co),b(zt,lo),b(lo,io),b(zt,uo),b(zt,ro),b(ro,ko),b(zt,ho),b(zt,fo),b(fo,go),b(zt,mo),E(n,wo,o),E(n,vo,o),b(vo,yo),b(vo,Eo),b(Eo,bo),b(vo,_o),E(n,Io,o),E(n,Co,o),b(Co,Lo),b(Co,Po),b(Po,Ao),b(Co,So),b(Co,$o),b($o,xo),b(Co,Do),b(Co,Mo),b(Mo,To),b(Co,Ho),b(Co,Oo),b(Oo,No),b(Co,Vo),b(Co,Bo),b(Bo,Ro),b(Co,Fo),b(Co,jo),b(jo,qo),b(Co,Go),E(n,Wo,o),e(Uo,n,o),E(n,Yo,o),E(n,zo,o),b(zo,Ko),b(Ko,Qo),E(n,Zo,o),E(n,Jo,o),b(Jo,Xo),b(Jo,np),b(np,sp),b(Jo,ap),b(Jo,tp),b(tp,op),b(Jo,pp),E(n,ep,o),E(n,cp,o),cp.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>get_git_status <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token comment">-- use fallback because it doesn\'t set this variable on the initial &#96;BufEnter&#96;</span>\n  <span class="token keyword">local</span> signs <span class="token operator">=</span> vim<span class="token punctuation">.</span>b<span class="token punctuation">.</span>gitsigns_status_dict <span class="token keyword">or</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> added <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> changed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> removed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>\n  <span class="token keyword">local</span> is_head_empty <span class="token operator">=</span> signs<span class="token punctuation">.</span>head <span class="token operator">~=</span> <span class="token string">\'\'</span>\n\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>git_status<span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">return</span> is_head_empty <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'  %s \'</span><span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head <span class="token keyword">or</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">\'\'</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">return</span> is_head_empty\n    <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>\n      <span class="token string">\' +%s ~%s -%s |  %s \'</span><span class="token punctuation">,</span>\n      signs<span class="token punctuation">.</span>added<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>changed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>removed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head\n    <span class="token punctuation">)</span>\n    <span class="token keyword">or</span> <span class="token string">\'\'</span>\n<span class="token keyword">end</span></code>',E(n,lp,o),E(n,ip,o),b(ip,up),b(ip,rp),b(rp,kp),b(ip,hp),b(ip,dp),b(dp,fp),b(ip,gp),b(ip,mp),b(mp,wp),b(ip,vp),E(n,yp,o),E(n,Ep,o),b(Ep,bp),E(n,_p,o),E(n,Ip,o),b(Ip,Cp),E(n,Pp,o),E(n,Ap,o),b(Ap,Sp),E(n,$p,o),E(n,xp,o),b(xp,Dp),b(xp,Mp),b(Mp,Tp),b(xp,Hp),b(xp,Op),b(Op,Np),b(xp,Vp),b(xp,Bp),b(Bp,Rp),b(xp,Fp),b(xp,jp),b(jp,qp),b(xp,Gp),b(xp,Wp),b(Wp,Up),b(xp,Yp),b(xp,zp),b(zp,Kp),b(xp,Qp),b(xp,Zp),b(Zp,Jp),b(xp,Xp),E(n,ne,o),E(n,se,o),b(se,ae),b(ae,te),E(n,oe,o),E(n,pe,o),b(pe,ee),b(pe,ce),b(ce,le),b(pe,ie),E(n,ue,o),E(n,re,o),re.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>get_filename <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">" %&lt;%f "</span> <span class="token keyword">end</span>\n  <span class="token keyword">return</span> <span class="token string">" %&lt;%F "</span>\n<span class="token keyword">end</span></code>',E(n,ke,o),E(n,he,o),b(he,de),b(he,fe),b(fe,ge),b(he,me),E(n,we,o),E(n,ve,o),b(ve,ye),b(ve,Ee),b(Ee,be),b(ve,_e),E(n,Ie,o),E(n,Ce,o),b(Ce,Le),b(Le,Pe),E(n,Ae,o),E(n,Se,o),b(Se,$e),E(n,xe,o),E(n,De,o),De.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>get_filetype <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> file_name<span class="token punctuation">,</span> file_ext <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:e"</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> icon <span class="token operator">=</span> require<span class="token string">\'nvim-web-devicons\'</span><span class="token punctuation">.</span><span class="token function">get_icon</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> file_ext<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> default <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> filetype <span class="token operator">=</span> vim<span class="token punctuation">.</span>bo<span class="token punctuation">.</span>filetype\n\n  <span class="token keyword">if</span> filetype <span class="token operator">==</span> <span class="token string">\'\'</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">\'\'</span> <span class="token keyword">end</span>\n  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\' %s %s \'</span><span class="token punctuation">,</span> icon<span class="token punctuation">,</span> filetype<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',E(n,Me,o),E(n,Te,o),b(Te,He),b(Te,Oe),b(Oe,Ne),b(Te,Ve),b(Te,Be),b(Be,Re),b(Te,Fe),E(n,je,o),E(n,qe,o),b(qe,Ge),b(qe,We),b(We,Ue),b(qe,Ye),E(n,ze,o),E(n,Ke,o),b(Ke,Qe),b(Qe,Ze),E(n,Je,o),E(n,Xe,o),b(Xe,nc),b(Xe,sc),b(sc,ac),b(Xe,tc),b(Xe,oc),b(oc,pc),b(Xe,ec),E(n,cc,o),E(n,lc,o),lc.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>get_line_col <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>line_col<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">\' %l:%c \'</span> <span class="token keyword">end</span>\n  <span class="token keyword">return</span> <span class="token string">\' Ln %l, Col %c \'</span>\n<span class="token keyword">end</span></code>',E(n,ic,o),E(n,uc,o),b(uc,rc),b(uc,kc),b(kc,hc),b(uc,dc),b(uc,fc),b(fc,gc),b(uc,mc),E(n,wc,o),E(n,vc,o),b(vc,yc),b(yc,Ec),E(n,bc,o),E(n,_c,o),b(_c,Ic),b(_c,Cc),b(Cc,Lc),b(_c,Pc),E(n,Ac,o),E(n,Sc,o),Sc.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>get_lsp_diagnostic <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n  <span class="token keyword">local</span> levels <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    errors <span class="token operator">=</span> <span class="token string">\'Error\'</span><span class="token punctuation">,</span>\n    warnings <span class="token operator">=</span> <span class="token string">\'Warning\'</span><span class="token punctuation">,</span>\n    info <span class="token operator">=</span> <span class="token string">\'Information\'</span><span class="token punctuation">,</span>\n    hints <span class="token operator">=</span> <span class="token string">\'Hint\'</span>\n  <span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">for</span> k<span class="token punctuation">,</span> level <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>levels<span class="token punctuation">)</span> <span class="token keyword">do</span>\n    result<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>diagnostic<span class="token punctuation">.</span><span class="token function">get_count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>diagnostic<span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">return</span> <span class="token string">\'\'</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>\n      <span class="token string">"| :%s :%s :%s :%s "</span><span class="token punctuation">,</span>\n      result<span class="token punctuation">[</span><span class="token string">\'errors\'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token string">\'warnings\'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      result<span class="token punctuation">[</span><span class="token string">\'info\'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token string">\'hints\'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span>\n    <span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span></code>',E(n,$c,o),E(n,xc,o),b(xc,Dc),b(xc,Mc),b(Mc,Tc),b(xc,Hc),b(xc,Oc),b(Oc,Nc),b(xc,Vc),E(n,Bc,o),e(Rc,n,o),E(n,Fc,o),E(n,jc,o),b(jc,qc),b(qc,Gc),E(n,Wc,o),E(n,Uc,o),b(Uc,Yc),b(Uc,zc),b(zc,Kc),b(Uc,Qc),b(Uc,Zc),b(Zc,Jc),b(Uc,Xc),b(Uc,nl),b(nl,sl),b(Uc,al),E(n,tl,o),E(n,ol,o),b(ol,pl),b(pl,el),E(n,cl,o),E(n,ll,o),b(ll,il),E(n,ul,o),E(n,rl,o),rl.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>set_active <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> colors <span class="token operator">=</span> self<span class="token punctuation">.</span>colors\n\n  <span class="token keyword">local</span> mode <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_current_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> mode_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token keyword">local</span> git <span class="token operator">=</span> colors<span class="token punctuation">.</span>git <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_git_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> git_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>git_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token keyword">local</span> filename <span class="token operator">=</span> colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> filetype_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token keyword">local</span> filetype <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> line_col <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_line_col</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> line_col_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n    colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> mode_alt<span class="token punctuation">,</span> git<span class="token punctuation">,</span> git_alt<span class="token punctuation">,</span>\n    <span class="token string">"%="</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token string">"%="</span><span class="token punctuation">,</span>\n    filetype_alt<span class="token punctuation">,</span> filetype<span class="token punctuation">,</span> line_col_alt<span class="token punctuation">,</span> line_col\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',E(n,kl,o),E(n,hl,o),b(hl,dl),b(hl,fl),b(fl,gl),b(hl,ml),E(n,wl,o),E(n,vl,o),b(vl,yl),b(yl,El),E(n,bl,o),E(n,_l,o),b(_l,Il),E(n,Cl,o),E(n,Ll,o),Ll.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>set_inactive <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> <span class="token string">\'%= %F %=\'</span>\n<span class="token keyword">end</span></code>',E(n,Pl,o),E(n,Al,o),b(Al,Sl),E(n,$l,o),E(n,xl,o),b(xl,Dl),b(Dl,Ml),E(n,Tl,o),E(n,Hl,o),b(Hl,Ol),E(n,Nl,o),E(n,Vl,o),Vl.innerHTML='<code class="language-lua">M<span class="token punctuation">.</span>set_explorer <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> title <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> <span class="token string">\'   \'</span>\n  <span class="token keyword">local</span> title_alt <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> title<span class="token punctuation">,</span> title_alt <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',E(n,Bl,o),E(n,Rl,o),b(Rl,Fl),b(Fl,jl),E(n,ql,o),E(n,Gl,o),b(Gl,Wl),b(Gl,Ul),b(Ul,Yl),b(Gl,zl),E(n,Kl,o),E(n,Ql,o),Ql.innerHTML='<code class="language-lua">Statusline <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  __call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>statusline<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"active"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"inactive"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"explorer"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_explorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\napi<span class="token punctuation">.</span><span class="token function">nvim_exec</span><span class="token punctuation">(</span><span class="token string">[[\n  augroup Statusline\n  au!\n  au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline(\'active\')\n  au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline(\'inactive\')\n  au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline(\'explorer\')\n  augroup END\n]]</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span></code>',E(n,Zl,o),E(n,Jl,o),b(Jl,Xl),b(Jl,ni),b(ni,si),b(Jl,ai),b(Jl,ti),b(ti,oi),b(Jl,pi),E(n,ei,o),E(n,ci,o),b(ci,li),b(li,ii),E(n,ui,o),E(n,ri,o),b(ri,ki),b(ri,hi),b(hi,di),b(ri,fi),E(n,gi,o),E(n,mi,o),mi.innerHTML='<code class="language-lua"><span class="token keyword">local</span> fn <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn\n<span class="token keyword">local</span> api <span class="token operator">=</span> vim<span class="token punctuation">.</span>api\n\n<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n<span class="token comment">-- possible values are \'arrow\' | \'rounded\' | \'blank\'</span>\n<span class="token keyword">local</span> active_sep <span class="token operator">=</span> <span class="token string">\'blank\'</span>\n\n<span class="token comment">-- change them if you want to different separator</span>\nM<span class="token punctuation">.</span>separators <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  arrow <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  rounded <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  blank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">-- highlight groups</span>\nM<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  active        <span class="token operator">=</span> <span class="token string">\'%#StatusLine#\'</span><span class="token punctuation">,</span>\n  inactive      <span class="token operator">=</span> <span class="token string">\'%#StatuslineNC#\'</span><span class="token punctuation">,</span>\n  mode          <span class="token operator">=</span> <span class="token string">\'%#Mode#\'</span><span class="token punctuation">,</span>\n  mode_alt      <span class="token operator">=</span> <span class="token string">\'%#ModeAlt#\'</span><span class="token punctuation">,</span>\n  git           <span class="token operator">=</span> <span class="token string">\'%#Git#\'</span><span class="token punctuation">,</span>\n  git_alt       <span class="token operator">=</span> <span class="token string">\'%#GitAlt#\'</span><span class="token punctuation">,</span>\n  filetype      <span class="token operator">=</span> <span class="token string">\'%#Filetype#\'</span><span class="token punctuation">,</span>\n  filetype_alt  <span class="token operator">=</span> <span class="token string">\'%#FiletypeAlt#\'</span><span class="token punctuation">,</span>\n  line_col      <span class="token operator">=</span> <span class="token string">\'%#LineCol#\'</span><span class="token punctuation">,</span>\n  line_col_alt  <span class="token operator">=</span> <span class="token string">\'%#LineColAlt#\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span>\n\nM<span class="token punctuation">.</span>trunc_width <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  mode       <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>\n  git_status <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>\n  filename   <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">,</span>\n  line_col   <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token number">80</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\nM<span class="token punctuation">.</span>is_truncated <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> width<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> current_width <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_win_get_width</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> current_width <span class="token operator">&lt;</span> width\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>modes <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  <span class="token punctuation">[</span><span class="token string">\'n\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Normal\'</span><span class="token punctuation">,</span> <span class="token string">\'N\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'no\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'N·Pending\'</span><span class="token punctuation">,</span> <span class="token string">\'N·P\'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'v\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Visual\'</span><span class="token punctuation">,</span> <span class="token string">\'V\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'V\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'V·Line\'</span><span class="token punctuation">,</span> <span class="token string">\'V·L\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'V·Block\'</span><span class="token punctuation">,</span> <span class="token string">\'V·B\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">-- this is not ^V, but it\'s , they\'re different</span>\n  <span class="token punctuation">[</span><span class="token string">\'s\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Select\'</span><span class="token punctuation">,</span> <span class="token string">\'S\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'S\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'S·Line\'</span><span class="token punctuation">,</span> <span class="token string">\'S·L\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'S·Block\'</span><span class="token punctuation">,</span> <span class="token string">\'S·B\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">-- same with this one, it\'s not ^S but it\'s </span>\n  <span class="token punctuation">[</span><span class="token string">\'i\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Insert\'</span><span class="token punctuation">,</span> <span class="token string">\'I\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'ic\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Insert\'</span><span class="token punctuation">,</span> <span class="token string">\'I\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'R\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Replace\'</span><span class="token punctuation">,</span> <span class="token string">\'R\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'Rv\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'V·Replace\'</span><span class="token punctuation">,</span> <span class="token string">\'V·R\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'c\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Command\'</span><span class="token punctuation">,</span> <span class="token string">\'C\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'cv\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Vim·Ex \'</span><span class="token punctuation">,</span> <span class="token string">\'V·E\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'ce\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Ex \'</span><span class="token punctuation">,</span> <span class="token string">\'E\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'r\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Prompt \'</span><span class="token punctuation">,</span> <span class="token string">\'P\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'rm\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'More \'</span><span class="token punctuation">,</span> <span class="token string">\'M\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'r?\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Confirm \'</span><span class="token punctuation">,</span> <span class="token string">\'C\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'!\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Shell \'</span><span class="token punctuation">,</span> <span class="token string">\'S\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">\'t\'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">\'Terminal \'</span><span class="token punctuation">,</span> <span class="token string">\'T\'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">\'Unknown\'</span><span class="token punctuation">,</span> <span class="token string">\'U\'</span><span class="token punctuation">&#125;</span> <span class="token comment">-- handle edge cases</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\nM<span class="token punctuation">.</span>get_current_mode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> current_mode <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_get_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode\n\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>mode<span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\' %s \'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\' %s \'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>get_git_status <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token comment">-- use fallback because it doesn\'t set this variable on the initial &#96;BufEnter&#96;</span>\n  <span class="token keyword">local</span> signs <span class="token operator">=</span> vim<span class="token punctuation">.</span>b<span class="token punctuation">.</span>gitsigns_status_dict <span class="token keyword">or</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> added <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> changed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> removed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>\n  <span class="token keyword">local</span> is_head_empty <span class="token operator">=</span> signs<span class="token punctuation">.</span>head <span class="token operator">~=</span> <span class="token string">\'\'</span>\n\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>git_status<span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">return</span> is_head_empty <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'  %s \'</span><span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head <span class="token keyword">or</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">\'\'</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">return</span> is_head_empty\n    <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>\n      <span class="token string">\' +%s ~%s -%s |  %s \'</span><span class="token punctuation">,</span>\n      signs<span class="token punctuation">.</span>added<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>changed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>removed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head\n    <span class="token punctuation">)</span>\n    <span class="token keyword">or</span> <span class="token string">\'\'</span>\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>get_filename <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">" %&lt;%f "</span> <span class="token keyword">end</span>\n  <span class="token keyword">return</span> <span class="token string">" %&lt;%F "</span>\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>get_filetype <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> file_name<span class="token punctuation">,</span> file_ext <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:e"</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> icon <span class="token operator">=</span> require<span class="token string">\'nvim-web-devicons\'</span><span class="token punctuation">.</span><span class="token function">get_icon</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> file_ext<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> default <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> filetype <span class="token operator">=</span> vim<span class="token punctuation">.</span>bo<span class="token punctuation">.</span>filetype\n\n  <span class="token keyword">if</span> filetype <span class="token operator">==</span> <span class="token string">\'\'</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">\'\'</span> <span class="token keyword">end</span>\n  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\' %s %s \'</span><span class="token punctuation">,</span> icon<span class="token punctuation">,</span> filetype<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>get_line_col <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>line_col<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">\' %l:%c \'</span> <span class="token keyword">end</span>\n  <span class="token keyword">return</span> <span class="token string">\' Ln %l, Col %c \'</span>\n<span class="token keyword">end</span>\n\n\nM<span class="token punctuation">.</span>set_active <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> colors <span class="token operator">=</span> self<span class="token punctuation">.</span>colors\n\n  <span class="token keyword">local</span> mode <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_current_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> mode_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token keyword">local</span> git <span class="token operator">=</span> colors<span class="token punctuation">.</span>git <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_git_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> git_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>git_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token keyword">local</span> filename <span class="token operator">=</span> colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> filetype_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token keyword">local</span> filetype <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> line_col <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_line_col</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> line_col_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n    colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> mode_alt<span class="token punctuation">,</span> git<span class="token punctuation">,</span> git_alt<span class="token punctuation">,</span>\n    <span class="token string">"%="</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token string">"%="</span><span class="token punctuation">,</span>\n    filetype_alt<span class="token punctuation">,</span> filetype<span class="token punctuation">,</span> line_col_alt<span class="token punctuation">,</span> line_col\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>set_inactive <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> <span class="token string">\'%= %F %=\'</span>\n<span class="token keyword">end</span>\n\nM<span class="token punctuation">.</span>set_explorer <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> title <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> <span class="token string">\'   \'</span>\n  <span class="token keyword">local</span> title_alt <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> title<span class="token punctuation">,</span> title_alt <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\nStatusline <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  __call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>statusline<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"active"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"inactive"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"explorer"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_explorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>\n  <span class="token keyword">end</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\n<span class="token comment">-- set statusline</span>\n<span class="token comment">-- TODO: replace this once we can define autocmd using lua</span>\napi<span class="token punctuation">.</span><span class="token function">nvim_exec</span><span class="token punctuation">(</span><span class="token string">[[\n  augroup Statusline\n  au!\n  au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline(\'active\')\n  au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline(\'inactive\')\n  au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline(\'explorer\')\n  augroup END\n]]</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span>\n\n<span class="token comment">----[[</span>\n<span class="token comment">--  NOTE: I don\'t use this since the statusline already has</span>\n<span class="token comment">--  so much stuff going on. Feel free to use it!</span>\n<span class="token comment">--  credit: https://github.com/nvim-lua/lsp-status.nvim</span>\n<span class="token comment">--</span>\n<span class="token comment">--  I now use &#96;tabline&#96; to display these errors, go to &#96;_bufferline.lua&#96; if you</span>\n<span class="token comment">--  want to check that out</span>\n<span class="token comment">----]]</span>\n<span class="token comment">-- Statusline.get_lsp_diagnostic = function(self)</span>\n<span class="token comment">--   local result = &#123;&#125;</span>\n<span class="token comment">--   local levels = &#123;</span>\n<span class="token comment">--     errors = \'Error\',</span>\n<span class="token comment">--     warnings = \'Warning\',</span>\n<span class="token comment">--     info = \'Information\',</span>\n<span class="token comment">--     hints = \'Hint\'</span>\n<span class="token comment">--   &#125;</span>\n\n<span class="token comment">--   for k, level in pairs(levels) do</span>\n<span class="token comment">--     result[k] = vim.lsp.diagnostic.get_count(0, level)</span>\n<span class="token comment">--   end</span>\n\n<span class="token comment">--   if self:is_truncated(120) then</span>\n<span class="token comment">--     return \'\'</span>\n<span class="token comment">--   else</span>\n<span class="token comment">--     return string.format(</span>\n<span class="token comment">--       "| :%s :%s :%s :%s ",</span>\n<span class="token comment">--       result[\'errors\'] or 0, result[\'warnings\'] or 0,</span>\n<span class="token comment">--       result[\'info\'] or 0, result[\'hints\'] or 0</span>\n<span class="token comment">--     )</span>\n<span class="token comment">--   end</span>\n<span class="token comment">-- end</span></code>',E(n,wi,o),E(n,vi,o),b(vi,yi),E(n,Ei,o),E(n,bi,o),b(bi,_i),E(n,Ci,o),E(n,Li,o),b(Li,Pi),b(Li,Ai),b(Ai,Si),b(Li,$i),E(n,xi,o),E(n,Di,o),b(Di,Mi),E(n,Ti,o),E(n,Hi,o),b(Hi,Oi),b(Hi,Ni),b(Ni,Vi),b(Hi,Bi),E(n,Ri,o),E(n,Fi,o),b(Fi,ji),b(Fi,qi),b(qi,Gi),b(Fi,Wi),b(Fi,Ui),b(Ui,Yi),b(Fi,zi),E(n,Ki,o),E(n,Qi,o),b(Qi,Zi),b(Zi,Ji),E(n,Xi,o),E(n,nu,o),b(nu,su),E(n,au,o),E(n,tu,o),b(tu,ou),pu=!0},p(n,s){const a={};1&s&&(a.$$scope={dirty:s,ctx:n}),nt.$set(a);const t={};1&s&&(t.$$scope={dirty:s,ctx:n}),Nt.$set(t);const o={};1&s&&(o.$$scope={dirty:s,ctx:n}),Uo.$set(o);const p={};1&s&&(p.$$scope={dirty:s,ctx:n}),Rc.$set(p)},i(n){pu||(l(nt.$$.fragment,n),l(Nt.$$.fragment,n),l(Uo.$$.fragment,n),l(Rc.$$.fragment,n),pu=!0)},o(n){i(nt.$$.fragment,n),i(Nt.$$.fragment,n),i(Uo.$$.fragment,n),i(Rc.$$.fragment,n),pu=!1},d(n){n&&w(s),n&&w(c),n&&w(r),n&&w(ls),n&&w(is),n&&w(ks),n&&w(hs),n&&w(ws),n&&w(vs),n&&w(bs),n&&w(_s),n&&w(Cs),n&&w(Ls),n&&w(Xs),n&&w(na),n&&w(ta),n&&w(oa),n&&w(ca),n&&w(la),n&&w(fa),n&&w(ga),n&&w(va),n&&w(ya),n&&w(xa),n&&w(Da),n&&w(Ma),n&&w(Ta),n&&w(ja),n&&w(qa),n&&w(Ga),n&&w(Wa),n&&w(Xa),u(nt,n),n&&w(st),n&&w(at),n&&w(pt),n&&w(et),n&&w(lt),n&&w(it),n&&w(ut),n&&w(rt),n&&w(gt),n&&w(mt),n&&w(wt),n&&w(vt),n&&w(Et),n&&w(bt),n&&w(Ct),n&&w(Lt),n&&w(xt),n&&w(Dt),n&&w(Mt),n&&w(Tt),n&&w(Ot),u(Nt,n),n&&w(Vt),n&&w(Bt),n&&w(jt),n&&w(qt),n&&w(Wt),n&&w(Ut),n&&w(Yt),n&&w(zt),n&&w(wo),n&&w(vo),n&&w(Io),n&&w(Co),n&&w(Wo),u(Uo,n),n&&w(Yo),n&&w(zo),n&&w(Zo),n&&w(Jo),n&&w(ep),n&&w(cp),n&&w(lp),n&&w(ip),n&&w(yp),n&&w(Ep),n&&w(_p),n&&w(Ip),n&&w(Pp),n&&w(Ap),n&&w($p),n&&w(xp),n&&w(ne),n&&w(se),n&&w(oe),n&&w(pe),n&&w(ue),n&&w(re),n&&w(ke),n&&w(he),n&&w(we),n&&w(ve),n&&w(Ie),n&&w(Ce),n&&w(Ae),n&&w(Se),n&&w(xe),n&&w(De),n&&w(Me),n&&w(Te),n&&w(je),n&&w(qe),n&&w(ze),n&&w(Ke),n&&w(Je),n&&w(Xe),n&&w(cc),n&&w(lc),n&&w(ic),n&&w(uc),n&&w(wc),n&&w(vc),n&&w(bc),n&&w(_c),n&&w(Ac),n&&w(Sc),n&&w($c),n&&w(xc),n&&w(Bc),u(Rc,n),n&&w(Fc),n&&w(jc),n&&w(Wc),n&&w(Uc),n&&w(tl),n&&w(ol),n&&w(cl),n&&w(ll),n&&w(ul),n&&w(rl),n&&w(kl),n&&w(hl),n&&w(wl),n&&w(vl),n&&w(bl),n&&w(_l),n&&w(Cl),n&&w(Ll),n&&w(Pl),n&&w(Al),n&&w($l),n&&w(xl),n&&w(Tl),n&&w(Hl),n&&w(Nl),n&&w(Vl),n&&w(Bl),n&&w(Rl),n&&w(ql),n&&w(Gl),n&&w(Kl),n&&w(Ql),n&&w(Zl),n&&w(Jl),n&&w(ei),n&&w(ci),n&&w(ui),n&&w(ri),n&&w(gi),n&&w(mi),n&&w(wi),n&&w(vi),n&&w(Ei),n&&w(bi),n&&w(Ci),n&&w(Li),n&&w(xi),n&&w(Di),n&&w(Ti),n&&w(Hi),n&&w(Ri),n&&w(Fi),n&&w(Ki),n&&w(Qi),n&&w(Xi),n&&w(nu),n&&w(au),n&&w(tu)}}}function $(n){let s,a;const k=[x];let h={$$slots:{default:[S]},$$scope:{ctx:n}};for(let o=0;o<k.length;o+=1)h=t(h,k[o]);return s=new _({props:h}),{c(){o(s.$$.fragment)},l(n){p(s.$$.fragment,n)},m(n,t){e(s,n,t),a=!0},p(n,[a]){const t=0&a?c(k,[r(x)]):{};1&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){a||(l(s.$$.fragment,n),a=!0)},o(n){i(s.$$.fragment,n),a=!1},d(n){u(s,n)}}}const x={title:"How I made my Neovim statusline in Lua",date:"2020-11-29T00:00:00.000Z",desc:"A post where I explain how I made my custom statusline in Lua",tags:["neovim"]};export default class extends n{constructor(n){super(),s(this,n,null,$,a,{})}}export{x as metadata};
